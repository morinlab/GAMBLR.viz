% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/circular_CN_plot.R
\name{circular_CN_plot}
\alias{circular_CN_plot}
\title{Circular overview of copy number data across a cohort}
\usage{
circular_CN_plot(
  pretty_CN_heatmap_output,
  ideogram = TRUE,
  track_height = 0.1,
  min_correlation = 0.35,
  max_neg_correlation = -0.06,
  del_col = "#0000FF80",
  gain_col = "#FF000080",
  calculate_correlations = FALSE,
  link_transparency = 0.8,
  labelTheseGenes = c("CD58", "TLR2", "MCL1", "CDKN2A", "TMEM30A", "RHOA", "B2M", "PTEN",
    "FAS", "ETV6", "GRB2", "FCGR2B", "CCND3", "CUX1", "MIR17HG", "TFPT", "CD274", "JAK2",
    "CDK14", "BCL6", "EZH2", "HIST1H1E", "REL", "NOL9", "TNFRSF14", "TOX", "TP53", "RB1",
    "TCF4", "HNRNPD", "BCL2", "NFKBIZ", "TNFAIP3", "PRDM1", "CD70", "MYC")
)
}
\arguments{
\item{pretty_CN_heatmap_output}{Output from the [GAMBLR.results::pretty_CN_heatmap] call.}

\item{ideogram}{Logical value indicating whether to plot ideogram. Default is TRUE.}

\item{track_height}{Change this to increase/decrease the height of the tracks. (0.1)}

\item{min_correlation}{Minimum correlation to consider when plotting links}

\item{max_neg_correlation}{Maximum negative value for correlations <1 to consider when plotting links}

\item{del_col}{Optionally specify a different colour to use for the CNV deletion track}

\item{gain_col}{Optionally specify a different colour to use for the CNV gain track}

\item{calculate_correlations}{Experimental! Calculate the correlation between CNVs between different chromosomes and link highly correlated regions}

\item{link_transparency}{Specify a different alpha to increase or decrease the transparency of links}

\item{labelTheseGenes}{Specify a vector of gene names to label in the plot}
}
\value{
Nothing
}
\description{
Circular overview of copy number data across a cohort
}
\examples{
\dontrun{
library(GAMBLR.open)
meta = get_gambl_metadata()
meta = check_and_clean_metadata(meta,duplicate_action="keep_first")
print("pretty_CN_heatmap") 

all_segments = get_cn_segments(these_samples_metadata = meta)
all_states_binned = segmented_data_to_cn_matrix(
                                 seg_data = all_segments,
                                 strategy="auto_split",
                                 n_bins_split=500,
                                 these_samples_metadata = meta)
labelTheseGenes = c("REL","TP53")
CN_out = pretty_CN_heatmap(cn_state_matrix=all_states_binned,
                           these_samples_metadata = meta,
                           return_data = TRUE,
                           labelTheseGenes = labelTheseGenes)

circular_CN_plot(CN_out)
}

}

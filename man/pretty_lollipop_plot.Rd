% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_lollipop_plot.R
\name{pretty_lollipop_plot}
\alias{pretty_lollipop_plot}
\title{Pretty Lollipop Plot.}
\usage{
pretty_lollipop_plot(
  maf_df,
  these_samples_metadata,
  gene,
  plot_title,
  refseq_id,
  include_silent = FALSE,
  label_threshold = 5,
  plotarg = TRUE,
  mirrorarg = FALSE,
  combined_gene_counts,
  meta1_counter,
  meta2_counter,
  Sample1 = Sample1,
  Sample2 = Sample2,
  font
)
}
\arguments{
\item{maf_df}{A data frame containing the mutation data.}

\item{these_samples_metadata}{Required argument. A data.frame with metadata.}

\item{gene}{The gene symbol to plot.}

\item{plot_title}{Optional, the title of the plot. Default is gene.}

\item{refseq_id}{Insert a specific NM_xxx value of interest}

\item{include_silent}{Logical parameter indicating whether to include silent mutations into coding mutations. Default is FALSE.}

\item{label_threshold}{Threshold for labels to appear on plot. Default set to 5.}

\item{plotarg}{Logical parameter indicating whether to plot the lollipopplot or return the data in data frame format. Default is TRUE.}

\item{mirrorarg}{Logical paramter for when mirroring lollipop data in prety_co_lollipop plot. Default is FALSE.}

\item{combined_gene_counts}{A dataframe containing data for a mirrored lollipop analysis.}

\item{meta1_counter}{A dataframe for calculating Somatic Mutation Rate in `pretty_lollipop_plot`.}

\item{meta2_counter}{A dataframe for calculating Somatic Mutation Rate in `pretty_lollipop_plot`.}

\item{Sample1}{A label for displaying Somatic Mutation Rate in `pretty_lollipop_plot`.}

\item{Sample2}{A label for displaying Somatic Mutation Rate in `pretty_lollipop_plot`.}

\item{font}{Customizable font size for the CoLollipop plot somatic mutation rate and comparison labels. Default is 11pt font.}
}
\value{
A lollipop plot.
}
\description{
Generates a visually appealing lollipop plot.
}
\details{
Retrieve maf data of a specific sample or a set of samples. A gene of interest
can then be visualized with the given maf data. Silent mutations can be visualized setting
include_silent to TRUE.
}
\examples{
library(GAMBLR.open)
suppressMessages(
  suppressWarnings({

#get meta data (BL_Thomas)
metadata <- suppressMessages(get_gambl_metadata()) \%>\%
    filter(seq_type == "genome") \%>\%
    check_and_clean_metadata(.,duplicate_action="keep_first")

maf_df <- get_coding_ssm(
    these_samples_metadata = metadata
)

#construct pretty_lollipop_plot.
lolipop_result <- pretty_lollipop_plot(maf_df, these_samples_metadata = metadata, "DDX3X")
print(lolipop_result)

\dontrun{
 # Or, with GAMBLR.results:
 library(GAMBLR.results)
 metadata <- get_gambl_metadata() \%>\%
    dplyr::filter(pathology == "BL")

maf_df <- get_all_coding_ssm(
    these_samples_metadata = metadata
)
lolipop_result <- pretty_lollipop_plot(maf_df, these_samples_metadata = metadata, "DDX3X")
lolipop_result
}
}

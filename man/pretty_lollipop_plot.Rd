% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_lollipop_plot.R
\name{pretty_lollipop_plot}
\alias{pretty_lollipop_plot}
\title{Pretty Lollipop Plot.}
\usage{
pretty_lollipop_plot(
  maf_df,
  gene = NULL,
  plot_title,
  by_allele = TRUE,
  include_silent = FALSE,
  labelPos = NULL
)
}
\arguments{
\item{maf_df}{A data frame containing the mutation data.}

\item{gene}{The gene symbol to plot.}

\item{plot_title}{Optional, the title of the plot. Default is gene.}

\item{by_allele}{Set to FALSE to consider all mutations at the same codon as equivalent.
When FALSE, and combined with labelPos, the labels will only indicate the amino acid number. Default is TRUE.}

\item{include_silent}{Logical parameter indicating whether to include silent mutations into coding mutations. Default is FALSE.}

\item{labelPos}{Specify which AA positions to label in the plot (default is no labels).}
}
\value{
A lollipop plot.
}
\description{
Generates a visually appealing lollipop plot.
}
\details{
Retrieve maf data of a specific sample or a set of samples. A gene of interest
can then be visualized with the given maf data. Silent mutations can be visualized setting
include_silent to TRUE.
}
\examples{
library(GAMBLR.open)
#get meta data (BL_Thomas)
metadata <- suppressMessages(get_gambl_metadata()) \%>\%
    filter(cohort == "BL_Thomas")

maf_df <- get_coding_ssm(
    these_samples_metadata = metadata
)

#construct pretty_lollipop_plot.
lolipop_result <- pretty_lollipop_plot(maf_df, "DDX3X")
print(lolipop_result)

\dontrun{
 # Or, with GAMBLR.results:
 library(GAMBLR.results)
 metadata <- get_gambl_metadata() \%>\%
    dplyr::filter(pathology == "BL")

maf_df <- get_all_coding_ssm(
    these_samples_metadata = metadata
)
lolipop_result <- pretty_lollipop_plot(maf_df, "DDX3X")
lolipop_result
}
}

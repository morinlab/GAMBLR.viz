% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prettyOncoplot.R
\name{prettyOncoplot}
\alias{prettyOncoplot}
\title{PrettyOncoplot}
\usage{
prettyOncoplot(
  maf_df,
  cnv_df,
  onco_matrix_path,
  genes,
  include_noncoding = NULL,
  keepGeneOrder = FALSE,
  keepSampleOrder = FALSE,
  highlightHotspots = FALSE,
  these_samples_metadata,
  metadataColumns,
  numericMetadataColumns,
  expressionColumns = c(),
  numericMetadataMax,
  sortByColumns,
  arrange_descending = FALSE,
  removeNonMutated = FALSE,
  minMutationPercent,
  mutAlpha = 1,
  recycleOncomatrix = FALSE,
  splitColumnName,
  splitGeneGroups,
  showTumorSampleBarcode = FALSE,
  groupNames,
  hide_annotations,
  hide_annotations_tracks = FALSE,
  annotate_specific_genes = FALSE,
  this_forest_object = NULL,
  custom_colours = NULL,
  hideTopBarplot = TRUE,
  tally_all_mutations = FALSE,
  tally_all_mutations_max = 1000,
  hideSideBarplot = FALSE,
  box_col = NA,
  annoAlpha = 1,
  legend_direction = "horizontal",
  ylim = NULL,
  legend_position = "bottom",
  legend_row = 3,
  legend_col = 3,
  metadataBarHeight = 1.5,
  metadataBarFontsize = 5,
  legendFontSize = 10,
  fontSizeGene = 6,
  annotation_row = 2,
  annotation_col = 1,
  verbose = FALSE,
  cluster_rows = FALSE,
  cluster_cols = FALSE,
  cluster_numeric_rows = TRUE,
  cluster_numeric_cols = FALSE,
  clustering_distance_rows = "binary",
  clustering_distance_cols = "binary",
  split_rows_kmeans,
  split_columns_kmeans,
  dry_run = FALSE,
  simplify = FALSE,
  stacked = FALSE,
  numeric_heatmap_type = "aSHM",
  numeric_heatmap_location = "top",
  return_inputs = FALSE
)
}
\arguments{
\item{maf_df}{A maf as data frame containing the mutations you want to plot.}

\item{cnv_df}{An optional data frame of CN status for genes you want included (rows = sample_id, columns = Hugo_Symbol)}

\item{onco_matrix_path}{Provide a path to an onco_matrix file instead of a MAF object if the former is unavailable (this limits functionality a bit).}

\item{genes}{An optional vector of genes to restrict your plot to.}

\item{include_noncoding}{List of non-coding regions to be included, default is NULL. Specify like this: include_noncoding=list("NFKBIZ" = c("3'UTR"), "HNRNPH1" = "Splice_Region")}

\item{keepGeneOrder}{Set to TRUE if you want to preserve the gene order specified.}

\item{keepSampleOrder}{Set to TRUE if you want to preserve the sample order specified. The default value is FALSE and respects all of the specified ordering.}

\item{highlightHotspots}{Set to TRUE to highlight hot spots. Default is FALSE.}

\item{these_samples_metadata}{Data frame containing metadata for your samples.}

\item{metadataColumns}{A vector containing the categorical column names you want to plot below.}

\item{numericMetadataColumns}{A vector containing the numeric columns you want to plot below.}

\item{expressionColumns}{Optional variable for retreiving expression values for a specific gene(s).}

\item{numericMetadataMax}{A numeric vector of cutoffs to apply to numeric columns above.}

\item{sortByColumns}{A vector containing the column names you want to sort columns (patients) on.}

\item{arrange_descending}{A Boolean parameter. Set to TRUE to sort metadata in descending fashion. Default is FALSE.}

\item{removeNonMutated}{Set to TRUE to drop unmutated cases.}

\item{minMutationPercent}{Only genes mutated in more than minMutationPercent \% patients will be included.}

\item{mutAlpha}{Optional alpha to apply to mutation colours.}

\item{recycleOncomatrix}{Set to TRUE most of the time to reuse the oncomatrix saved by maftools.}

\item{splitColumnName}{Optional argument to indicate which metadata column to split on.}

\item{splitGeneGroups}{Split genes into groups for better seperation (between different gene-groups) in prettyOncoplot.}

\item{showTumorSampleBarcode}{Optional argument for showing tumor barcode. Default is FALSE.}

\item{groupNames}{optional vector of group names to be displayed above heatmap. Should be the same length as the number of groups that will be shown. Default is NULL (no labels).}

\item{hide_annotations}{Hide annotations for specifc ashms. argument takes a list with annotations.}

\item{hide_annotations_tracks}{When hide_annotations is supplied with a list of columns, this parameter can optionally also not display those columns as the annotation track. Accepts TRUE and FALSE (default).}

\item{annotate_specific_genes}{Optional argument, specifying whether the features should be labelled according to their significance in one of the pathologies. Default is FALSE (no annotation).}

\item{this_forest_object}{If annotate_specific_genes is specified, this arguments takes the output of GAMBLR::prettyForestPlot directly to determine the annotations.}

\item{custom_colours}{Provide named vector (or named list of vectors) containing custom annotation colours if you do not want to use standartized pallette.}

\item{hideTopBarplot}{Optional argument for removing top bar plot. Default value is TRUE.}

\item{tally_all_mutations}{Optional argument. Set to TRUE to tally all mutations. Default is FALSE.}

\item{tally_all_mutations_max}{Optional argument. Default is 1000.}

\item{hideSideBarplot}{Optional argument for removing side bar plot. Default value is FALSE.}

\item{box_col}{Colour of boxes for outlining mutations (can be problematic with larger oncoprints).}

\item{annoAlpha}{Optional alpha to apply to annotation colours.}

\item{legend_direction}{Direction of legend, default is "horizontal".}

\item{ylim}{Limit for y-axis.}

\item{legend_position}{Position of legend, default is "bottom".}

\item{legend_row}{Fiddle with these to widen or narrow your legend.}

\item{legend_col}{Fiddle with these to widen or narrow your legend.}

\item{metadataBarHeight}{Optional argument to adjust the height of bar with annotations. The default is 1.5.}

\item{metadataBarFontsize}{Optional argument to control for the font size of metadata annotations. The default is 5.}

\item{legendFontSize}{Font size for legend, default is 10.}

\item{fontSizeGene}{Font size for gene labels (default 6).}

\item{annotation_row}{Row for annotations, default is 2.}

\item{annotation_col}{Column for annotations, default is 1.}

\item{verbose}{Set to TRUE to enable verbose mode (debugging messages.}

\item{cluster_rows}{Force clustering of genes with correlated mutation patterns}

\item{cluster_cols}{Force clustering of patients with correlated mutation patterns}

\item{cluster_numeric_rows}{also cluster the rows of numeric data (when making a 'stacked' plot)}

\item{cluster_numeric_cols}{replace cluster_cols behavior by using the numeric data matrix (when making a 'stacked' plot)}

\item{clustering_distance_rows}{Distance metric used for clustering when cluster_rows = TRUE}

\item{clustering_distance_cols}{Distance metric used for clustering when cluster_cols = TRUE}

\item{split_rows_kmeans}{K value for k-means clustering on rows}

\item{split_columns_kmeans}{K value for k-means clustering on columns}

\item{dry_run}{Set to TRUE to more efficiently view the clustering result while debugging cluster_rows/clustering_distance_rows}

\item{simplify}{Collapse/group the variant effect categories to only 3 options. This is a much faster option for when many patients/genes are included.}

\item{stacked}{Create a dual heatmap with the second (lower) portion for the numeric metadata provided (e.g. aSHM)}

\item{numeric_heatmap_type}{Which type of numeric heatmap to draw? Accepts either "aSHM" (default) or "CNV".}

\item{numeric_heatmap_location}{Where to draw the numeric heatmap. Can be "top" (default) or "bottom".}

\item{return_inputs}{Optional flag to return the mutation matrix generated by the function}
}
\value{
By default, nothing unless return_inputs is specified, 
in which case it returns a logical matrix indicating the mutation status of each gene and 
patient shown in the heatmap.
}
\description{
Create a highly customizable oncoplot using complexHeatmap functionality.
}
\details{
Make an oncoplot that is pretty using ComplexHeatmap. The metadata is expected to follow the structure and column naming used in GAMBL.
If you provide your own non-GAMBL samples and metadata, you must include at least the following columns with these names.
The first one should match the Tumor_Sample_Barcode in the MAF object or onco_matrix you provide.
sample_id, pathology
}
\examples{
#load packages
library(grid)
library(GAMBLR.data)
library(dplyr)

maf_metadata <- get_gambl_metadata(seq_type_filter = "genome") \%>\%
    dplyr::filter(pathology \%in\% c("FL", "DLBCL"), cohort == "FL_Dreval")

maf_data <- get_ssm_by_samples(
    these_samples_metadata = maf_metadata
)

fl_genes = c("RRAGC", "CREBBP", "VMA21", "ATP6V1B2")

dlbcl_genes = c("EZH2", "KMT2D", "MEF2B", "CD79B", "MYD88", "TP53")

genes = c(fl_genes, dlbcl_genes)

#Use a helper function to get the CN status for some genes to include in the oncoPlot


gene_regions = data.frame(gene_id=c("REL","CDKN2A",
  "MIR17HG","TP53","ATM","FAS","SMARCA4","B2M","TNFRSF14",
  "TMEM30A","TNFAIP3"),
  cn_thresh = c(4,1,4,1,1,1,1,1,1,1,1))
  
gene_cnv = get_cnv_and_ssm_status(only_cnv="all",
  these_samples_metadata = get_gambl_metadata(),
  genes_and_cn_threshs = gene_regions) \%>\% 
  filter(!is.na(REL)) 
  # filter is needed because the helper function returns all-NA rows for some samples
 
 prettyOncoplot(maf_df=all_coding,genes=c("CREBBP","EZH2","MYD88",
     "TCF3","BCL2","BCL7A","MEF2B","POU2F2","POU2AF1","ID3","MYC",
     "RRAGC","TCL1A","KMT2D","PIM1","CD79B","TMSB4X","TMEM30A","TNFAIP3"),
     these_samples_metadata = maf_metadata,
     cluster_rows = T,
     metadataColumns = c("pathology","genetic_subgroup","seq_type","ffpe_or_frozen"),
     cluster_cols = F,
     simplify=T,
     cnv_df=gene_cnv,sortByColumns = c("pathology","genetic_subgroup"))

gene_groups = c(rep("FL", length(fl_genes)), rep("DLBCL", length(dlbcl_genes)))
names(gene_groups) = genes

prettyOncoplot(
    maf_df = maf_data,
    genes = genes,
    these_samples_metadata = maf_metadata \%>\%
        arrange(patient_id),
    splitGeneGroups = gene_groups,
    keepGeneOrder = TRUE,
    splitColumnName = "pathology",
    metadataBarHeight = 5,
    metadataBarFontsize = 8,
    legend_row = 2,
    fontSizeGene = 11,
    metadataColumns = c("pathology", "lymphgen", "sex"),
    sortByColumns = c("pathology", "lymphgen", "sex")
)

}

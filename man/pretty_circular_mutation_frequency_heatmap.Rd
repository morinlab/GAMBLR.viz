% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_circular_mutation_frequency_heatmap.R
\name{pretty_circular_mutation_frequency_heatmap}
\alias{pretty_circular_mutation_frequency_heatmap}
\title{pretty_circular_mutation_frequency_heatmap}
\usage{
pretty_circular_mutation_frequency_heatmap(
  prettyOncoplot_output,
  cn_status_matrix,
  collated_results,
  these_samples_metadata,
  genes,
  cluster = T,
  keep_these_pathologies,
  min_sample_num = 20,
  col_fun,
  col_theme,
  return_data = FALSE,
  dend_location = "inside",
  clustering_distance_method = "euclidean",
  border = T,
  split_by_type = FALSE,
  rotate_degrees = 0,
  gap.degree = 15,
  show.sector.labels = FALSE,
  label_cex = 0.5,
  rownames_cex = 0.5,
  include_legend = F,
  colour_labels = F,
  label_group = "text",
  label_alpha
)
}
\arguments{
\item{prettyOncoplot_output}{}

\item{genes}{}

\item{keep_these_pathologies}{}

\item{min_sample_num}{}
}
\description{
pretty_circular_mutation_frequency_heatmap
}
\examples{

all_gambl_meta = get_gambl_metadata() \%>\% 
    filter(!seq_type == "mrna") \%>\%
    filter(pathology \%in\% names(get_gambl_colours("pathology")))
    
all_coding = get_all_coding_ssm(these_samples_metadata = all_gambl_meta)

genes = filter(GAMBLR.data::lymphoma_genes_dlbcl_v_latest,curated==TRUE) \%>\% 
    pull(Gene)
genes = unique(c(genes,filter(GAMBLR.data::lymphoma_genes_mcl_v_latest,,curated==TRUE) \%>\% pull(Gene)))
genes = unique(c(genes,filter(GAMBLR.data::lymphoma_genes_bl_v_latest,,curated==TRUE) \%>\% pull(Gene)))  
oncoplot_output = prettyOncoplot(all_coding,
                                genes=genes,
                                minMutationPercent = 2,
                                these_samples_metadata = all_gambl_meta,
                                simplify = T,return_inputs = T)

pretty_circular_mutation_frequency_heatmap(prettyOncoplot_output = oncoplot_output,
                                           keep_these_pathologies = c("FL",
                                               "DLBCL",
                                               "PMBCL",
                                               "BL",
                                               "HGBL"))

genes_and_cn_threshs = 
    data.frame(gene_id=c("MYC",
    "MIR17HG", "TNFAIP3","TCF4",
    "TNFRSF14","REL","CD274",
    "FAS","HNRNPD","B2M","TP53",
    "CDKN2A","RB1","PTEN","CD70",
    "TOX","RHOA","CD58","MCL1",
    "ETV6","TMEM30A"),
    cn_thresh=c(3,3,1,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,3,1,1)) \%>\%
    mutate(name=ifelse(cn_thresh>2,paste0(gene_id,"_gain"),paste0(gene_id,"_loss")))

seg_data = get_cn_segments()

cn_status = get_cnv_and_ssm_status(only_cnv="all",
                        these_samples_metadata = all_gambl_meta,
                        genes_and_cn_threshs = genes_and_cn_threshs,
                        adjust_for_ploidy=T)
                        
                        
pretty_circular_mutation_frequency_heatmap(cn_status_matrix = cn_status,
                                           prettyOncoplot_output = oncoplot_output)

sv_collated = GAMBLR.results:::collate_sv_results() \%>\% 
    select(sample_id,ends_with("sv"))

NFKBIZ_genome = GAMBLR.results:::collate_nfkbiz_results() \%>\% 
    select(sample_id,NFKBIZ_UTR)
NFKBIZ_capture = GAMBLR.results:::collate_nfkbiz_results(seq_type_filter="capture") \%>\% 
    select(sample_id,NFKBIZ_UTR)

HNRNPH1_genome = GAMBLR.results:::collate_hnrnph1_mutations() \%>\% 
    select(sample_id,HNRNPH1_splice)
HNRNPH1_capture = GAMBLR.results:::collate_hnrnph1_mutations(seq_type_filter="capture") \%>\% 
    select(sample_id,HNRNPH1_splice)

NFKBIZ = bind_rows(NFKBIZ_genome,NFKBIZ_capture)
HNRNPH1 = bind_rows(HNRNPH1_genome,HNRNPH1_capture)

pretty_circular_mutation_frequency_heatmap(cn_status_matrix = cn_status,
                                           collated_results = list(sv_collated,
                                               NFKBIZ,
                                               HNRNPH1),
                                           prettyOncoplot_output = oncoplot_output,
                                           these_samples_metadata = all_gambl_meta)
                                           
                                           
all_states_binned = get_cn_states(n_bins_split=2500,
    missing_data_as_diploid = T,
    seg_data = seg_data)    
    
CN_out = pretty_CN_heatmap(cn_state_matrix=all_states_binned,
    these_samples_metadata = all_gambl_meta,
    hide_annotations = "chromosome",
    scale_by_sample=T,
    return_data = T)   

arm_level_events = categorize_CN_events(CN_out)


arm_level_annotated = rownames_to_column(arm_level_events$arm_events_simplified,"sample_id")

pretty_circular_mutation_frequency_heatmap(cn_status_matrix = cn_status,
                                           collated_results = list(sv_collated,
                                               NFKBIZ,
                                               HNRNPH1,
                                               arm_level_annotated),
                                           prettyOncoplot_output = oncoplot_output,
                                           these_samples_metadata = all_gambl_meta)
                                           
                              
ashm_freq = get_ashm_count_matrix(
                 regions_bed = dplyr::mutate(GAMBLR.data::grch37_ashm_regions,
                               name = paste(gene, region, sep = "_")),
                 this_seq_type = "genome"
                 )
ashm_freq_collated = mutate(ashm_freq,across(,~ifelse(.x>0,1,0)))  
 
 ashm_freq_collated = ashm_freq_collated[,colSums(ashm_freq_collated) >130]
 ashm_freq_collated = rownames_to_column(ashm_freq_collated,"sample_id")


}

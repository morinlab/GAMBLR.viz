[1] "=== STARTED AT 2025-09-02 16:06:15 ==="
── Running 36 example files ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── GAMBLR.viz ──

> cat("Running example for function: ashm_multi_rainbow_plot\n")
Running example for function: ashm_multi_rainbow_plot

> suppressMessages(library(GAMBLR.open))

> lymphgen_colours = GAMBLR.helpers::get_gambl_colours("lymphgen")

> metadata = suppressMessages(GAMBLR.open::get_gambl_metadata()) %>% 
+     dplyr::filter(pathology == "DLBCL", seq_type == "genome") %>% 
+     check_and_clean_metadata(., duplicate_action = "keep_first") %>% 
+     dplyr::arrange(lymphgen)

> regions_bed = GAMBLR.utils::create_bed_data(GAMBLR.data::grch37_ashm_regions, 
+     fix_names = "concat", concat_cols = c("gene", "region"), 
+     sep = "-")

> regions_bed = dplyr::filter(regions_bed, grepl("BCL6", 
+     name))

> ashm_multi_rainbow_plot(regions_bed = regions_bed, 
+     these_samples_metadata = metadata, custom_colours = lymphgen_colours, 
+     verbose = TRUE)
[1] "ashm_multi_rainbow_plot"
[1] "regions_bed provided"
genomic_data Object
Genome Build: grch37 
Showing first 10 rows:
  chrom     start       end              name       region regulatory_comment
1     3 187458526 187464632          BCL6-TSS          TSS               <NA>
2     3 187615533 187625659 BCL6-Intergenic-1 Intergenic-1               <NA>
3     3 187625659 187638101 BCL6-Intergenic-2 Intergenic-2               <NA>
4     3 187657518 187665996 BCL6-Intergenic-3 Intergenic-3               <NA>
5     3 187675741 187690717 BCL6-Intergenic-4 Intergenic-4               <NA>
6     3 187690717 187705000 BCL6-Intergenic-5 Intergenic-5               <NA>
[1] "No maf_data provided, using get_ssm_by_regions"
genomic_data Object
Genome Build: grch37 
Showing first 10 rows:
      start sample_id region_name
1 187461989  FL1015T2    BCL6-TSS
2 187463885  FL1015T2    BCL6-TSS
3 187462199  FL1002T2    BCL6-TSS
4 187462508  FL1002T2    BCL6-TSS
5 187462612  FL1002T2    BCL6-TSS
6 187462966  FL1002T2    BCL6-TSS
# A tibble: 6 × 8
  age_group bam_available cohort            compression COO_consensus DHITsig_consensus EBV_status_inf ffpe_or_frozen
  <chr>     <lgl>         <chr>             <chr>       <chr>         <chr>             <chr>          <chr>         
1 Other     TRUE          DLBCL_LSARP_Trios bam         UNCLASS       NEG               <NA>           FFPE          
2 Other     TRUE          DLBCL_LSARP_Trios cram        ABC           UNCLASS           <NA>           FFPE          
3 Other     TRUE          DLBCL_LSARP_Trios cram        ABC           NEG               <NA>           FFPE          
4 Other     TRUE          DLBCL_LSARP_Trios cram        UNCLASS       NEG               <NA>           FFPE          
5 Other     TRUE          <NA>              bam         UNCLASS       DHITsigPos        <NA>           frozen        
6 Other     TRUE          DLBCL_Gascoyne    bam         UNCLASS       DHITsigPos        <NA>           frozen        
genomic_data Object
Genome Build: 
Showing first 10 rows:
      start sample_id region_name age_group bam_available    cohort compression COO_consensus DHITsig_consensus EBV_status_inf
1 187461989  FL1015T2    BCL6-TSS     Other          TRUE FL_Kridel        cram       UNCLASS       DHITsig-IND           <NA>
2 187463885  FL1015T2    BCL6-TSS     Other          TRUE FL_Kridel        cram       UNCLASS       DHITsig-IND           <NA>
3 187462199  FL1002T2    BCL6-TSS     Other          TRUE FL_Kridel        cram           GCB       DHITsig-IND           <NA>
4 187462508  FL1002T2    BCL6-TSS     Other          TRUE FL_Kridel        cram           GCB       DHITsig-IND           <NA>
5 187462612  FL1002T2    BCL6-TSS     Other          TRUE FL_Kridel        cram           GCB       DHITsig-IND           <NA>
6 187462966  FL1002T2    BCL6-TSS     Other          TRUE FL_Kridel        cram           GCB       DHITsig-IND           <NA>
[1] "plotting"
[1] "done"

> cat("running examples for map_metadata_to_colours\n")
running examples for map_metadata_to_colours

> library(GAMBLR.open)

> all_meta = suppressMessages(get_gambl_metadata() %>% 
+     dplyr::filter(pathology %in% c("FL", "DLBCL")))

> all_cols = map_metadata_to_colours(metadataColumns = c("lymphgen", 
+     "pathology"), these_samples_metadata = all_meta, column_alias = list(nothing = "FL"))

> cat("running examples for pretty_circular_mutation_frequency_heatmap\n")
running examples for pretty_circular_mutation_frequency_heatmap

> library(dplyr)

> library(GAMBLR.open)

> suppressMessages(suppressWarnings({
+     metadata <- get_gambl_metadata() %>% dplyr::filter(!seq_type == 
+         "mrna") %>% dplyr::filter(pathology %in% names(get_gambl_colours("pathology"))) %>% 
+         check_and_clean_metadata(., duplicate_action = "keep_first")
+     all_coding <- get_coding_ssm(these_samples_metadata = metadata)
+     genes <- lymphoma_genes %>% dplyr::filter(DLBCL | FL | BL) %>% 
+         dplyr::pull(Gene) %>% unique %>% sort
+     oncoplot_output <- prettyOncoplot(all_coding, genes = genes, 
+         minMutationPercent = 2, these_samples_metadata = metadata, 
+         simplify_annotation = TRUE, return_inputs = TRUE)
+     pretty_circular_mutation_frequency_heatmap(prettyOncoplot_output = oncoplot_output, 
+         keep_these_pathologies = c("FL", "DLBCL", "PMBCL", "BL", 
+             "HGBL"))
+ }))

> suppressMessages(suppressWarnings({
+     all_sv <- get_manta_sv(these_samples_metadata = metadata)
+     annotated_sv <- annotate_sv(all_sv) %>% dplyr::filter(gene %in% 
+         genes, !is.na(partner)) %>% dplyr::select(sample_id = tumour_sample_id, 
+         gene)
+     sv_collated <- annotated_sv %>% dplyr::mutate(gene = paste("manta", 
+         gene, "sv", sep = "_"), mutated = "POS") %>% dplyr::distinct() %>% 
+         tidyr::pivot_wider(names_from = gene, values_from = mutated) %>% 
+         replace(is.na(.), "NEG")
+     pretty_circular_mutation_frequency_heatmap(collated_results = list(sv_collated), 
+         prettyOncoplot_output = oncoplot_output, these_samples_metadata = metadata)
+ }))

> suppressMessages(suppressWarnings({
+     regions_bed = GAMBLR.utils::create_bed_data(GAMBLR.data::grch37_ashm_regions, 
+         fix_names = "concat", concat_cols = c("gene", "region"), 
+         sep = "-")
+     ashm_freq <- get_ashm_count_matrix(these_samples_metadata = metadata, 
+         regions_bed = regions_bed, this_seq_type = "genome", 
+         projection = "grch37")
+     ashm_freq_collated <- mutate(ashm_freq, across(, ~ifelse(.x > 
+         0, 1, 0)))
+     ashm_freq_collated <- ashm_freq_collated[, colSums(ashm_freq_collated) > 
+         130]
+     ashm_freq_collated <- tibble::rownames_to_column(ashm_freq_collated, 
+         "sample_id")
+     pretty_circular_mutation_frequency_heatmap(collated_results = list(sv_collated, 
+         ashm_freq_collated), prettyOncoplot_output = oncoplot_output, 
+         these_samples_metadata = metadata, keep_these_pathologies = c("DLBCL", 
+             "FL", "BL"), split_by_type = TRUE, colour_labels = TRUE, 
+         label_cex = 0.4, rownames_cex = 0.4, include_legend = TRUE)
+ }))

> cat("Running example for function: pretty_CN_heatmap\n")
Running example for function: pretty_CN_heatmap

> suppressMessages(library(dplyr))

> suppressMessages(library(GAMBLR.open))

> dlbcl_genome_meta = suppressMessages(get_gambl_metadata()) %>% 
+     filter(pathology == "DLBCL", seq_type == "genome")

> meta_clean = check_and_clean_metadata(dlbcl_genome_meta, 
+     duplicate_action = "keep_first")

> all_segments = get_cn_segments(these = meta_clean)

> dlbcl_cn_binned = segmented_data_to_cn_matrix(seg_data = all_segments, 
+     strategy = "auto_split", n_bins_split = 1300, these_samples_metadata = meta_clean)

> pretty_CN_heatmap(cn_state_matrix = dlbcl_cn_binned, 
+     these_samples_metadata = meta_clean, hide_annotations = "chromosome")

> pretty_CN_heatmap(cn_state_matrix = dlbcl_cn_binned, 
+     these_samples_metadata = meta_clean, hide_annotations = "chromosomes", 
+     keep_these_chromosomes = c("9", "17"), cluster_rows = FALSE, 
+     labelTheseGenes = c("CDKN2A", "TP53"))

> library(GAMBLR.open)

> meta = GAMBLR.open::get_gambl_metadata()

> metadata = dplyr::filter(meta, cohort %in% "DLBCL_GenomeCanada")

> maf_df = GAMBLR.open::get_coding_ssm(these_samples_metadata = metadata)

> pretty_colollipop_plot_result <- pretty_colollipop_plot(maf_df = maf_df, 
+     these_samples_metadata = metadata, comparison_column = "COO_consensus", 
+     comparison_values = c("ABC", "GCB"), gene = "PIM1", label_threshold = 2, 
+     forestarg = TRUE, show_rate = TRUE, compare_distributions = TRUE)

> pretty_colollipop_plot_result$plot

> meta = GAMBLR.open::get_gambl_metadata()

> metadata = dplyr::filter(meta, pathology %in% c("FL", 
+     "DLBCL"))

> maf_df = GAMBLR.open::get_all_coding_ssm(these_samples_metadata = metadata)

> pretty_colollipop_plot_result <- pretty_colollipop_plot(maf_df = maf_df, 
+     these_samples_metadata = metadata, comparison_column = "pathology", 
+     comparison_values = c("FL", "DLBCL"), gene = "CREBBP", label_threshold = 2, 
+     forestarg = TRUE, show_rate = TRUE, compare_distributions = TRUE)
  Hugo_Symbol   Transcript_ID    RefSeq aa.length   n
1      CREBBP ENST00000262367 NM_004380      2442 152
2      CREBBP ENST00000262367      <NA>      <NA> 149
  Hugo_Symbol   Transcript_ID       RefSeq aa.length   n
1      CREBBP ENST00000262367    NM_004380      2442 367
2      CREBBP ENST00000262367         <NA>      <NA>  45
3      CREBBP            <NA> NM_001079846      <NA> 119
4      CREBBP            <NA>         <NA>      <NA>  27

> pretty_colollipop_plot_result$plot

> library(GAMBLR.open)

> suppressMessages(suppressWarnings({
+     metadata <- GAMBLR.open::get_gambl_metadata() %>% filter(seq_type == 
+         "genome", cohort %in% c("BL_Pediatric", "BL_Adult"), 
+         )
+     maf_df <- GAMBLR.open::get_all_coding_ssm(these_samples_metadata = metadata)
+     lollipop_result <- pretty_lollipop_plot(maf_df, these_samples_metadata = metadata, 
+         gene = "DDX3X", point_size_range = c(5, 15), point_alpha = 0.8, 
+         label_threshold = 3)
+     lollipop_result$plot
+ }))

> suppressMessages(library(GAMBLR.open))

> cat("running examples for pretty_MAF_summary\n")
running examples for pretty_MAF_summary

> FL_meta <- GAMBLR.open::get_gambl_metadata() %>% dplyr::filter(pathology == 
+     "FL") %>% check_and_clean_metadata(., duplicate_action = "keep_first")

> FL_coding <- GAMBLR.open::get_coding_ssm(these_samples_metadata = FL_meta)

> pretty_MAF_summary(FL_coding)

> pretty_MAF_summary(FL_coding, top_n = 22, base_size = 6)

> cat("running examples from pretty_mutual_exclusivity\n")
running examples from pretty_mutual_exclusivity

> suppressMessages(library(GAMBLR.open))

> suppressMessages(library(ComplexHeatmap))

> bl_fl_dlbcl_meta = get_gambl_metadata() %>% dplyr::filter(pathology %in% 
+     c("DLBCL", "FL", "BL"), seq_type != "mrna") %>% check_and_clean_metadata(., 
+     duplicate_action = "keep_first")

> dlbcl_meta = dplyr::filter(bl_fl_dlbcl_meta, pathology == 
+     "DLBCL") %>% check_and_clean_metadata(., duplicate_action = "keep_first")

> all_coding <- get_all_coding_ssm(bl_fl_dlbcl_meta)

> fl_bl_dlbcl_genes = dplyr::filter(GAMBLR.data::lymphoma_genes, 
+     FL_Tier == 1 | BL_Tier == 1 | DLBCL_Tier == 1) %>% pull(Gene)

> suppressWarnings(suppressMessages({
+     outs = pretty_mutual_exclusivity(maf_data = all_coding, genes = fl_bl_dlbcl_genes, 
+         these = bl_fl_dlbcl_meta, engine = "ComplexHeatmap", 
+         font_size = 5, use_alpha = TRUE, clustering_distance = "binary", 
+         include_hotspots = FALSE, return_data = TRUE)
+     draw(outs$plot)
+ }))

> suppressWarnings(suppressMessages({
+     pretty_mutual_exclusivity(mut_mat = outs$mut_mat, corr_mat = outs$corr_mat, 
+         p_mat = outs$p_mat, maf_data = all_coding, genes = fl_bl_dlbcl_genes, 
+         these = bl_fl_dlbcl_meta, engine = "ComplexHeatmap", 
+         font_size = 5, use_alpha = TRUE, size_factor = 0.004, 
+         clustering_distance = "euclidean", include_hotspots = FALSE)
+ }))

> suppressWarnings(suppressMessages({
+     pretty_mutual_exclusivity(p_mat = outs$p_mat, maf_data = all_coding, 
+         genes = fl_bl_dlbcl_genes, these = dlbcl_meta, engine = "ComplexHeatmap", 
+         font_size = 5, use_alpha = TRUE, size_factor = 0.004, 
+         clustering_distance = "euclidean", legend_direction = "vertical", 
+         include_hotspots = FALSE)
+ }))

> cat("Running example for function: prettyChromoplot\n")
Running example for function: prettyChromoplot

> suppressMessages(library(GAMBLR.open))

> gistic_scores = system.file("extdata", "scores.gistic", 
+     package = "GAMBLR.viz")

> suppressMessages(suppressWarnings({
+     prettyChromoplot(scores_path = gistic_scores, default_gene_set = "FL", 
+         genome_build = "grch37")
+ }))

> genes = c("MYC", "FCGR2B", "TNFRSF14", "FAS", "PTEN", 
+     "B2M", "RB1", "TCL1A", "CD70", "TOX", "PRAME", "CD38", "BCL2", 
+     "KLHL14", "TCF4", "REL", "BCL6", "SMARCA4", "CDKN2A", "RHOA", 
+     "HIST1H1C", "TNFAIP3", "TP53", "CDK14", "RELN", "ETS1", "MDM1", 
+     "MIR17HG", "CD58", "HNRNPD")

> gene_bed = dplyr::select(GAMBLR.data::grch37_gene_coordinates, 
+     -1) %>% dplyr::filter(hugo_symbol %in% genes) %>% dplyr::mutate(length = end - 
+     start, mid = start + length/2) %>% dplyr::mutate(start = mid, 
+     end = start + 1) %>% unique() %>% GAMBLR.utils::create_bed_data(genome_build = "grch37")

> suppressMessages(suppressWarnings({
+     prettyChromoplot(scores_path = gistic_scores, labels_bed = gene_bed)
+ }))

> cat("Running example for function: prettyCoOncoplot\n")
Running example for function: prettyCoOncoplot

> library(GAMBLR.open)

> meta <- get_gambl_metadata()

> meta <- meta %>% dplyr::filter(study == "FL_Dreval", 
+     pathology %in% c("DLBCL", "FL"))

> ssm <- get_coding_ssm(these_samples_metadata = meta)

> prettyCoOncoplot(maf = ssm, metadata = meta, comparison_column = "pathology", 
+     genes = dplyr::filter(lymphoma_genes, FL_Tier == 1 | DLBCL_Tier == 
+         1) %>% dplyr::pull(Gene), metadataColumns = c("pathology", 
+         "lymphgen", "pairing_status"), metadataBarHeight = 10, 
+     fontSizeGene = 12, metadataBarFontsize = 10, legend_row = 2, 
+     label1 = "DLBCL", label2 = "FL", simplify_annotation = TRUE, 
+     minMutationPercent = 5)

> cat("Running example for function: prettyForestPlot\n")
Running example for function: prettyForestPlot

> library(GAMBLR.open)

> suppressWarnings(suppressMessages({
+     metadata = get_gambl_metadata()
+     this_meta = dplyr::filter(metadata, pairing_status == "matched")
+     this_meta = dplyr::filter(this_meta, pathology %in% c("FL", 
+         "DLBCL")) %>% check_and_clean_metadata(., duplicate_action = "keep_first")
+     maf = get_coding_ssm(these_samples_metadata = this_meta)
+     plots = prettyForestPlot(maf = maf, metadata = this_meta, 
+         genes = c("ATP6V1B2", "EZH2", "TNFRSF14", "RRAGC"), comparison_column = "pathology", 
+         comparison_values = c("DLBCL", "FL"), separate_hotspots = FALSE, 
+         comparison_name = "FL vs DLBCL")
+     plots$arranged
+ }))

> cat("Running example for function: prettyGeneCloud\n")
Running example for function: prettyGeneCloud

> maf = GAMBLR.data::sample_data$grch37$maf

> prettyGeneCloud(maf_df = maf, wordcloud_version = 2, 
+     zoomout = 0.3)

> cat("Running example for function: prettyMutationDensity\n")
Running example for function: prettyMutationDensity

> library(GAMBLR.open)

> my_meta <- get_gambl_metadata() %>% dplyr::filter(pathology %in% 
+     c("FL", "DLBCL"), seq_type != "mrna") %>% check_and_clean_metadata(duplicate_action = "keep_first")

> my_regions = create_bed_data(GAMBLR.data::grch37_ashm_regions, 
+     fix_names = "concat", concat_cols = c("gene", "region"), 
+     sep = "-")

> meta_columns <- c("pathology", "lymphgen", "COO_consensus", 
+     "DHITsig_consensus")

> suppressMessages(suppressWarnings({
+     prettyMutationDensity(regions_bed = my_regions, these_samples_metadata = my_meta, 
+         metadataColumns = meta_columns, orientation = "sample_columns", 
+         sortByMetadataColumns = meta_columns, projection = "grch37", 
+         backgroundColour = "transparent", show_legend = FALSE, 
+         region_fontsize = 3)
+ }))

> cat("running examples for prettyOncoplot\n")
running examples for prettyOncoplot

> suppressMessages(suppressWarnings({
+     library(grid)
+     library(dplyr)
+     library(GAMBLR.open)
+     maf_metadata <- GAMBLR.open::get_gambl_metadata(seq_type_filter = "genome") %>% 
+         dplyr::filter(pathology %in% c("FL", "DLBCL"), study == 
+             "FL_Dreval")
+     maf_data <- get_coding_ssm(these_samples_metadata = maf_metadata)
+ }))

> fl_genes <- GAMBLR.data::lymphoma_genes %>% dplyr::filter(FL_Tier == 
+     1) %>% pull(Gene)

> dlbcl_genes <- GAMBLR.data::lymphoma_genes %>% dplyr::filter(DLBCL_Tier == 
+     1, !Gene %in% fl_genes) %>% pull(Gene)

> genes <- c(fl_genes, dlbcl_genes)

> split_genes <- c(rep("FL", length(fl_genes)), rep("DLBCL", 
+     length(dlbcl_genes)))

> names(split_genes) <- genes

> suppressMessages(suppressWarnings({
+     prettyOncoplot(maf_df = maf_data, genes = genes, these_samples_metadata = maf_metadata, 
+         splitGeneGroups = split_genes, minMutationPercent = 5)
+ }))

> suppressMessages(suppressWarnings({
+     prettyOncoplot(maf_df = maf_data, genes = genes, these_samples_metadata = maf_metadata, 
+         splitGeneGroups = split_genes, minMutationPercent = 5, 
+         simplify_annotation = TRUE)
+ }))

> gene_regions <- data.frame(gene_id = c("REL", "CDKN2A", 
+     "MIR17HG", "TP53", "ATM", "FAS", "SMARCA4", "B2M", "TNFRSF14", 
+     "TMEM30A", "TNFAIP3", "BCL2"), cn_thresh = c(4, 1, 4, 1, 
+     1, 1, 1, 1, 1, 1, 1, 3))

> print(gene_regions)
    gene_id cn_thresh
1       REL         4
2    CDKN2A         1
3   MIR17HG         4
4      TP53         1
5       ATM         1
6       FAS         1
7   SMARCA4         1
8       B2M         1
9  TNFRSF14         1
10  TMEM30A         1
11  TNFAIP3         1
12     BCL2         3

> suppressMessages(suppressWarnings({
+     gene_cnv <- GAMBLR.results::get_cnv_and_ssm_status(only_cnv = "all", 
+         these_samples_metadata = get_gambl_metadata(), genes_and_cn_threshs = gene_regions)
+     prettyOncoplot(maf_df = maf_data, genes = c("CREBBP", "EZH2", 
+         "MYD88", "TCF3", "BCL2", "BCL7A", "MEF2B", "POU2F2", 
+         "POU2AF1", "ID3", "MYC", "RRAGC", "TCL1A", "KMT2D", "PIM1", 
+         "CD79B", "TMSB4X", "TMEM30A", "TNFAIP3"), these_samples_metadata = maf_metadata, 
+         cluster_rows = TRUE, metadataColumns = c("pathology", 
+             "lymphgen", "seq_type", "ffpe_or_frozen"), cluster_cols = FALSE, 
+         simplify_annotation = TRUE, cnv_df = gene_cnv, sortByColumns = c("pathology", 
+             "lymphgen"))
+ }))

> cat("running examples for prettyRainfallPlot\n")
running examples for prettyRainfallPlot

> suppressMessages(library(GAMBLR.open))

> maf = GAMBLR.data::sample_data$grch37$maf

> prettyRainfallPlot(this_sample_id = "14-35026", this_maf = maf, 
+     label_sv = FALSE, chromosome = "3")

> cat("Running example for function: prettyStackedOncoplot\n")
Running example for function: prettyStackedOncoplot

> suppressMessages(suppressWarnings({
+     library(GAMBLR.open)
+     dlbcl_genome_meta = get_gambl_metadata() %>% dplyr::filter(pathology == 
+         "DLBCL", seq_type == "genome") %>% check_and_clean_metadata(., 
+         duplicate_action = "keep_first")
+     dlbcl_seg = get_cn_segments(dlbcl_genome_meta)
+     cn_mat = segmented_data_to_cn_matrix(dlbcl_seg, these = dlbcl_genome_meta, 
+         adjust_for_ploidy = TRUE)
+     dlbcl_maf = get_all_coding_ssm(dlbcl_genome_meta)
+ }))

> genes = c("KMT2D", "BCL2", "CREBBP", "EZH2", "MYD88", 
+     "CD79B", "TP53", "PIM1", "CARD11", "SGK1", "SOCS1", "TET2", 
+     "SPEN", "ETV6", "CD83", "B2M", "S1PR2", "GNA13", "BTG1", 
+     "BTG2", "DDX3X", "KLHL6", "HIST1H1E", "TBL1XR1", "SMARCA4")

> sortGenes = c("TP53", "KMT2D", "BCL2", "EZH2", "MYD88", 
+     "CD79B")

> CN_thresh = c(REL = 4, CDKN2A = 1, MIR17HG = 4, TP53 = 1, 
+     TNFRSF14 = 1, TNFAIP3 = 1)

> suppressMessages(suppressWarnings({
+     prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta, 
+         maf_data = dlbcl_maf, metadataColumns = c("pathology", 
+             "lymphgen"), sortByMetadataColumns = c("pathology", 
+             "lymphgen"), cn_state_matrix = cn_mat, genes_CN_thresh = CN_thresh, 
+         genes = genes, sortByGenes = sortGenes)
+ }))

> suppressMessages(suppressWarnings({
+     prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta, 
+         maf_data = dlbcl_maf, metadataColumns = c("pathology", 
+             "lymphgen"), cluster_samples = TRUE, cn_state_matrix = cn_mat, 
+         genes_CN_thresh = CN_thresh, genes = genes)
+ }))

> CN_args = list(keep_these_chromosomes = c("2"), scale_by_sample = TRUE)

> suppressMessages(suppressWarnings({
+     prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta, 
+         maf_data = dlbcl_maf, sortByGenes = "REL", metadataColumns = c("pathology", 
+             "lymphgen"), oncoplot_location = "bottom", secondPlotArgs = CN_args, 
+         cn_state_matrix = cn_mat, genes_CN_thresh = CN_thresh, 
+         genes = genes, oncoplotHeight = 8, secondPlotHeight = 3)
+ }))

> CN_args = list(scale_by_sample = TRUE, hide_these_chromosomes = "X")

> suppressMessages(suppressWarnings({
+     prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta, 
+         maf_data = dlbcl_maf, sortByGenes = "TP53", metadataColumns = c("pathology", 
+             "lymphgen"), oncoplot_location = "bottom", secondPlotArgs = CN_args, 
+         cn_state_matrix = cn_mat, genes_CN_thresh = CN_thresh, 
+         genes = genes, secondPlotHeight = 9)
+ }))

> some_regions = create_bed_data(GAMBLR.data::grch37_ashm_regions, 
+     fix_names = "concat", concat_cols = c("gene", "region"), 
+     sep = "-")

> suppressMessages(suppressWarnings({
+     simple_ashm_mat <- get_ashm_count_matrix(some_regions, these_samples_metadata = dlbcl_genome_meta)
+     prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta, 
+         maf_data = dlbcl_maf, regions_bed = some_regions, metadataColumns = c("pathology", 
+             "lymphgen"), oncoplot_location = "bottom", ashm_matrix = simple_ashm_mat, 
+         secondPlotType = "prettyMutationDensity", secondPlotArgs = list(merge_genes = TRUE, 
+             region_fontsize = 3), genes = genes, cluster_samples = TRUE, 
+         secondPlotHeight = 9)
+ }))
[1] "=== COMPLETED AT 2025-09-02 16:13:52 ==="

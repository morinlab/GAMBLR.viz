{"title":"Tutorial: Exploring data quality","markdown":{"yaml":{"title":"Tutorial: Exploring data quality","warning":false,"message":false,"fig.width":10,"fig.height":8,"fig.align":"center"},"headingText":"Prepare setup","containsRefs":false,"markdown":"\n\nWhen comparing the mutation data from different sources, it is important to\nconsider different underlying biases that may lead to unexpected results or\nincorrect conclusions. Different centers and groups may have different\nacceptable standards to library preparation, sequencing, data quality control,\nvariant calling and analysis. More discussion on this can be found in the\n[Dreval et al](https://doi.org/10.1182/blood.2022016095) Blood spotlight\npublished in 2022.\n<br>\nCan we use GAMBLR.viz to conduct similar investigation and take advantage of\nthe bundled data and the visualizations available with this package?\n<br>\nThis tutorial will demonstate the example of the inputs and showcase the main\nfeatures of such analysis, replicating some panels and figures from that study.\n\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(ggbeeswarm)\nlibrary(ggExtra)\nlibrary(tidyverse)\nlibrary(GAMBLR.open)\n\n```\n\nNext, we will get some data to display. We have explored before how to obrain\ndata bundled with\n[GAMBLR.data](https://morinlab.github.io/GAMBLR.data/tutorials/getting_started.html)\nand the difference between the\n[available objects](https://morinlab.github.io/GAMBLR.data/resources/bundled_data.html),\nso here we will use the demonstrated approaches to retreive metadata and simple\nsomatic mutations.\nFor demonstration purposes, we will focus on the largest [whole exome sequencing\nstudies](https://morinlab.github.io/GAMBLR.data/faq.html#what-are-the-studies-bundled-with-the-package).\n\n```{r get_data}\n# Get metadata\nmetadata <- gambl_metadata %>%\n    filter(\n        cohort %in% c(\"dlbcl_chapuy\", \"dlbcl_reddy\", \"dlbcl_schmitz\")\n    )\n\n# Get mutations\nmaf <- get_coding_ssm(\n    these_samples_metadata = metadata,\n    this_seq_type = \"capture\"\n)\n```\n\nNext, we can take advantage of the `collate_results()` function in GAMBLR.data\nto add all the necessary QC metrics that were directly reported in the [MIRAGE\nmanuscript.](https://doi.org/10.1182/blood.2022016095)\n\n```{r collate}\nmetadata <- collate_results(\n    sample_table = metadata\n) %>%\nleft_join(metadata, ., by = \"sample_id\")\n\n```\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart exploring and visualizing the data.\n\n## Target space coverage across the studies\n\nThe original manuscript highlights a striking difference in the effective\nnonredundant coverage across the target space (MeanCorrectedCoverage). Let's see\nhow that plot was generated:\n```{r cov}\nmetadata %>%\n    ggplot(\n        aes(\n            x = study,\n            y = MeanCorrectedCoverage,\n            colour = ffpe_or_frozen\n        )\n    ) +\n    geom_boxplot(outlier.shape = NA) +\n    geom_quasirandom(\n        dodge.width = 0.8,\n        alpha = 0.5\n    ) +\n    coord_flip() +\n    facet_wrap(\n        ~seq_type,\n        ncol = 1,\n        scales = \"free\"\n    ) +\n    scale_colour_manual(values = get_gambl_colours()) +\n    theme_Morons(\n        my_legend_position = \"right\",\n        my_legend_direction = \"vertical\"\n    )\n```\n\nIndeed, the coverage in one of the studies is very different from the rest. This\nplot, also shown on panel B of Figure 1 in the manuscript, also shows that there\nare only 5/999 samples in the study by Reddy et al that have coverage figher\nthe sample with the lowest coverage in the study from Schmitz et al!\nSeeing this, the logical question arises: does this difference in the sample\nquality affects the ability to detect coding mutations in lymphoma genes?\n\n## Correlation between coverage and mutation discovery\n\nNext, we can see whether there is any limitation to detect somatic mutations in\nthe relevant genes when the sample is of a very poor quality. Indeed, the plot\nbelow replicates the panel C of Figure 1 in the manuscript and shows that there\nis direct effect:\n```{r}\n# reformat naming of the standard colors\ncols <- get_gambl_colours()[c(\"Schmitz\", \"Chapuy\", \"Reddy\")]\nnames(cols) <- c(\"Schmitz, 2018\", \"Chapuy, 2018\", \"Reddy, 2017\")\n\n# plot\np <- metadata %>%\n    ggplot(\n        aes(\n            x = MeanCorrectedCoverage,\n            y = coding_mutations,\n            colour = study\n        )\n    ) +\n    geom_point(alpha = 0.5) +\n    scale_color_manual(values = cols) +\n    ylim(c(0, 1000)) +\n    xlim(c(0, 200)) +\n    theme_Morons(\n        base_size = 8,\n        my_legend_position = \"bottom\",\n        my_legend_direction = \"horizontal\"\n    )\n\n# display density\nggMarginal(\n    p,\n    type = \"density\",\n    groupColour = TRUE,\n    groupFill = TRUE\n)\n\n```\n\n## Find significant differences between low and high coverage groups\n\nNext, we can explore whether or not there are any significant differences in the\nfrequency of mutations as detected in those of high and low coverage. As a\ncutoff, we arbitrarily selected a value of 25X for the sample to be considered\nin of the \"High\" or \"Low\" groups. We will here reformat the metadata to a more\nconvenient format:\n\n```{r format_meta}\nmirage_meta <- metadata %>%\n    mutate(\n        good_coverage = ifelse(MeanCorrectedCoverage > 25 , \"TRUE\", \"FALSE\")\n    ) %>%\n    as.data.frame %>%\n    mutate(\n        sample_id = Tumor_Sample_Barcode,\n        `DNA source` = ifelse(\n            ffpe_or_frozen == \"ffpe\",\n            toupper(ffpe_or_frozen),\n            ffpe_or_frozen\n        ),\n        Pathology = pathology,\n        Study = study,\n        `Pairing status` = pairing_status,\n        Protocol = seq_type\n    )\n```\n\n\nFor the demonstation purposes, let's focus only on a set of genes reported as\nsignificantly mutated in the Reddy et al study. To find out these genes, we do\nnot need search Pubmed for the gene lists, but can convently retreive from one\nof the [GAMBLR.data objects](https://morinlab.github.io/GAMBLR.data/resources/bundled_data.html):\n\n```{r reddy_list}\ngenes <- GAMBLR.data::reddy_genes %>%\n    pull(hgnc_symbol)\n```\n\nWe now can take a look at what genes are significantly different between high\nand low coverage groups:\n```{r fdr_plot}\n#| fig-height: 10\n#| fig-width: 10\nforest <- prettyForestPlot(\n    maf = maf,\n    genes = genes,\n    metadata = mirage_meta,\n    comparison_column = \"good_coverage\",\n    max_q = 0.1\n)\nforest$arranged\n```\n\nThat's a lot of difference! We can easily display this information in the form\nof oncoplot:\n\n```{r coonco}\n#| fig-keep: last\n#| fig-height: 12\n#| fig-width: 15\n\n# display genes in the order of decreasing difference\ngene_order <- forest$fisher %>%\n    arrange(desc(estimate)) %>%\n    pull(gene)\n\n\nprettyCoOncoplot(\n    metadata = mirage_meta,\n    maf = maf,\n    comparison_column = \"good_coverage\",\n    label1 = paste0(\n        \"High coverage (>25X, N=\",\n        nrow(mirage_meta %>% filter(good_coverage == \"TRUE\")),\n        \")\"\n    ),\n    label2 = paste0(\n        \"Low coverage (<25X, N=\",\n        nrow(mirage_meta %>% filter(good_coverage == \"FALSE\")),\n        \")\"\n    ),\n    metadataColumns = c(\n        \"Pairing status\",\n        \"DNA source\",\n        \"Protocol\",\n        \"Study\",\n        \"MeanCorrectedCoverage\"\n    ),\n    numericMetadataColumns = \"MeanCorrectedCoverage\",\n    sortByColumns = \"MeanCorrectedCoverage\",\n    metadataBarHeight = 5,\n    metadataBarFontsize = 10,\n    fontSizeGene = 12,\n    legendFontSize = 7,\n    genes = gene_order,\n    keepGeneOrder = TRUE,\n    arrange_descending = TRUE,\n    legend_row = 2,\n    annotation_row = 2\n)\n```\n\n```{r cleaup_om}\n#| echo: false\nunlink(\"onco_matrix.txt\")\n```\n","srcMarkdownNoYaml":"\n\nWhen comparing the mutation data from different sources, it is important to\nconsider different underlying biases that may lead to unexpected results or\nincorrect conclusions. Different centers and groups may have different\nacceptable standards to library preparation, sequencing, data quality control,\nvariant calling and analysis. More discussion on this can be found in the\n[Dreval et al](https://doi.org/10.1182/blood.2022016095) Blood spotlight\npublished in 2022.\n<br>\nCan we use GAMBLR.viz to conduct similar investigation and take advantage of\nthe bundled data and the visualizations available with this package?\n<br>\nThis tutorial will demonstate the example of the inputs and showcase the main\nfeatures of such analysis, replicating some panels and figures from that study.\n\n## Prepare setup\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(ggbeeswarm)\nlibrary(ggExtra)\nlibrary(tidyverse)\nlibrary(GAMBLR.open)\n\n```\n\nNext, we will get some data to display. We have explored before how to obrain\ndata bundled with\n[GAMBLR.data](https://morinlab.github.io/GAMBLR.data/tutorials/getting_started.html)\nand the difference between the\n[available objects](https://morinlab.github.io/GAMBLR.data/resources/bundled_data.html),\nso here we will use the demonstrated approaches to retreive metadata and simple\nsomatic mutations.\nFor demonstration purposes, we will focus on the largest [whole exome sequencing\nstudies](https://morinlab.github.io/GAMBLR.data/faq.html#what-are-the-studies-bundled-with-the-package).\n\n```{r get_data}\n# Get metadata\nmetadata <- gambl_metadata %>%\n    filter(\n        cohort %in% c(\"dlbcl_chapuy\", \"dlbcl_reddy\", \"dlbcl_schmitz\")\n    )\n\n# Get mutations\nmaf <- get_coding_ssm(\n    these_samples_metadata = metadata,\n    this_seq_type = \"capture\"\n)\n```\n\nNext, we can take advantage of the `collate_results()` function in GAMBLR.data\nto add all the necessary QC metrics that were directly reported in the [MIRAGE\nmanuscript.](https://doi.org/10.1182/blood.2022016095)\n\n```{r collate}\nmetadata <- collate_results(\n    sample_table = metadata\n) %>%\nleft_join(metadata, ., by = \"sample_id\")\n\n```\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart exploring and visualizing the data.\n\n## Target space coverage across the studies\n\nThe original manuscript highlights a striking difference in the effective\nnonredundant coverage across the target space (MeanCorrectedCoverage). Let's see\nhow that plot was generated:\n```{r cov}\nmetadata %>%\n    ggplot(\n        aes(\n            x = study,\n            y = MeanCorrectedCoverage,\n            colour = ffpe_or_frozen\n        )\n    ) +\n    geom_boxplot(outlier.shape = NA) +\n    geom_quasirandom(\n        dodge.width = 0.8,\n        alpha = 0.5\n    ) +\n    coord_flip() +\n    facet_wrap(\n        ~seq_type,\n        ncol = 1,\n        scales = \"free\"\n    ) +\n    scale_colour_manual(values = get_gambl_colours()) +\n    theme_Morons(\n        my_legend_position = \"right\",\n        my_legend_direction = \"vertical\"\n    )\n```\n\nIndeed, the coverage in one of the studies is very different from the rest. This\nplot, also shown on panel B of Figure 1 in the manuscript, also shows that there\nare only 5/999 samples in the study by Reddy et al that have coverage figher\nthe sample with the lowest coverage in the study from Schmitz et al!\nSeeing this, the logical question arises: does this difference in the sample\nquality affects the ability to detect coding mutations in lymphoma genes?\n\n## Correlation between coverage and mutation discovery\n\nNext, we can see whether there is any limitation to detect somatic mutations in\nthe relevant genes when the sample is of a very poor quality. Indeed, the plot\nbelow replicates the panel C of Figure 1 in the manuscript and shows that there\nis direct effect:\n```{r}\n# reformat naming of the standard colors\ncols <- get_gambl_colours()[c(\"Schmitz\", \"Chapuy\", \"Reddy\")]\nnames(cols) <- c(\"Schmitz, 2018\", \"Chapuy, 2018\", \"Reddy, 2017\")\n\n# plot\np <- metadata %>%\n    ggplot(\n        aes(\n            x = MeanCorrectedCoverage,\n            y = coding_mutations,\n            colour = study\n        )\n    ) +\n    geom_point(alpha = 0.5) +\n    scale_color_manual(values = cols) +\n    ylim(c(0, 1000)) +\n    xlim(c(0, 200)) +\n    theme_Morons(\n        base_size = 8,\n        my_legend_position = \"bottom\",\n        my_legend_direction = \"horizontal\"\n    )\n\n# display density\nggMarginal(\n    p,\n    type = \"density\",\n    groupColour = TRUE,\n    groupFill = TRUE\n)\n\n```\n\n## Find significant differences between low and high coverage groups\n\nNext, we can explore whether or not there are any significant differences in the\nfrequency of mutations as detected in those of high and low coverage. As a\ncutoff, we arbitrarily selected a value of 25X for the sample to be considered\nin of the \"High\" or \"Low\" groups. We will here reformat the metadata to a more\nconvenient format:\n\n```{r format_meta}\nmirage_meta <- metadata %>%\n    mutate(\n        good_coverage = ifelse(MeanCorrectedCoverage > 25 , \"TRUE\", \"FALSE\")\n    ) %>%\n    as.data.frame %>%\n    mutate(\n        sample_id = Tumor_Sample_Barcode,\n        `DNA source` = ifelse(\n            ffpe_or_frozen == \"ffpe\",\n            toupper(ffpe_or_frozen),\n            ffpe_or_frozen\n        ),\n        Pathology = pathology,\n        Study = study,\n        `Pairing status` = pairing_status,\n        Protocol = seq_type\n    )\n```\n\n\nFor the demonstation purposes, let's focus only on a set of genes reported as\nsignificantly mutated in the Reddy et al study. To find out these genes, we do\nnot need search Pubmed for the gene lists, but can convently retreive from one\nof the [GAMBLR.data objects](https://morinlab.github.io/GAMBLR.data/resources/bundled_data.html):\n\n```{r reddy_list}\ngenes <- GAMBLR.data::reddy_genes %>%\n    pull(hgnc_symbol)\n```\n\nWe now can take a look at what genes are significantly different between high\nand low coverage groups:\n```{r fdr_plot}\n#| fig-height: 10\n#| fig-width: 10\nforest <- prettyForestPlot(\n    maf = maf,\n    genes = genes,\n    metadata = mirage_meta,\n    comparison_column = \"good_coverage\",\n    max_q = 0.1\n)\nforest$arranged\n```\n\nThat's a lot of difference! We can easily display this information in the form\nof oncoplot:\n\n```{r coonco}\n#| fig-keep: last\n#| fig-height: 12\n#| fig-width: 15\n\n# display genes in the order of decreasing difference\ngene_order <- forest$fisher %>%\n    arrange(desc(estimate)) %>%\n    pull(gene)\n\n\nprettyCoOncoplot(\n    metadata = mirage_meta,\n    maf = maf,\n    comparison_column = \"good_coverage\",\n    label1 = paste0(\n        \"High coverage (>25X, N=\",\n        nrow(mirage_meta %>% filter(good_coverage == \"TRUE\")),\n        \")\"\n    ),\n    label2 = paste0(\n        \"Low coverage (<25X, N=\",\n        nrow(mirage_meta %>% filter(good_coverage == \"FALSE\")),\n        \")\"\n    ),\n    metadataColumns = c(\n        \"Pairing status\",\n        \"DNA source\",\n        \"Protocol\",\n        \"Study\",\n        \"MeanCorrectedCoverage\"\n    ),\n    numericMetadataColumns = \"MeanCorrectedCoverage\",\n    sortByColumns = \"MeanCorrectedCoverage\",\n    metadataBarHeight = 5,\n    metadataBarFontsize = 10,\n    fontSizeGene = 12,\n    legendFontSize = 7,\n    genes = gene_order,\n    keepGeneOrder = TRUE,\n    arrange_descending = TRUE,\n    legend_row = 2,\n    annotation_row = 2\n)\n```\n\n```{r cleaup_om}\n#| echo: false\nunlink(\"onco_matrix.txt\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"ayu","toc":true,"css":["styles.css"],"output-file":"data_q.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","code-annotations":"hover","theme":{"light":["flatly","../theme-light.scss"],"dark":["darkly","../theme-dark.scss"]},"title":"Tutorial: Exploring data quality","message":false,"fig.width":10,"fig.height":8,"fig.align":"center"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
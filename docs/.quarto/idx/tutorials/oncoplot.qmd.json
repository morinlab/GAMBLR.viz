{"title":"Tutorial: The prettiest oncoplot","markdown":{"yaml":{"title":"Tutorial: The prettiest oncoplot","warning":false,"message":false,"fig.width":7,"fig.height":5,"fig.align":"center"},"headingText":"Prepare setup","containsRefs":false,"markdown":"\n\nOne of the main features and integral parts of this package is the display of\ncoding mutations across a set of genes in a given cohort. Because it outperforms\nother tools and generates display items with a lot of supported features and\nflexibility, it is called `prettyOncoplot` and it belongs to the `pretty` family\nof GAMBLR.viz functions.\nThis tutorial will demonstate how to prepare inputs for it (spoiler alert: no\nspecific formatting is necessary) and what is the format of metadata expected by\n`prettyOncoplot` (spoiler alert: just Tumor_Sample_Barcode column and column for\nany annotation you want to display).\n\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(GAMBLR.open)\nlibrary(dplyr)\n```\n\nNext, we will get some data to display. The metadata is expected to be a data\nframe with one required column: `Tumor_Sample_Barcode` and any other optional\ncolumn that you want to display as annotation track. In this example, we will\nuse as example the data set and variant calls from the\n[study](https://doi.org/10.1182/blood.2022018719) that identified\ngenetic subgroup of Follicular lymphoma (FL) associated with histologic\ntransformation to DLBCL.\n\n```{r get_metadata}\nmetadata <- get_gambl_metadata() %>%\n    filter(cohort == \"FL_Dreval\")\n```\n\nNext, we will obtain the coding mutations that will be used in the plotting.\nThe data is a data frame in a standartized maf format.\n\n```{r get_maf}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata,\n    tool_name = \"publication\"\n)\n\n# How does it look like?\ndim(maf)\n\nhead(maf) %>%\n    select(\n        Tumor_Sample_Barcode,\n        Hugo_Symbol,\n        Variant_Classification\n    )\n```\n\n::: {.callout-tip}\n## Did you know?\nYou do not have to subset your maf data frame to coding mutations only before\nusing it with the `prettyOncoplot`. Much like other tools, it will be\nautomatically handled for you to only display coding mutations.\n:::\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart visualizing the data.\n\n## The simplest oncoplot\n\nThere is a number of options how to customize your oncoplot, but it is ready for\nyou to use with just the metadata and maf. Here is an example of the output with\nall default parameters:\n\n```{r default}\n#| fig-width: 10\nminMutationPercent <- 10 # only show genes mutated in at least 10% of samples\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent\n)\n```\n\n## Adding annotation tracks\nWe can customize this and add some of the annotation tracks for more informative\ndisplay of the metadata we ate interested in:\n```{r add_annotations}\n#| fig-width: 10\nmetadataColumns <- c(\n    \"pathology\",\n    \"lymphgen\",\n    \"genetic_subgroup\",\n    \"COO_consensus\",\n    \"sex\"\n)\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns\n)\n```\n\n## Changing font sizes\n\nYou may notice that as more (or less) genes and annotations are displayed with\nthe oncoplot we may want to modify the size of the gene names and/or the\nannotation tracks with their labels. There are several parameters available for\nyou to do so:\n- `metadataBarHeight`: will change the height of the annotation tracks at the\nbottom of the oncoplot\n- `metadataBarFontsize`: will change the font size of the annotation tracks at\nthe bottom of the oncoplot\n- `fontSizeGene`: will change the font size of both percentage labels to the\nright of the oncoplot and gene names to the left of it\n- `legendFontSize`: will change the font size of the legend at the bottom of\nthe plot\nLet's see these parameters in action:\n```{r adjust_fonts}\n#| fig-height: 8\nmetadataBarHeight <- 5\nmetadataBarFontsize <- 10\nfontSizeGene <- 12\nlegendFontSize <- 7\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize\n)\n```\n\n## Show samples ordered on annotations\n\nWe can notice that the default setting generates the classic \"rainfall\" style of\nthe plot - but what if we want to add some structure to it and sort sample order\nin some way? It is easy to do so with the parameter `sortByColumns`. We can sort\non the same annotations as we use to display with the oncoplot:\n```{r sort_samples}\n#| fig-height: 8\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns\n)\n```\n\n\n::: {.callout-tip}\n## Did you know?\nThe ordering occurs sequentially according to the order of individual columns we\nhave specified with the `sortByColumns` parameter. The ordering is in ascending\norder, and can be toggled with additional boolean parameter `arrange_descending`.\n:::\n\n\n## Displaying only specific genes\n\nThere can be scenarion where we might want to diplay genes not based on their\nrecurrence, but out of interest in specific genes. Sure so, one way to do it is\nto pre-filter your maf data to the genes of interest. But this might have some\nunexpected consequences and limit your flexibility in doing more things, so the\nbetter way is to take advantage of the `genes` parameter:\n\n```{r goi}\nfl_genes <- c(\"RRAGC\", \"CREBBP\", \"VMA21\", \"ATP6V1B2\", \"EZH2\", \"KMT2D\")\ndlbcl_genes <- c(\"MEF2B\", \"CD79B\", \"MYD88\", \"TP53\")\ngenes <- c(fl_genes, dlbcl_genes)\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes\n)\n```\n\n::: {.callout-note}\nNote that we removed the `minMutationPercent` in the last function call since we\nwanted to see the genes that we specifically requested.\n:::\n\nNow we are only looking at some specific genes of interest but they are arranged\nin the decreasing order of their recurrence in this cohort. What if we want to\nenforce the gene order on the oncoplot to be exactly the same as we specified\nit in our `gene` variable? We can take advantage of the `keepGeneOrder`\nparameter:\n```{r goi_order}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    keepGeneOrder = TRUE\n)\n```\n\n## Grouping genes into categories\n\nWe can also group genes into specific categories. To do so, we need to have a\nnamed list where name of the list element corresponds to the gene name, and\nthe list element corresponds to the gene group. We alreade have the `genes`\nvariable, so we can convert it to the appropriate format:\n\n```{r goi_named_list}\ngene_groups <- c(\n    rep(\"FL\", length(fl_genes)),\n    rep(\"DLBCL\", length(dlbcl_genes))\n)\nnames(gene_groups) <- genes\n\ngene_groups\n```\n\nNow we can use it to split the genes on the oncoplot into the groups:\n```{r goi_groups}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups\n)\n```\n\n::: {.callout-tip}\n## Did you know?\nYou can provide more than two groups of genes - any number of groups is\nsupported as long as they are specified in the `gene_groups`.\n:::\n\n::: {.callout-note}\nWithin each group, the genes are ordered in decreasing order of their recurrence,\nbut the `keepGeneOrder` parameter is still supported and if specified, will keep\nthe specified order within each group.\n:::\n\n## Grouping samples into categories\n\nSimilar to the grouping of genes, we can also group samples into certain\ncategories. Typically, it is done based on one of the annotations tracks. By\ndefault, there will be no labels for each sample category, but we also have an\noption of specifying these labels:\n\n```{r sample_groups}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\")\n)\n```\n\n## Tallying mutation burden\n\nPreviously, we noted that the maf data we were supplying to the prettyOncoplot\nwas not subset to contain only coding mutations, and also discouraged from\npre-filtering maf to a subset of genes if we are insterested only looking at\nsome of them. **Here is why this is important:** if we want to layer on\nadditional information like total mutation burden per sample, any subsetting or\nfiltering of the maf would generate inaccurate and misleading results. Therefore,\n`prettyOncoplot` handles all of this for you! So if we were to go ahead with\ntallying the total mutation burden, we could just add some additional parameters\nto the function call:\n```{r tmb}\nhideTopBarplot <- FALSE # will display TMB annotations at the top\ntally_all_mutations <- TRUE # will tally all mutations per sample\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations\n)\n```\n::: {.callout-tip}\n## Did you know?\nIf the dynamic range of total mutation burden is too big and there are some\nextreme outliers, the bar chart at the top of the oncoplot can be capped of at\nany numeric value by providing `tally_all_mutations_max` parameter.\n:::\n\nWhat if we want to additionally force the ordering based on the total number of\nmutations, so they are nicely arranged in the decreasing order? We can do so by\nadding the mutation counts as one of the annotation tracks and using it to sort\nthe samples:\n```{r tmb_order_by_meta}\n#| fig-height: 8\n\n# Count all muts to define the order of samples\ntotal_mut_burden <- maf %>%\n    count(Tumor_Sample_Barcode)\n\nhead(total_mut_burden)\n\n# Add this info to metadata\nmetadata <- left_join(\n    metadata,\n    total_mut_burden\n)\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE\n)\n```\n\n::: {.callout-note}\nWe have modified here the `sortByColumns` parameter, and provided two additional\nparameters `numericMetadataColumns` and `arrange_descending`.\n:::\n\n::: {.callout-tip}\n## Did you know?\nThe top annotation and `n` annotation at the bottom are the same thing? Remove\n`n` from the legend by adding `hide_annotations = \"n\"` and remove display of\nannotation track while keeping the ordering by adding\n`hide_annotations_tracks = TRUE`.\n:::\n\n## Annotating significance of mutation frequencies in sample groups\n\nWhen looking at our sample plots, we can notice that the frequency of mutations\nin *RRAGC*, *ATP6V1B2*, *VMA21* and others is different between FL and DLBCL.\nBut is this difference significant? Can we layer on this diffenerence to the\ndisplay panel? Yes we can, and this is very easy with GAMBLR family! To do so we\nwill first use another function from GAMBLR.viz to run Fisher's test and find\nwhich genes are significantly different between the FL and DLBCL:\n\n```{r fisher}\nfisher_test <- prettyForestPlot(\n    maf = maf,\n    metadata = metadata,\n    genes = genes,\n    comparison_column = \"pathology\",\n    comparison_values = c(\"DLBCL\", \"FL\"), # we have three pathologies in data\n    comparison_name = \"FL vs DLBCL\"\n)\nfisher_test$arranged\n```\n\nIn fact, there are genes that are mutated at significantly different\nfrequencies! Now let's layer on this information to our oncoplot:\n\n```{r oncoplot_fisher}\n#| eval: false\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test\n)\n```\n\n## Annotating genes with hotspots\n\nSome genes are mutated at certain positions more often that at others, therefore\ncreating the mutational hotspots - and it we can layer on this level of\ninformation to our oncoplot. First, we will need to process our maf data to add\na new column called `hot_spot` which will contain a boolean value showing\nwhether or not particular mutation is a hotspot. If you don't know how to do it,\nthere is a function for exactly this purpose in the\n[GAMBLR.data](https://github.com/morinlab/GAMBLR.data), and we will use it in\nthis example:\n```{r annotate_maf}\n# Annotate hotspots\nmaf <- annotate_hotspots(maf)\n\n# What are the hotspots?\nmaf %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n::: {.callout-note}\nThe GAMBLR.data version of the `annotate_hotspots` only handles very specific\ngenes and does not have functionality to annotate all hotspots.\n:::\nNow, we can add annotation of the hotspots to the oncoplot display by toggling\nthe `highlightHotspots` parameter:\n```{r oncoplot_fisher_hotspot}\n#| eval: false\nhighlightHotspots <- TRUE\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n```\n\n## Co-oncoplot: two plots side-by-side\n\nIt may also be informative to generate a display panel where there are two\noncoplots displayed side-by-side, so it is possible to visually compare the\nspecific groups of samples while maintaining all annotations and ordering we\nbuilt so far. For this purpose, the GAMBLR.viz has another function in the\n`pretty` family: `prettyCoOncoplot`. It accepts all of the same parameters as\n`prettyOncoplot` with addition of some unique additions. For example, lets\nbreak down our sample oncoplot we created so far by the `genetic_subgroup` and\nsee how cFL compares to dFL:\n\n```{r cooncoplot}\n#| fig-keep: last\n#| fig-height: 8\n#| fig-width: 15\n#| eval: false\nprettyCoOncoplot(\n    metadata = metadata,\n    maf = maf,\n    comparison_column = \"genetic_subgroup\",\n    label1 = \"cFL\",\n    label2 = \"dFL\",\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    keepGeneOrder = TRUE,\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots,\n    legend_row = 2,\n    annotation_row = 2\n)\n```\n\n::: {.callout-note}\nIt is only possible to display two groups side-by-side. If the metadata column\nyou want to split on contains more groups, the specific values can be specified\nwith `comparison_values` parameter.\n:::\n\n::: {.callout-tip}\n## Did you know?\nNotice that we did not need to create individual maf or metadata objects to\nsupply to `prettyCoOncoplot` - the same objects we used before are also\nsupported here, but specified with differen parameters `metadata` and `maf`.\n:::\n\nIn the above example, we forced the order of genes to be exaclty as we specified\nso that the same gene is is displayed on the same row for both oncoplots,\nothervise they wold not be on the same row due to the different frequencies in\neach group.\nIn addition to specifying this parameter, we have also enforced specific number\nof rows in the legend below the plot, so they nicely align between the display\nitems.\n\n## Using oncoplot in multi-panel figure\n\nWhen arranging items for the multi-panel figure when preparing manuscript or\nexperiment report, it may be needed to use the generated oncoplot on the same\npage as other display items. The `prettyOncoplot` (and, therefore,\n`prettyCoOncoplot`), handles the ComplexHeatmap under the hood to generate\ngraphics, and it is not readily available to be combined with the plots\ngenerated with other tools, for example `ggplot2`. Not readily available - but\ndefinitely not impossible!\nThe output of `prettyCoOncoplot` is directly compatible with the arrangement on\nmulti-panel figure since it uses the trick shown below under the hood to put\ntwo panels side-by-side, but the otuput of `prettyOncoplot` is a ComplexHeatmap\nobject so needs some extra steps to allow multi-panel arrangement.\nFirst, lets store the returned oncoplot in a variable:\n\n```{r store_oncoplot}\n#| output: false\n#| eval: false\nmy_oncoplot <- prettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n```\n\nNext, we will import some of the packages needed to handle the trick:\n```{r load_extra}\nlibrary(ComplexHeatmap) # to handle the ComplexHeatmap object\nlibrary(ggpubr) # to arrange multiple panels\n```\n\nAfter that, we will capture the display of the oncoplot:\n```{r capture_oncoplot}\n#| eval: false\nmy_oncoplot = grid.grabExpr(\n    draw(my_oncoplot),\n    width = 10,\n    height = 17\n)\n```\n\nNow, it is ready for us to arrange in multi-panel figure. We can use the forest\nplot we already looked at as an example, and put it to the right of the\noncoplot:\n```{r multi_panel}\n#| fig-height: 8\n#| fig-width: 13\n#| eval: false\nmultipanel_figure <- ggarrange(\n    my_oncoplot, # left panel\n    fisher_test$arranged, # right panel\n    widths = c(1.5, 1), # so the oncoplot is a little wider than the forest\n    labels = c(\"A\", \"B\"), # labels for the panels\n    font.label = list( # make labels bold face\n        color = \"black\",\n        face = \"bold\"\n    )\n)\n\nmultipanel_figure\n```\n\nFinal note: it would be nice to have the genes in the forest plot directly\naligned with the genes as they are displayed on the oncoplot, and we can do this\nby providing consistent ordering and adding some white space below forest plot\nto match the height of the oncoplot:\n```{r final_plot}\n#| fig-keep: last\n#| fig-height: 8\n#| fig-width: 13\n#| eval: false\nmy_oncoplot <- prettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = rev(fisher_test$fisher$gene),\n    keepGeneOrder = TRUE,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n\nmy_oncoplot = grid.grabExpr(\n    draw(my_oncoplot),\n    width = 10,\n    height = 17\n)\n\nmultipanel_figure <- ggarrange(\n    my_oncoplot, # left panel\n    ggarrange( # right panel\n        NULL, # empty space at the top\n        fisher_test$arranged, # forest on the top\n        NULL, # empty space at the bottom\n        nrow = 3, # arrange vertically\n        heights = c(0.1, 2.5, 1) # match height of the oncoplot\n    ),\n    widths = c(1.5, 1), # so the oncoplot is a little wider than the forest\n    labels = c(\"A\", \"B\"), # labels for the panels\n    font.label = list( # make labels bold face\n        color = \"black\",\n        face = \"bold\"\n    )\n)\n\nmultipanel_figure\n```\n\n```{r cleaup_om}\n#| echo: false\nunlink(\"onco_matrix.txt\")\n```\n","srcMarkdownNoYaml":"\n\nOne of the main features and integral parts of this package is the display of\ncoding mutations across a set of genes in a given cohort. Because it outperforms\nother tools and generates display items with a lot of supported features and\nflexibility, it is called `prettyOncoplot` and it belongs to the `pretty` family\nof GAMBLR.viz functions.\nThis tutorial will demonstate how to prepare inputs for it (spoiler alert: no\nspecific formatting is necessary) and what is the format of metadata expected by\n`prettyOncoplot` (spoiler alert: just Tumor_Sample_Barcode column and column for\nany annotation you want to display).\n\n## Prepare setup\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(GAMBLR.open)\nlibrary(dplyr)\n```\n\nNext, we will get some data to display. The metadata is expected to be a data\nframe with one required column: `Tumor_Sample_Barcode` and any other optional\ncolumn that you want to display as annotation track. In this example, we will\nuse as example the data set and variant calls from the\n[study](https://doi.org/10.1182/blood.2022018719) that identified\ngenetic subgroup of Follicular lymphoma (FL) associated with histologic\ntransformation to DLBCL.\n\n```{r get_metadata}\nmetadata <- get_gambl_metadata() %>%\n    filter(cohort == \"FL_Dreval\")\n```\n\nNext, we will obtain the coding mutations that will be used in the plotting.\nThe data is a data frame in a standartized maf format.\n\n```{r get_maf}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata,\n    tool_name = \"publication\"\n)\n\n# How does it look like?\ndim(maf)\n\nhead(maf) %>%\n    select(\n        Tumor_Sample_Barcode,\n        Hugo_Symbol,\n        Variant_Classification\n    )\n```\n\n::: {.callout-tip}\n## Did you know?\nYou do not have to subset your maf data frame to coding mutations only before\nusing it with the `prettyOncoplot`. Much like other tools, it will be\nautomatically handled for you to only display coding mutations.\n:::\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart visualizing the data.\n\n## The simplest oncoplot\n\nThere is a number of options how to customize your oncoplot, but it is ready for\nyou to use with just the metadata and maf. Here is an example of the output with\nall default parameters:\n\n```{r default}\n#| fig-width: 10\nminMutationPercent <- 10 # only show genes mutated in at least 10% of samples\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent\n)\n```\n\n## Adding annotation tracks\nWe can customize this and add some of the annotation tracks for more informative\ndisplay of the metadata we ate interested in:\n```{r add_annotations}\n#| fig-width: 10\nmetadataColumns <- c(\n    \"pathology\",\n    \"lymphgen\",\n    \"genetic_subgroup\",\n    \"COO_consensus\",\n    \"sex\"\n)\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns\n)\n```\n\n## Changing font sizes\n\nYou may notice that as more (or less) genes and annotations are displayed with\nthe oncoplot we may want to modify the size of the gene names and/or the\nannotation tracks with their labels. There are several parameters available for\nyou to do so:\n- `metadataBarHeight`: will change the height of the annotation tracks at the\nbottom of the oncoplot\n- `metadataBarFontsize`: will change the font size of the annotation tracks at\nthe bottom of the oncoplot\n- `fontSizeGene`: will change the font size of both percentage labels to the\nright of the oncoplot and gene names to the left of it\n- `legendFontSize`: will change the font size of the legend at the bottom of\nthe plot\nLet's see these parameters in action:\n```{r adjust_fonts}\n#| fig-height: 8\nmetadataBarHeight <- 5\nmetadataBarFontsize <- 10\nfontSizeGene <- 12\nlegendFontSize <- 7\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize\n)\n```\n\n## Show samples ordered on annotations\n\nWe can notice that the default setting generates the classic \"rainfall\" style of\nthe plot - but what if we want to add some structure to it and sort sample order\nin some way? It is easy to do so with the parameter `sortByColumns`. We can sort\non the same annotations as we use to display with the oncoplot:\n```{r sort_samples}\n#| fig-height: 8\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    minMutationPercent = minMutationPercent,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns\n)\n```\n\n\n::: {.callout-tip}\n## Did you know?\nThe ordering occurs sequentially according to the order of individual columns we\nhave specified with the `sortByColumns` parameter. The ordering is in ascending\norder, and can be toggled with additional boolean parameter `arrange_descending`.\n:::\n\n\n## Displaying only specific genes\n\nThere can be scenarion where we might want to diplay genes not based on their\nrecurrence, but out of interest in specific genes. Sure so, one way to do it is\nto pre-filter your maf data to the genes of interest. But this might have some\nunexpected consequences and limit your flexibility in doing more things, so the\nbetter way is to take advantage of the `genes` parameter:\n\n```{r goi}\nfl_genes <- c(\"RRAGC\", \"CREBBP\", \"VMA21\", \"ATP6V1B2\", \"EZH2\", \"KMT2D\")\ndlbcl_genes <- c(\"MEF2B\", \"CD79B\", \"MYD88\", \"TP53\")\ngenes <- c(fl_genes, dlbcl_genes)\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes\n)\n```\n\n::: {.callout-note}\nNote that we removed the `minMutationPercent` in the last function call since we\nwanted to see the genes that we specifically requested.\n:::\n\nNow we are only looking at some specific genes of interest but they are arranged\nin the decreasing order of their recurrence in this cohort. What if we want to\nenforce the gene order on the oncoplot to be exactly the same as we specified\nit in our `gene` variable? We can take advantage of the `keepGeneOrder`\nparameter:\n```{r goi_order}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    keepGeneOrder = TRUE\n)\n```\n\n## Grouping genes into categories\n\nWe can also group genes into specific categories. To do so, we need to have a\nnamed list where name of the list element corresponds to the gene name, and\nthe list element corresponds to the gene group. We alreade have the `genes`\nvariable, so we can convert it to the appropriate format:\n\n```{r goi_named_list}\ngene_groups <- c(\n    rep(\"FL\", length(fl_genes)),\n    rep(\"DLBCL\", length(dlbcl_genes))\n)\nnames(gene_groups) <- genes\n\ngene_groups\n```\n\nNow we can use it to split the genes on the oncoplot into the groups:\n```{r goi_groups}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups\n)\n```\n\n::: {.callout-tip}\n## Did you know?\nYou can provide more than two groups of genes - any number of groups is\nsupported as long as they are specified in the `gene_groups`.\n:::\n\n::: {.callout-note}\nWithin each group, the genes are ordered in decreasing order of their recurrence,\nbut the `keepGeneOrder` parameter is still supported and if specified, will keep\nthe specified order within each group.\n:::\n\n## Grouping samples into categories\n\nSimilar to the grouping of genes, we can also group samples into certain\ncategories. Typically, it is done based on one of the annotations tracks. By\ndefault, there will be no labels for each sample category, but we also have an\noption of specifying these labels:\n\n```{r sample_groups}\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\")\n)\n```\n\n## Tallying mutation burden\n\nPreviously, we noted that the maf data we were supplying to the prettyOncoplot\nwas not subset to contain only coding mutations, and also discouraged from\npre-filtering maf to a subset of genes if we are insterested only looking at\nsome of them. **Here is why this is important:** if we want to layer on\nadditional information like total mutation burden per sample, any subsetting or\nfiltering of the maf would generate inaccurate and misleading results. Therefore,\n`prettyOncoplot` handles all of this for you! So if we were to go ahead with\ntallying the total mutation burden, we could just add some additional parameters\nto the function call:\n```{r tmb}\nhideTopBarplot <- FALSE # will display TMB annotations at the top\ntally_all_mutations <- TRUE # will tally all mutations per sample\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = metadataColumns,\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations\n)\n```\n::: {.callout-tip}\n## Did you know?\nIf the dynamic range of total mutation burden is too big and there are some\nextreme outliers, the bar chart at the top of the oncoplot can be capped of at\nany numeric value by providing `tally_all_mutations_max` parameter.\n:::\n\nWhat if we want to additionally force the ordering based on the total number of\nmutations, so they are nicely arranged in the decreasing order? We can do so by\nadding the mutation counts as one of the annotation tracks and using it to sort\nthe samples:\n```{r tmb_order_by_meta}\n#| fig-height: 8\n\n# Count all muts to define the order of samples\ntotal_mut_burden <- maf %>%\n    count(Tumor_Sample_Barcode)\n\nhead(total_mut_burden)\n\n# Add this info to metadata\nmetadata <- left_join(\n    metadata,\n    total_mut_burden\n)\n\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE\n)\n```\n\n::: {.callout-note}\nWe have modified here the `sortByColumns` parameter, and provided two additional\nparameters `numericMetadataColumns` and `arrange_descending`.\n:::\n\n::: {.callout-tip}\n## Did you know?\nThe top annotation and `n` annotation at the bottom are the same thing? Remove\n`n` from the legend by adding `hide_annotations = \"n\"` and remove display of\nannotation track while keeping the ordering by adding\n`hide_annotations_tracks = TRUE`.\n:::\n\n## Annotating significance of mutation frequencies in sample groups\n\nWhen looking at our sample plots, we can notice that the frequency of mutations\nin *RRAGC*, *ATP6V1B2*, *VMA21* and others is different between FL and DLBCL.\nBut is this difference significant? Can we layer on this diffenerence to the\ndisplay panel? Yes we can, and this is very easy with GAMBLR family! To do so we\nwill first use another function from GAMBLR.viz to run Fisher's test and find\nwhich genes are significantly different between the FL and DLBCL:\n\n```{r fisher}\nfisher_test <- prettyForestPlot(\n    maf = maf,\n    metadata = metadata,\n    genes = genes,\n    comparison_column = \"pathology\",\n    comparison_values = c(\"DLBCL\", \"FL\"), # we have three pathologies in data\n    comparison_name = \"FL vs DLBCL\"\n)\nfisher_test$arranged\n```\n\nIn fact, there are genes that are mutated at significantly different\nfrequencies! Now let's layer on this information to our oncoplot:\n\n```{r oncoplot_fisher}\n#| eval: false\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test\n)\n```\n\n## Annotating genes with hotspots\n\nSome genes are mutated at certain positions more often that at others, therefore\ncreating the mutational hotspots - and it we can layer on this level of\ninformation to our oncoplot. First, we will need to process our maf data to add\na new column called `hot_spot` which will contain a boolean value showing\nwhether or not particular mutation is a hotspot. If you don't know how to do it,\nthere is a function for exactly this purpose in the\n[GAMBLR.data](https://github.com/morinlab/GAMBLR.data), and we will use it in\nthis example:\n```{r annotate_maf}\n# Annotate hotspots\nmaf <- annotate_hotspots(maf)\n\n# What are the hotspots?\nmaf %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n::: {.callout-note}\nThe GAMBLR.data version of the `annotate_hotspots` only handles very specific\ngenes and does not have functionality to annotate all hotspots.\n:::\nNow, we can add annotation of the hotspots to the oncoplot display by toggling\nthe `highlightHotspots` parameter:\n```{r oncoplot_fisher_hotspot}\n#| eval: false\nhighlightHotspots <- TRUE\nprettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n```\n\n## Co-oncoplot: two plots side-by-side\n\nIt may also be informative to generate a display panel where there are two\noncoplots displayed side-by-side, so it is possible to visually compare the\nspecific groups of samples while maintaining all annotations and ordering we\nbuilt so far. For this purpose, the GAMBLR.viz has another function in the\n`pretty` family: `prettyCoOncoplot`. It accepts all of the same parameters as\n`prettyOncoplot` with addition of some unique additions. For example, lets\nbreak down our sample oncoplot we created so far by the `genetic_subgroup` and\nsee how cFL compares to dFL:\n\n```{r cooncoplot}\n#| fig-keep: last\n#| fig-height: 8\n#| fig-width: 15\n#| eval: false\nprettyCoOncoplot(\n    metadata = metadata,\n    maf = maf,\n    comparison_column = \"genetic_subgroup\",\n    label1 = \"cFL\",\n    label2 = \"dFL\",\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    keepGeneOrder = TRUE,\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots,\n    legend_row = 2,\n    annotation_row = 2\n)\n```\n\n::: {.callout-note}\nIt is only possible to display two groups side-by-side. If the metadata column\nyou want to split on contains more groups, the specific values can be specified\nwith `comparison_values` parameter.\n:::\n\n::: {.callout-tip}\n## Did you know?\nNotice that we did not need to create individual maf or metadata objects to\nsupply to `prettyCoOncoplot` - the same objects we used before are also\nsupported here, but specified with differen parameters `metadata` and `maf`.\n:::\n\nIn the above example, we forced the order of genes to be exaclty as we specified\nso that the same gene is is displayed on the same row for both oncoplots,\nothervise they wold not be on the same row due to the different frequencies in\neach group.\nIn addition to specifying this parameter, we have also enforced specific number\nof rows in the legend below the plot, so they nicely align between the display\nitems.\n\n## Using oncoplot in multi-panel figure\n\nWhen arranging items for the multi-panel figure when preparing manuscript or\nexperiment report, it may be needed to use the generated oncoplot on the same\npage as other display items. The `prettyOncoplot` (and, therefore,\n`prettyCoOncoplot`), handles the ComplexHeatmap under the hood to generate\ngraphics, and it is not readily available to be combined with the plots\ngenerated with other tools, for example `ggplot2`. Not readily available - but\ndefinitely not impossible!\nThe output of `prettyCoOncoplot` is directly compatible with the arrangement on\nmulti-panel figure since it uses the trick shown below under the hood to put\ntwo panels side-by-side, but the otuput of `prettyOncoplot` is a ComplexHeatmap\nobject so needs some extra steps to allow multi-panel arrangement.\nFirst, lets store the returned oncoplot in a variable:\n\n```{r store_oncoplot}\n#| output: false\n#| eval: false\nmy_oncoplot <- prettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = genes,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n```\n\nNext, we will import some of the packages needed to handle the trick:\n```{r load_extra}\nlibrary(ComplexHeatmap) # to handle the ComplexHeatmap object\nlibrary(ggpubr) # to arrange multiple panels\n```\n\nAfter that, we will capture the display of the oncoplot:\n```{r capture_oncoplot}\n#| eval: false\nmy_oncoplot = grid.grabExpr(\n    draw(my_oncoplot),\n    width = 10,\n    height = 17\n)\n```\n\nNow, it is ready for us to arrange in multi-panel figure. We can use the forest\nplot we already looked at as an example, and put it to the right of the\noncoplot:\n```{r multi_panel}\n#| fig-height: 8\n#| fig-width: 13\n#| eval: false\nmultipanel_figure <- ggarrange(\n    my_oncoplot, # left panel\n    fisher_test$arranged, # right panel\n    widths = c(1.5, 1), # so the oncoplot is a little wider than the forest\n    labels = c(\"A\", \"B\"), # labels for the panels\n    font.label = list( # make labels bold face\n        color = \"black\",\n        face = \"bold\"\n    )\n)\n\nmultipanel_figure\n```\n\nFinal note: it would be nice to have the genes in the forest plot directly\naligned with the genes as they are displayed on the oncoplot, and we can do this\nby providing consistent ordering and adding some white space below forest plot\nto match the height of the oncoplot:\n```{r final_plot}\n#| fig-keep: last\n#| fig-height: 8\n#| fig-width: 13\n#| eval: false\nmy_oncoplot <- prettyOncoplot(\n    these_samples_metadata = metadata,\n    maf_df = maf,\n    metadataColumns = metadataColumns,\n    metadataBarHeight = metadataBarHeight,\n    metadataBarFontsize = metadataBarFontsize,\n    fontSizeGene = fontSizeGene,\n    legendFontSize = legendFontSize,\n    sortByColumns = c(\"n\", metadataColumns),\n    genes = rev(fisher_test$fisher$gene),\n    keepGeneOrder = TRUE,\n    splitGeneGroups = gene_groups,\n    splitColumnName = \"pathology\",\n    groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),\n    hideTopBarplot = hideTopBarplot,\n    tally_all_mutations = tally_all_mutations,\n    numericMetadataColumns = \"n\",\n    arrange_descending = TRUE,\n    hide_annotations = \"n\",\n    hide_annotations_tracks = TRUE,\n    annotate_specific_genes = TRUE,\n    this_forest_object = fisher_test,\n    highlightHotspots = highlightHotspots\n)\n\nmy_oncoplot = grid.grabExpr(\n    draw(my_oncoplot),\n    width = 10,\n    height = 17\n)\n\nmultipanel_figure <- ggarrange(\n    my_oncoplot, # left panel\n    ggarrange( # right panel\n        NULL, # empty space at the top\n        fisher_test$arranged, # forest on the top\n        NULL, # empty space at the bottom\n        nrow = 3, # arrange vertically\n        heights = c(0.1, 2.5, 1) # match height of the oncoplot\n    ),\n    widths = c(1.5, 1), # so the oncoplot is a little wider than the forest\n    labels = c(\"A\", \"B\"), # labels for the panels\n    font.label = list( # make labels bold face\n        color = \"black\",\n        face = \"bold\"\n    )\n)\n\nmultipanel_figure\n```\n\n```{r cleaup_om}\n#| echo: false\nunlink(\"onco_matrix.txt\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"ayu","toc":true,"css":["styles.css"],"output-file":"oncoplot.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","code-annotations":"hover","theme":{"light":["flatly","../theme-light.scss"],"dark":["darkly","../theme-dark.scss"]},"title":"Tutorial: The prettiest oncoplot","message":false,"fig.width":7,"fig.height":5,"fig.align":"center"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
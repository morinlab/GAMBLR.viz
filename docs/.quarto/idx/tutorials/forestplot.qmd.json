{"title":"Tutorial: The prettiest forestplot","markdown":{"yaml":{"title":"Tutorial: The prettiest forestplot","warning":false,"message":false,"fig.width":10,"fig.height":8,"fig.align":"center"},"headingText":"Prepare setup","containsRefs":false,"markdown":"\n\nOne of the integral parts of this package is the analysis and display of the\ndifferences in the frequency of mutations for two different groups in a given\ncohort. Because it is easy to use, conducts flexible comparisons, and generates\neasy-to-follow display items, it is called `prettyForestPlot` and it belongs to\nthe `pretty` family of GAMBLR.viz functions.\nThere is no specific formatting or data preparation needed for the analysis and\nvisualization, and the only required inputs are the mutation data (can be maf\nformat or binary feature matrix), metadata (containing sample identifiers in\n`sample_id` column and annotation of the group that will be used in comparison),\nand a character of the column name in metadata where the sample annotations are\nspecified.\nThis tutorial will demonstate the example of the inputs and showcase the main\nfeatures of this function.\n\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(GAMBLR.open)\nlibrary(tibble)\nlibrary(dplyr)\n```\n\nNext, we will get some data to display. The metadata is expected to be a data\nframe with one required column: `sample_id` and another column that will contain\nsample annotations according to the comparison group. In this example, we will\nuse as example the data set and variant calls from the\n[study](https://doi.org/10.1182/blood.2022016534) that identified\ngenetic subgroup of Burkitt lymphoma (BL).\n\n```{r get_metadata}\nmetadata <- get_gambl_metadata() %>%\n    filter(cohort == \"BL_Thomas\")\n```\n\nNext, we will obtain the coding mutations that will be used in the plotting.\nThe data is a data frame in a standartized maf format.\n\n```{r get_maf}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata,\n    tool_name = \"publication\",\n    projection = \"hg38\"\n)\n\n# How does it look like?\ndim(maf)\n\nhead(maf) %>%\n    select(\n        Tumor_Sample_Barcode,\n        Hugo_Symbol,\n        Variant_Classification\n    )\n```\n\nFor the purpose of this tutorial, we will focus on a small subset of genes known\nto be significantly mutated in BL.\n\n```{r goi}\ngenes <- lymphoma_genes_bl_v_latest$Gene\nhead(genes)\n```\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart visualizing the data.\n\n## The default forest plot\n\nThe forest plot is ready to be called with the default parameters after just\nproviding the metadata and data frame with mutations in standard maf format.\nHere is an example of the output with all default parameters:\n\n```{r default}\ncomparison_column <- \"EBV_status_inf\" # character of column name for comparison\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column\n)\n```\n\nThe output of the function is a list containing the following objects:\n- `fisher`: a data frame with detailed statistics of the Fisher's test for each\ngene\n- `mutmat`: a binary matrix used for the Fisher's test\n- `forest`: a ggplot2 object with the forest plot of the ORs from the Fisher's\ntest for each gene\n- `bar`: a ggplot2 object wiht mutation frequencies for each Gene\n- `arranged`: a display item where both the forest and bar plots are nicely\narranged side-by-side\n\n```{r}\nnames(fp)\n```\n\n## Report only significant differences\n\nBy default, all of the genes of interest are reported in the output. After the\nFisher's test is performed, the `prettyForestPlot` also calculates FDR and we\ncan use it to only report significant differences by providing a significance\ncutoff with the parameter `max_q`:\n\n```{r fdr}\nmax_q <- 0.1 # only those qith Q value <= 0.1 will be reported\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column,\n    max_q = max_q\n)\n```\n\nWe now can take a look at what genes are passing the significance cutoff:\n```{r fdr_plot}\nfp$arranged\n```\n\n## Comparing categories with more than two groups\n\nAs the `prettyForestPlot` construcst the 2x2 contingency tables to run Fisher's\ntest to find significant differences, it can only operate on comparing 2 groups\nbetween themselves - but what if you have more than that and want to see the\ndifference between some of them?\nTo handle this scenario, we can take advantage of the `comparison_values`\nparameter, which will be used to subset the metadata to only requested groups\nand only perform testing and plotting on this subset. Let's see it in action:\n\n```{r comp_groups}\ncomparison_column <- \"genetic_subgroup\" # change the comparison column\ncomparison_values <- c(\"IC-BL\", \"Q53-BL\")\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column,\n    comparison_values = comparison_values,\n    max_q = max_q\n)\n\nfp$arranged\n```\n\nThis plot is exactly reproducing the Supplemmental Figure 12D from the\n[Thomas et al](https://doi.org/10.1182/blood.2022016534) study!\n\n## Separating genes with hotspots\n\nWe can additionally separate hotspots from the other mutations and compare those\nseparately. First, we need to annotate the maf data, for which we will use the\n`annotate_hotspots` from GAMBLR family. This function will add a new column to\nthe maf named `hot_spot` indicating whether or not the specific mutation is in\nthe hotspot region.\n\n```{r annotate_maf}\n# Annotate hotspots\nmaf <- annotate_hotspots(maf)\n\n# What are the hotspots?\nmaf %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n::: {.callout-note}\nThe GAMBLR.data version of the `annotate_hotspots` only handles very specific\ngenes and does not have functionality to annotate all hotspots.\n:::\n\nOh no! Looks like there is no hotspots in this maf data. This does not make\nsense, so what happened? Aha, the hotspot annotation in GAMBLR.data works only\non the data in grch37 projection. But our maf is in hg38, so what should we do?\nOne way is to lift the maf data to another projection using the UCSC's liftOver,\nand GAMBLR family has exactly the function that serves this purpose:\n\n```{r lift_maf}\nmaf_grch37 <- liftover(\n    maf,\n    mode = \"maf\",\n    target_build = \"grch37\"\n) %>%\nmutate(Chromosome = gsub(\"chr\", \"\", Chromosome)) %>%\nselect(-hot_spot) # since it is empty we can just drop it\n\n```\n\nCan we annotate the hotspots now?\n\n```{r}\nmaf_grch37 <- annotate_hotspots(maf_grch37)\n\n# What are the hotspots?\nmaf_grch37 %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n\nIndeed, the hotspots are properly annotated once we have maf in correct\nprojection. Now, we can simply toggle the `separate_hotspots` parameter to\nperform separate comparisons within hotspots:\n\n```{r comp_hotspots}\ncomparison_column <- \"EBV_status_inf\"\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf_grch37,\n    genes = genes,\n    comparison_column = comparison_column,\n    max_q = max_q,\n    separate_hotspots = TRUE\n)\n\nfp$arranged\n```\n\n## Using binary matrix as input\n\nSometimes it might be useful to have different input format instead of maf - for example, binary matrix of features. Can we use the `prettyForestPlot` in this\ncase? Yes, sure we can!\n\nFirst, let's construct the binary matrix. We will supplement our maf with the\nnon-coding mutations to look at the aSHM regions in addition to coding\nmutations, and this will already give us the data in correct projection:\n```{r bin_mat}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata\n)\nmaf$Variant_Classification %>% table\n```\n\nNow we convert this maf into binary matrix:\n```{r cod_mat}\n# Generate binary matrix\ncoding_matrix <- get_coding_ssm_status(\n    these_samples_metadata = metadata,\n    maf_data = maf,\n    gene_symbols = genes,\n    include_hotspots = TRUE,\n    review_hotspots = TRUE\n)\n\n```\n\nNext, supplement this with the matrix of non-coding mutation across aSHM regions\n\n```{r ashm_mat}\n\n# We'll use the aSHM regions defined in GAMBLR.data\n# Let our helper function massage it into a consistent format\nregions_bed = create_bed_data(somatic_hypermutation_locations_GRCh37_v0.2,\n                              fix_names=\"concat\",\n                              concat_cols=c(\"gene\",\"region\"),\n                              sep=\"-\")\n\n# Generate matrix of mutations per each site\nashm_matrix <- get_ashm_count_matrix(\n    regions_bed = regions_bed,\n    these_samples_metadata = metadata\n)\n\n# Binarize matrix using arbitrary 3 muts/region cutoff\nashm_matrix[ashm_matrix <= 3] = 0\nashm_matrix[ashm_matrix > 3] = 1\nashm_matrix <- ashm_matrix %>%\n    rownames_to_column(\"sample_id\")\n```\n\n\nWe can now combine both coding and non-coding features into single matrix:\n```{r mat}\nfeature_matrix <- left_join(\n    coding_matrix,\n    ashm_matrix\n)\n\n# Drop any fearures absent across at least 10 samples to clean any noise\nfeature_matrix <- feature_matrix %>%\n    select_if(is.numeric) %>%\n    select(where(~ sum(. > 0, na.rm = TRUE) >= 10)) %>%\n    bind_cols(\n        feature_matrix %>% select(sample_id),\n        .\n    )\n```\n\nNow we can provide the binary matrix to the `prettyForestPlot` and regenerate\nthe Supplemmental Figure 12C from the\n[Thomas et al](https://doi.org/10.1182/blood.2022016534) study!\n\n```{r comp_mat}\ncomparison_column <- \"genetic_subgroup\"\ncomparison_values <- c(\"DGG-BL\", \"Q53-BL\")\nfp <- prettyForestPlot(\n    metadata = metadata,\n    mutmat = feature_matrix,\n    genes = genes,\n    comparison_column = comparison_column,\n    comparison_values = comparison_values,\n    max_q = max_q\n)\n\nfp$arranged\n```\n","srcMarkdownNoYaml":"\n\nOne of the integral parts of this package is the analysis and display of the\ndifferences in the frequency of mutations for two different groups in a given\ncohort. Because it is easy to use, conducts flexible comparisons, and generates\neasy-to-follow display items, it is called `prettyForestPlot` and it belongs to\nthe `pretty` family of GAMBLR.viz functions.\nThere is no specific formatting or data preparation needed for the analysis and\nvisualization, and the only required inputs are the mutation data (can be maf\nformat or binary feature matrix), metadata (containing sample identifiers in\n`sample_id` column and annotation of the group that will be used in comparison),\nand a character of the column name in metadata where the sample annotations are\nspecified.\nThis tutorial will demonstate the example of the inputs and showcase the main\nfeatures of this function.\n\n## Prepare setup\n\nWe will first import the necessary packages:\n\n```{r load_packages}\n# Load packages\nlibrary(GAMBLR.open)\nlibrary(tibble)\nlibrary(dplyr)\n```\n\nNext, we will get some data to display. The metadata is expected to be a data\nframe with one required column: `sample_id` and another column that will contain\nsample annotations according to the comparison group. In this example, we will\nuse as example the data set and variant calls from the\n[study](https://doi.org/10.1182/blood.2022016534) that identified\ngenetic subgroup of Burkitt lymphoma (BL).\n\n```{r get_metadata}\nmetadata <- get_gambl_metadata() %>%\n    filter(cohort == \"BL_Thomas\")\n```\n\nNext, we will obtain the coding mutations that will be used in the plotting.\nThe data is a data frame in a standartized maf format.\n\n```{r get_maf}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata,\n    tool_name = \"publication\",\n    projection = \"hg38\"\n)\n\n# How does it look like?\ndim(maf)\n\nhead(maf) %>%\n    select(\n        Tumor_Sample_Barcode,\n        Hugo_Symbol,\n        Variant_Classification\n    )\n```\n\nFor the purpose of this tutorial, we will focus on a small subset of genes known\nto be significantly mutated in BL.\n\n```{r goi}\ngenes <- lymphoma_genes_bl_v_latest$Gene\nhead(genes)\n```\n\nNow we have our metadata and mutations we want to explore, so we are ready to\nstart visualizing the data.\n\n## The default forest plot\n\nThe forest plot is ready to be called with the default parameters after just\nproviding the metadata and data frame with mutations in standard maf format.\nHere is an example of the output with all default parameters:\n\n```{r default}\ncomparison_column <- \"EBV_status_inf\" # character of column name for comparison\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column\n)\n```\n\nThe output of the function is a list containing the following objects:\n- `fisher`: a data frame with detailed statistics of the Fisher's test for each\ngene\n- `mutmat`: a binary matrix used for the Fisher's test\n- `forest`: a ggplot2 object with the forest plot of the ORs from the Fisher's\ntest for each gene\n- `bar`: a ggplot2 object wiht mutation frequencies for each Gene\n- `arranged`: a display item where both the forest and bar plots are nicely\narranged side-by-side\n\n```{r}\nnames(fp)\n```\n\n## Report only significant differences\n\nBy default, all of the genes of interest are reported in the output. After the\nFisher's test is performed, the `prettyForestPlot` also calculates FDR and we\ncan use it to only report significant differences by providing a significance\ncutoff with the parameter `max_q`:\n\n```{r fdr}\nmax_q <- 0.1 # only those qith Q value <= 0.1 will be reported\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column,\n    max_q = max_q\n)\n```\n\nWe now can take a look at what genes are passing the significance cutoff:\n```{r fdr_plot}\nfp$arranged\n```\n\n## Comparing categories with more than two groups\n\nAs the `prettyForestPlot` construcst the 2x2 contingency tables to run Fisher's\ntest to find significant differences, it can only operate on comparing 2 groups\nbetween themselves - but what if you have more than that and want to see the\ndifference between some of them?\nTo handle this scenario, we can take advantage of the `comparison_values`\nparameter, which will be used to subset the metadata to only requested groups\nand only perform testing and plotting on this subset. Let's see it in action:\n\n```{r comp_groups}\ncomparison_column <- \"genetic_subgroup\" # change the comparison column\ncomparison_values <- c(\"IC-BL\", \"Q53-BL\")\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf,\n    genes = genes,\n    comparison_column = comparison_column,\n    comparison_values = comparison_values,\n    max_q = max_q\n)\n\nfp$arranged\n```\n\nThis plot is exactly reproducing the Supplemmental Figure 12D from the\n[Thomas et al](https://doi.org/10.1182/blood.2022016534) study!\n\n## Separating genes with hotspots\n\nWe can additionally separate hotspots from the other mutations and compare those\nseparately. First, we need to annotate the maf data, for which we will use the\n`annotate_hotspots` from GAMBLR family. This function will add a new column to\nthe maf named `hot_spot` indicating whether or not the specific mutation is in\nthe hotspot region.\n\n```{r annotate_maf}\n# Annotate hotspots\nmaf <- annotate_hotspots(maf)\n\n# What are the hotspots?\nmaf %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n::: {.callout-note}\nThe GAMBLR.data version of the `annotate_hotspots` only handles very specific\ngenes and does not have functionality to annotate all hotspots.\n:::\n\nOh no! Looks like there is no hotspots in this maf data. This does not make\nsense, so what happened? Aha, the hotspot annotation in GAMBLR.data works only\non the data in grch37 projection. But our maf is in hg38, so what should we do?\nOne way is to lift the maf data to another projection using the UCSC's liftOver,\nand GAMBLR family has exactly the function that serves this purpose:\n\n```{r lift_maf}\nmaf_grch37 <- liftover(\n    maf,\n    mode = \"maf\",\n    target_build = \"grch37\"\n) %>%\nmutate(Chromosome = gsub(\"chr\", \"\", Chromosome)) %>%\nselect(-hot_spot) # since it is empty we can just drop it\n\n```\n\nCan we annotate the hotspots now?\n\n```{r}\nmaf_grch37 <- annotate_hotspots(maf_grch37)\n\n# What are the hotspots?\nmaf_grch37 %>%\n    filter(hot_spot) %>%\n    select(Hugo_Symbol, hot_spot) %>%\n    table()\n```\n\nIndeed, the hotspots are properly annotated once we have maf in correct\nprojection. Now, we can simply toggle the `separate_hotspots` parameter to\nperform separate comparisons within hotspots:\n\n```{r comp_hotspots}\ncomparison_column <- \"EBV_status_inf\"\nfp <- prettyForestPlot(\n    metadata = metadata,\n    maf = maf_grch37,\n    genes = genes,\n    comparison_column = comparison_column,\n    max_q = max_q,\n    separate_hotspots = TRUE\n)\n\nfp$arranged\n```\n\n## Using binary matrix as input\n\nSometimes it might be useful to have different input format instead of maf - for example, binary matrix of features. Can we use the `prettyForestPlot` in this\ncase? Yes, sure we can!\n\nFirst, let's construct the binary matrix. We will supplement our maf with the\nnon-coding mutations to look at the aSHM regions in addition to coding\nmutations, and this will already give us the data in correct projection:\n```{r bin_mat}\nmaf <- get_ssm_by_samples(\n    these_samples_metadata = metadata\n)\nmaf$Variant_Classification %>% table\n```\n\nNow we convert this maf into binary matrix:\n```{r cod_mat}\n# Generate binary matrix\ncoding_matrix <- get_coding_ssm_status(\n    these_samples_metadata = metadata,\n    maf_data = maf,\n    gene_symbols = genes,\n    include_hotspots = TRUE,\n    review_hotspots = TRUE\n)\n\n```\n\nNext, supplement this with the matrix of non-coding mutation across aSHM regions\n\n```{r ashm_mat}\n\n# We'll use the aSHM regions defined in GAMBLR.data\n# Let our helper function massage it into a consistent format\nregions_bed = create_bed_data(somatic_hypermutation_locations_GRCh37_v0.2,\n                              fix_names=\"concat\",\n                              concat_cols=c(\"gene\",\"region\"),\n                              sep=\"-\")\n\n# Generate matrix of mutations per each site\nashm_matrix <- get_ashm_count_matrix(\n    regions_bed = regions_bed,\n    these_samples_metadata = metadata\n)\n\n# Binarize matrix using arbitrary 3 muts/region cutoff\nashm_matrix[ashm_matrix <= 3] = 0\nashm_matrix[ashm_matrix > 3] = 1\nashm_matrix <- ashm_matrix %>%\n    rownames_to_column(\"sample_id\")\n```\n\n\nWe can now combine both coding and non-coding features into single matrix:\n```{r mat}\nfeature_matrix <- left_join(\n    coding_matrix,\n    ashm_matrix\n)\n\n# Drop any fearures absent across at least 10 samples to clean any noise\nfeature_matrix <- feature_matrix %>%\n    select_if(is.numeric) %>%\n    select(where(~ sum(. > 0, na.rm = TRUE) >= 10)) %>%\n    bind_cols(\n        feature_matrix %>% select(sample_id),\n        .\n    )\n```\n\nNow we can provide the binary matrix to the `prettyForestPlot` and regenerate\nthe Supplemmental Figure 12C from the\n[Thomas et al](https://doi.org/10.1182/blood.2022016534) study!\n\n```{r comp_mat}\ncomparison_column <- \"genetic_subgroup\"\ncomparison_values <- c(\"DGG-BL\", \"Q53-BL\")\nfp <- prettyForestPlot(\n    metadata = metadata,\n    mutmat = feature_matrix,\n    genes = genes,\n    comparison_column = comparison_column,\n    comparison_values = comparison_values,\n    max_q = max_q\n)\n\nfp$arranged\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"ayu","toc":true,"css":["styles.css"],"output-file":"forestplot.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","code-annotations":"hover","theme":{"light":["flatly","../theme-light.scss"],"dark":["darkly","../theme-dark.scss"]},"title":"Tutorial: The prettiest forestplot","message":false,"fig.width":10,"fig.height":8,"fig.align":"center"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
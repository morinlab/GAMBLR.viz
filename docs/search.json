[{"path":"https://morinlab.github.io/GAMBLR.viz/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Pull Request Checklists","title":"Pull Request Checklists","text":"Important: opening pull request, keep applicable checklist delete sections.","code":""},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.viz/PULL_REQUEST_TEMPLATE.html","id":"required","dir":"","previous_headings":"Checklist for all PRs","what":"Required","title":"Pull Request Checklists","text":"ensured prepend functions existing GAMBLR.data GAMBLR.results <package>::function() syntax. ensured add GAMBLR.data GAMBLR.results @import section documentation","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"prepare-setup","dir":"Articles","previous_headings":"","what":"Prepare setup","title":"Visualizing copy number data as heatmaps","text":"first import necessary packages:","code":"# Load packages library(GAMBLR.open) suppressMessages(library(dplyr))"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Visualizing copy number data as heatmaps","text":"usual, typically begin analysis loading metadata restricting rows samples interest based number criteria. , ’ll separately look data WGS (genome seq_type) whole exome sequencing capture seq_type. shows data 529 genomes 1783 exomes just DLBCLs.","code":"dlbcl_genome_meta = suppressMessages(get_gambl_metadata(seq_type_filter = \"genome\")) %>%                     filter(pathology==\"DLBCL\")  dlbcl_exome_meta = suppressMessages(get_gambl_metadata(seq_type_filter = \"capture\")) %>%                     filter(pathology==\"DLBCL\")  #remove any duplicate sample_id/seq_type combinations g_meta_clean = check_and_clean_metadata(dlbcl_genome_meta,                                       duplicate_action = \"keep_first\") #remove any duplicate sample_id/seq_type combinations e_meta_clean = check_and_clean_metadata(dlbcl_exome_meta,                                       duplicate_action = \"keep_first\")  nrow(g_meta_clean) [1] 529 nrow(e_meta_clean) [1] 1783"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"projections","dir":"Articles","previous_headings":"","what":"Projections","title":"Visualizing copy number data as heatmaps","text":"number samples copy number results available isn’t necessarily going match . Importantly, studies older relied grch37 (.e. hg19) genome build whereas studies used flavour hg38. GAMBL, aim project results grch37 hg38 results relatively comparable studies. However, efficiency, GAMBLR.data doesn’t projections every data set (sorry!). Let’s start determining samples metadata data available case results available one projection. seem copy number segments available 48 samples hg38. grch37 data 214 samples. exome data? Ouch! provided copy number data genome samples (far). Let’s proceed largest data set, genome samples grch37 projection.","code":"g_segments_grch37 = get_cn_segments(these = g_meta_clean,                                     projection = 'grch37')  g_segments_hg38 = get_cn_segments(these = g_meta_clean,                                     projection = 'hg38')  length(unique(g_segments_grch37$ID)) [1] 214 length(unique(g_segments_hg38$ID)) [1] 48 e_segments_grch37 = get_cn_segments(these = e_meta_clean,                                     projection = 'grch37')  e_segments_hg38 = get_cn_segments(these = e_meta_clean,                                     projection = 'hg38')  length(unique(e_segments_grch37$ID)) [1] 0 length(unique(e_segments_hg38$ID)) [1] 0"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"from-segments-to-bins","dir":"Articles","previous_headings":"","what":"From segments to bins","title":"Visualizing copy number data as heatmaps","text":"Segmented copy number data can difficult work variety reasons. coordinate genome, ’s unnecessarily complicated determine copy number samples. simplify breaking genome series bins determining copy number state bin across samples. yields N M matrix N number samples copy number data M number bins. segmented_data_to_cn_matrix function GAMBLR.utils makes easy. example, ’ll 214 using 2500 bins. ’ve provided metadata even though ’s strictly necessary. can useful pass seg_data contains rows patients don’t plan analyze. rows removed slow process begins. took 18 finish. might imagine, increasing n_bins_split value make process slower increase resolution analysis. can see, process took considerably longer time additional samples weren’t dropped. might guessed strategy parameter, strategies converting segmented data copy number matrix don’t rely equal-sized bins. options ‘custom_regions’,‘cytobands’ ‘GISTIC’. covered another tutorial. can find segmented_data_to_cn_matrix documentation.","code":"time_start = Sys.time(); dlbcl_cn_binned = segmented_data_to_cn_matrix(                                   seg_data = g_segments_grch37,                                   strategy=\"auto_split\",                                   n_bins_split=2500,                                   these_samples_metadata = g_meta_clean) time_end = Sys.time(); elapsed = round(time_end - time_start) print(elapsed) Time difference of 18 secs every_seg = get_cn_segments(get_gambl_metadata()) length(unique(every_seg$ID)) [1] 448 time_start = Sys.time(); all_cn_binned = segmented_data_to_cn_matrix(                                   seg_data = every_seg,                                   strategy=\"auto_split\",                                   n_bins_split=2500) #no metadata provided time_end = Sys.time(); elapsed = round(time_end - time_start) print(elapsed) Time difference of 27 secs"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"dlbcl-copy-number-heatmap","dir":"Articles","previous_headings":"","what":"DLBCL Copy Number Heatmap","title":"Visualizing copy number data as heatmaps","text":"Let’s start basic example. Using copy number matrix just created, run pretty_CN_heatmap. functions, provide metadata table via these_samples_metadata. can often unambiguously refer parameter word .","code":"# Generate a basic genome-wide CN heatmap pretty_CN_heatmap(cn_state_matrix=dlbcl_cn_binned,                   these_samples_metadata = g_meta_clean,                   hide_annotations = \"chromosome\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/CopyNumberHeatmap.html","id":"copy-number-heatmap-for-everything","dir":"Articles","previous_headings":"","what":"Copy Number Heatmap for everything","title":"Visualizing copy number data as heatmaps","text":"earlier example, generated larger matrix grch37 copy number data GAMBLR.data. nrow(all_cn_binned) samples . Let’s see looks like heatmap. time, ’ll tell function scale copy number values average ploidy sample using scale_by_sample.","code":"all_genome_meta = get_gambl_metadata() all_genome_meta = check_and_clean_metadata(all_genome_meta,                                       duplicate_action = \"keep_first\") #drop any genomes that don't have copy number data  all_genome_meta = dplyr::filter(all_genome_meta,   sample_id %in% rownames(all_cn_binned))    # Generate a genome-wide CN heatmap without clustering # Instead, we'll order samples based on pathology and lymphgen pretty_CN_heatmap(cn_state_matrix=all_cn_binned,                   these_samples_metadata = all_genome_meta,                   scale_by_sample = TRUE,                   cluster_rows=F,                   metadataColumns = c(\"pathology\",\"lymphgen\"),                   sortByMetadataColumns = c(\"pathology\",\"lymphgen\"),                   bin_label_nudge = 1.08,                   labelTheseGenes = c(\"CDKN2A\",\"TP53\"),                   hide_annotations = \"chromosome\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"what-it-does","dir":"Articles","previous_headings":"","what":"What it does","title":"GAMBLR.viz","text":"-arching goal GAMBLR.viz facilitate exploratory data analysis cancer genomics studies reducing barrier generating eye-pleasing representations standard data types. package inspired similar resources MAFtools. work, found available tools insufficient needs. particular, visualizations produced GAMBLR.viz cater unique genetic features B-cell lymphomas. example, mutation patterns non-coding regions due aberrant somatic hypermutation. also provide convenient resources colour palettes allow data metadata figures consistent aesthetics.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"gamblr-family","dir":"Articles","previous_headings":"","what":"GAMBLR family","title":"GAMBLR.viz","text":"GAMBLR.viz part larger family R tools analysis lymphoma genomic data (GAMBLRverse, ). GAMBLR began toolkit analysts participating Genomic Analysis Mature B-cell Lymphomas project, led Morin Lab BC Cancer Simon Fraser University. GAMBLR.viz intends provide straightfoward ways mine cancer genomic results leveraging conveneince features afforded members GAMBLR family. user can analyze explore B-cell lymphoma genomics data relying entirely GAMBLR.viz rest GAMBLR packages. continue develop visualization tools, well improve functionality.","code":"/$$$$$$     /$$$$$$    /$$      /$$   /$$$$$$$    /$$        .:::::::  /$$__  $$   /$$__  $$  | $$$    /$$$  | $$__  $$  | $$        .::    .:: | $$  \\__/  | $$  \\ $$  | $$$$  /$$$$  | $$  \\ $$  | $$        .::    .:: | $$ /$$$$  | $$$$$$$$  | $$ $$/$$ $$  | $$$$$$$   | $$   <-   .: .:: | $$|_  $$  | $$__  $$  | $$  $$$| $$  | $$__  $$  | $$        .::  .:: | $$  \\ $$  | $$  | $$  | $$\\  $ | $$  | $$  \\ $$  | $$        .::    .:: |  $$$$$$/  | $$  | $$  | $$ \\/  | $$  | $$$$$$$/  | $$$$$$$$  .::      .::  \\______/   |__/  |__/  |__/     |__/  |_______/   |________/  ~GENOMIC~~~~~~~~~~~~~OF~~~~~~~~~~~~~~~~~B-CELL~~~~~~~~~~~~~~~~~~IN~~~~~~  ~~~~~~~~~~~~ANALYSIS~~~~~~MATURE~~~~~~~~~~~~~~~~~~~LYMPHOMAS~~~~~~~~~~R~"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"local-experience","dir":"Articles","previous_headings":"","what":"Local experience","title":"GAMBLR.viz","text":"functions provided GAMBLR.viz, including dependencies, immediately available upon package installation require internet connection ssh access GSC resources. can run anywhere R available without restrictions limitations.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use cases","title":"GAMBLR.viz","text":"can use GAMBLR.viz step lymphoma data analysis workflow, initial data exploration preparation manuscript-ready figures. GAMBLR.viz helps : generate manuscript-ready plots simple reproducible manner. one-stop shop generate high-level region-specific visualizations genomic data analysis. implement consistent coloring scheme pallettes different types annotations. overcome learning curve using individual packages commonly implemented data visualization field.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"gallery","dir":"Articles","previous_headings":"","what":"Gallery","title":"GAMBLR.viz","text":"Details guide  Details guide  Details guide  Details guide  Details mutation_hotspot_logo  Details prettyCoOncoplot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"tutorials","dir":"Articles","previous_headings":"","what":"Tutorials","title":"GAMBLR.viz","text":"Details guide  Details guide  Details guide  Details guide","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"GAMBLR.viz","text":"Details mutation_hotspot_logo  Details prettyCoOncoplot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/GAMBLR-viz.html","id":"community","dir":"Articles","previous_headings":"","what":"Community","title":"GAMBLR.viz","text":"Community discussions primarily happen issue submission GitHub.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/data_q.html","id":"prepare-setup","dir":"Articles","previous_headings":"","what":"Prepare setup","title":"Exploring data quality","text":"first import necessary packages: Next, get data display. explored obrain data bundled GAMBLR.data difference available objects, use demonstrated approaches retreive metadata simple somatic mutations. demonstration purposes, focus largest whole exome sequencing studies. Next, can take advantage collate_results() function GAMBLR.data add necessary QC metrics directly reported MIRAGE manuscript. Now metadata mutations want explore, ready start exploring visualizing data.","code":"# Load packages library(ggbeeswarm) library(ggExtra) library(tidyverse) library(GAMBLR.open) # Get metadata metadata <- gambl_metadata %>%     filter(         cohort %in% c(\"dlbcl_chapuy\", \"dlbcl_reddy\", \"dlbcl_schmitz\")     )  # Get mutations maf <- get_coding_ssm(     these_samples_metadata = metadata,     this_seq_type = \"capture\" ) metadata <- collate_results(     sample_table = metadata ) %>% left_join(metadata, ., by = \"sample_id\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/data_q.html","id":"target-space-coverage-across-the-studies","dir":"Articles","previous_headings":"","what":"Target space coverage across the studies","title":"Exploring data quality","text":"original manuscript highlights striking difference effective nonredundant coverage across target space (MeanCorrectedCoverage). Let’s see plot generated:  Indeed, coverage one studies different rest. plot, also shown panel B Figure 1 manuscript, also shows 5/999 samples study Reddy et al coverage figher sample lowest coverage study Schmitz et al! Seeing , logical question arises: difference sample quality affects ability detect coding mutations lymphoma genes?","code":"metadata %>%     ggplot(         aes(             x = study,             y = MeanCorrectedCoverage,             colour = ffpe_or_frozen         )     ) +     geom_boxplot(outlier.shape = NA) +     geom_quasirandom(         dodge.width = 0.8,         alpha = 0.5     ) +     coord_flip() +     facet_wrap(         ~seq_type,         ncol = 1,         scales = \"free\"     ) +     scale_colour_manual(values = get_gambl_colours()) +     theme_Morons(         my_legend_position = \"right\",         my_legend_direction = \"vertical\"     )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/data_q.html","id":"correlation-between-coverage-and-mutation-discovery","dir":"Articles","previous_headings":"","what":"Correlation between coverage and mutation discovery","title":"Exploring data quality","text":"Next, can see whether limitation detect somatic mutations relevant genes sample poor quality. Indeed, plot replicates panel C Figure 1 manuscript shows direct effect:","code":"# reformat naming of the standard colors cols <- get_gambl_colours()[c(\"Schmitz\", \"Chapuy\", \"Reddy\")] names(cols) <- c(\"Schmitz, 2018\", \"Chapuy, 2018\", \"Reddy, 2017\")  # plot p <- metadata %>%     ggplot(         aes(             x = MeanCorrectedCoverage,             y = coding_mutations,             colour = study         )     ) +     geom_point(alpha = 0.5) +     scale_color_manual(values = cols) +     ylim(c(0, 1000)) +     xlim(c(0, 200)) +     theme_Morons(         base_size = 8,         my_legend_position = \"bottom\",         my_legend_direction = \"horizontal\"     )  # display density ggMarginal(     p,     type = \"density\",     groupColour = TRUE,     groupFill = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/data_q.html","id":"find-significant-differences-between-low-and-high-coverage-groups","dir":"Articles","previous_headings":"","what":"Find significant differences between low and high coverage groups","title":"Exploring data quality","text":"Next, can explore whether significant differences frequency mutations detected high low coverage. cutoff, arbitrarily selected value 25X sample considered “High” “Low” groups. reformat metadata convenient format: demonstation purposes, let’s focus set genes reported significantly mutated Reddy et al study. find genes, need search Pubmed gene lists, can convently retreive one GAMBLR.data objects: now can take look genes significantly different high low coverage groups:  ’s lot difference! can easily display information form oncoplot:","code":"mirage_meta <- metadata %>%     mutate(         good_coverage = ifelse(MeanCorrectedCoverage > 25 , \"TRUE\", \"FALSE\")     ) %>%     as.data.frame %>%     mutate(         sample_id = Tumor_Sample_Barcode,         `DNA source` = ifelse(             ffpe_or_frozen == \"ffpe\",             toupper(ffpe_or_frozen),             ffpe_or_frozen         ),         Pathology = pathology,         Study = study,         `Pairing status` = pairing_status,         Protocol = seq_type     ) genes <- GAMBLR.data::reddy_genes %>%     pull(hgnc_symbol) forest <- prettyForestPlot(     maf = maf,     genes = genes,     metadata = mirage_meta,     comparison_column = \"good_coverage\",     max_q = 0.1 ) forest$arranged # display genes in the order of decreasing difference gene_order <- forest$fisher %>%     arrange(desc(estimate)) %>%     pull(gene)   prettyCoOncoplot(     metadata = mirage_meta,     maf = maf,     comparison_column = \"good_coverage\",     label1 = paste0(         \"High coverage (>25X, N=\",         nrow(mirage_meta %>% filter(good_coverage == \"TRUE\")),         \")\"     ),     label2 = paste0(         \"Low coverage (<25X, N=\",         nrow(mirage_meta %>% filter(good_coverage == \"FALSE\")),         \")\"     ),     metadataColumns = c(         \"Pairing status\",         \"DNA source\",         \"Protocol\",         \"Study\",         \"MeanCorrectedCoverage\"     ),     numericMetadataColumns = \"MeanCorrectedCoverage\",     sortByColumns = \"MeanCorrectedCoverage\",     metadataBarHeight = 5,     metadataBarFontsize = 10,     fontSizeGene = 12,     legendFontSize = 7,     genes = gene_order,     keepGeneOrder = TRUE,     arrange_descending = TRUE,     legend_row = 2,     annotation_row = 2 )"},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/faq.html","id":"where-can-i-get-example-data-that-works-with-this-package","dir":"Articles","previous_headings":"","what":"Where can I get example data that works with this package?","title":"Frequently Asked Qestions","text":"example data types available one GAMBLR.viz dependencies (GAMBLR.data). Every function demonstrates get data ’s example, already setup automatically retreive minimal information (e.g. sample_id).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/faq.html","id":"can-i-use-my-own-colors-and-not-the-ones-the-package-offers","dir":"Articles","previous_headings":"","what":"Can I use my own colors and not the ones the package offers?","title":"Frequently Asked Qestions","text":"Absolutely! functions accept argument custom_colours list color mappings can used specify pallette.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/faq.html","id":"can-i-use-my-own-data-we-generated-in-our-lab","dir":"Articles","previous_headings":"","what":"Can I use my own data we generated in our lab?","title":"Frequently Asked Qestions","text":"Absolutely! functions accept metadata data frame mutations input, can provide outside data long formatting consistent example data.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"prepare-setup","dir":"Articles","previous_headings":"","what":"Prepare setup","title":"Easy forest plots","text":"first import necessary packages: Next, get data display. metadata expected data frame one required column: sample_id another column contain sample annotations according comparison group. example, use example data set variant calls study identified genetic subgroup Burkitt lymphoma (BL). Next, help GAMBLR.open GAMBLR.data, obtain coding mutations used plotting. Many get_ family functions return data frame mutations annotated familiar MAF format. purpose tutorial, focus small subset genes known significantly mutated BL. Now metadata mutations want explore, ready start visualizing data.","code":"# Load packages library(GAMBLR.open) library(tibble) library(dplyr) metadata <- get_gambl_metadata() %>%     filter(study == \"BL_Thomas\") maf <- get_coding_ssm(     these_samples_metadata = metadata,     tool_name = \"publication\",     projection = \"hg38\",     include_silent = FALSE )  # What does it look like? dim(maf) [1] 34453    49 head(maf) %>%     select(         Tumor_Sample_Barcode,         Hugo_Symbol,         Variant_Classification     ) genomic_data Object Genome Build: hg38 Showing first 10 rows:   Tumor_Sample_Barcode Hugo_Symbol Variant_Classification 1                Akata        CPTP      Missense_Mutation 2                Akata      FNDC10      Missense_Mutation 3                Akata       MORN1      Missense_Mutation 4                Akata       MEGF6      Missense_Mutation 5                Akata      GPR157      Missense_Mutation 6                Akata        H6PD      Missense_Mutation #genes <- lymphoma_genes_bl_v_latest$Gene genes <- GAMBLR.data::lymphoma_genes %>%     filter(BL_Tier == 1) %>%     pull(Gene) head(genes) [1] \"ARID1A\" \"BACH2\"  \"BCL6\"   \"BCL7A\"  \"BMP7\"   \"CCND3\""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"the-default-forest-plot","dir":"Articles","previous_headings":"","what":"The default forest plot","title":"Easy forest plots","text":"forest plot ready called default parameters just providing metadata data frame mutations standard maf format. example output default parameters: output function list containing following objects: - fisher: data frame detailed statistics Fisher’s test gene - mutmat: binary matrix used Fisher’s test - forest: ggplot2 object forest plot ORs Fisher’s test gene - bar: ggplot2 object wiht mutation frequencies Gene - arranged: display item forest bar plots nicely arranged side--side","code":"comparison_column <- \"EBV_status_inf\" # character of column name comparison comparison_vals <- c(\"EBV-positive\",\"EBV-negative\") fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_vals ) names(fp) [1] \"fisher\"   \"forest\"   \"bar\"      \"arranged\" \"mutmat\""},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"report-only-significant-differences","dir":"Articles","previous_headings":"","what":"Report only significant differences","title":"Easy forest plots","text":"default, genes interest reported output. Fisher’s test performed, prettyForestPlot also calculates FDR can use report significant differences providing significance cutoff parameter max_q: now can take look genes passing significance cutoff:  don’t provide set candidate genes, Fisher’s exact test applied every gene mutated least one sample, incredibly ambitious. prettyForestPlot automatically corrests multiple testing, can limit many significant associations end . , raised minimum 10 mutations excluded candidate gene restriction. can see, can lead additional differences detected.  total 18 remained significant correcting multiple tests.","code":"max_q <- 0.1 # only those qith Q value <= 0.1 will be reported fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_vals,     max_q = max_q,     base_size = 7 ) fp$arranged fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     comparison_column = comparison_column,     comparison_values = comparison_vals,     max_q = max_q,     min_mutations = nmut,     base_size = 7 ) fp$arranged num_genes = nrow(fp$fisher)"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"comparing-categories-with-more-than-two-groups","dir":"Articles","previous_headings":"","what":"Comparing categories with more than two groups","title":"Easy forest plots","text":"prettyForestPlot construcst 2x2 contingency tables run Fisher’s test find significant differences, can operate comparing 2 groups - want see difference ? handle scenario, can take advantage comparison_values parameter, used subset metadata requested groups perform testing plotting subset. Let’s see action:  plot exactly reproducing Supplemmental Figure 12D Thomas et al study!","code":"comparison_column <- \"genetic_subgroup\" # change the comparison column comparison_values <- c(\"IC-BL\", \"Q53-BL\") fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_values,     max_q = max_q,     base_size = 7 )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"separating-genes-with-hotspots","dir":"Articles","previous_headings":"","what":"Separating genes with hotspots","title":"Easy forest plots","text":"can additionally separate hotspots mutations compare separately. First, need annotate maf data, use annotate_hotspots GAMBLR family. function add new column maf named hot_spot indicating whether specific mutation hotspot region. Note GAMBLR.data version annotate_hotspots handles specific genes functionality annotate hotspots. Oh ! Looks like hotspots maf data. make sense, happened? Aha, hotspot annotation GAMBLR.data works data grch37 projection. maf hg38, ? One way lift maf data another projection using UCSC’s liftOver, GAMBLR family exactly function serves purpose: Can annotate hotspots now? Indeed, hotspots properly annotated maf correct projection. Now, can simply toggle separate_hotspots parameter perform separate comparisons within hotspots:","code":"# Annotate hotspots maf <- annotate_hotspots(maf)  # What are the hotspots? maf %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() < table of extent 0 x 0 > maf_grch37 <- liftover(     maf,     mode = \"maf\",     target_build = \"grch37\" ) %>% mutate(Chromosome = gsub(\"chr\", \"\", Chromosome)) %>% select(-hot_spot) # since it is empty we can just drop it maf_grch37 <- annotate_hotspots(maf_grch37)  # What are the hotspots? maf_grch37 %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() hot_spot Hugo_Symbol TRUE      CREBBP    1      EZH2      1      FOXO1    58      MYD88     2      STAT6     4 comparison_column <- \"EBV_status_inf\" fp <- prettyForestPlot(     metadata = metadata,     maf = maf_grch37,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_vals,     max_q = max_q,     separate_hotspots = TRUE )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/forestplot.html","id":"using-binary-matrix-as-input","dir":"Articles","previous_headings":"","what":"Using binary matrix as input","title":"Easy forest plots","text":"Sometimes might useful different input format instead maf - example, already one-hot encoded matrix feature status (.e. binary matrix). can run prettyForestPlot using input lieu MAF. also means can apply just simple somatic mutation profiles. First, let’s construct binary matrix. supplement maf non-coding mutations look aSHM regions addition coding mutations, already give us data correct projection: Now convert maf binary matrix: Next, supplement matrix non-coding mutation across aSHM regions can now combine coding non-coding features single matrix: Now can provide binary matrix prettyForestPlot regenerate Supplemmental Figure 12C Thomas et al study!","code":"maf <- get_ssm_by_samples(     these_samples_metadata = metadata ) maf$Variant_Classification %>% table .                3'Flank                  3'UTR                5'Flank                   1457                    513                   2957                  5'UTR        Frame_Shift_Del        Frame_Shift_Ins                   1102                    124                     97                    IGR           In_Frame_Del           In_Frame_Ins                    457                     40                     14                 Intron      Missense_Mutation      Nonsense_Mutation                  44397                   1859                    286       Nonstop_Mutation                    RNA                 Silent                      6                     74                    481          Splice_Region            Splice_Site Translation_Start_Site                    148                    114                     22 # Generate binary matrix coding_matrix <- get_coding_ssm_status(     these_samples_metadata = metadata,     maf_data = maf,     gene_symbols = genes,     include_hotspots = TRUE,     review_hotspots = TRUE ) # We'll use the aSHM regions defined in GAMBLR.data # Let our helper function massage it into a consistent format regions_bed = create_bed_data(somatic_hypermutation_locations_GRCh37_v0.2,                               fix_names=\"concat\",                               concat_cols=c(\"gene\",\"region\"),                               sep=\"-\")  # Generate matrix of mutations per each site ashm_matrix <- get_ashm_count_matrix(     regions_bed = regions_bed,     these_samples_metadata = metadata )  # Binarize matrix using arbitrary 3 muts/region cutoff ashm_matrix[ashm_matrix <= 3] = 0 ashm_matrix[ashm_matrix > 3] = 1 ashm_matrix <- ashm_matrix %>%     rownames_to_column(\"sample_id\") feature_matrix <- left_join(     coding_matrix,     ashm_matrix )  # Drop any fearures absent across at least 10 samples to clean any noise feature_matrix <- feature_matrix %>%     select_if(is.numeric) %>%     select(where(~ sum(. > 0, na.rm = TRUE) >= 10)) %>%     bind_cols(         feature_matrix %>% select(sample_id),         .     ) comparison_column <- \"genetic_subgroup\" comparison_values <- c(\"DGG-BL\", \"Q53-BL\") fp <- prettyForestPlot(     metadata = metadata,     mutmat = feature_matrix,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_values,     max_q = max_q )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/getting_started.html","id":"what-are-standardized-colours","dir":"Articles","previous_headings":"","what":"What are standardized colours?","title":"Metadata and GAMBLR colours","text":"First, let’s explore standardized color pallettes GAMBLR.viz. stored list one GAMBLR.viz dependencies (GAMBLR.helpers) integral part visualizations. demonstration purposes, obtain standartized colours: colours available? colour groups? Many colours conviniently provided ensure consistency independent formatting case: example, color DLBCL COO returned, color used UNCLASS, U, UNC, Unclassified etc. Just purpose guide, define simple function display colour pallettes:","code":"all_c <- get_gambl_colours(     as_dataframe = TRUE ) str(all_c) 'data.frame':   328 obs. of  3 variables:  $ group : chr  \"chromosome\" \"chromosome\" \"chromosome\" \"chromosome\" ...  $ name  : chr  \"chr1\" \"chr2\" \"chr3\" \"chr4\" ...  $ colour: chr  \"#555FAB\" \"#CE3D31\" \"#749B58\" \"#F0E584\" ... table(all_c$group) aneuploidy                BL             blood chapuy_classifier                 8                 7                15                 6        chromosome          clinical            cohort               coo                23                47                16                12       copy_number           domains               EBV                FL                17                24                 4                 3  genetic_subgroup              hmrn            indels   lacy_classifier                24                 8                 2                 8          lymphgen    lymphgenerator          mutation         pathology                14                10                15                32           pos_neg          rainfall          seq_type               sex                13                 7                 3                 6               svs              type                 2                 2 show_col <- function(data, group){     data %>%         filter(             !!sym(\"group\") == {{group}}         ) %>%         ggplot(             aes(                 x = name,                 y = 0,                 fill = colour,                 label = name             )         ) +         geom_tile(width = 0.9, height = 1) +         geom_text(color = \"white\", fontface=\"bold\") +         scale_fill_identity(guide = \"none\") +         coord_flip() +         theme_void() +         labs(title = toupper(group)) +         theme(plot.title = element_text(lineheight = 0.9,hjust=0.5,face=\"bold\")) }"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/getting_started.html","id":"hex-codes-for-b-cell-lymphomas","dir":"Articles","previous_headings":"","what":"Hex codes for B-cell lymphomas","title":"Metadata and GAMBLR colours","text":"","code":"show_col(all_c, \"pathology\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/getting_started.html","id":"hex-codes-for-genetic-subgroups","dir":"Articles","previous_headings":"","what":"Hex codes for genetic subgroups","title":"Metadata and GAMBLR colours","text":"","code":"show_col(all_c, \"genetic_subgroup\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/getting_started.html","id":"hex-codes-for-clinical-variables","dir":"Articles","previous_headings":"","what":"Hex codes for clinical variables","title":"Metadata and GAMBLR colours","text":"","code":"show_col(all_c, \"clinical\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/getting_started.html","id":"hex-codes-for-mutation-types","dir":"Articles","previous_headings":"","what":"Hex codes for Mutation types","title":"Metadata and GAMBLR colours","text":"","code":"show_col(all_c, \"mutation\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/install.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Installation","text":"recommend installing package directly GitHub (requires devtools dependency). can confirm successful installation running one popular functions: lot functionality hand-craft plot exactly way want. Interested? Read tutorials section.","code":"if (!require(\"devtools\")) install.packages(\"devtools\")  devtools::install_github(     \"morinlab/GAMBLR.viz\",     repos = BiocManager::repositories() ) library(GAMBLR.data)  maf_metadata <- get_gambl_metadata(seq_type_filter = \"genome\") %>%     dplyr::filter(pathology %in% c(\"FL\", \"DLBCL\"))  maf_data <- get_ssm_by_samples(     these_samples_metadata = maf_metadata )  #define some genes of interest fl_genes = c(\"RRAGC\", \"CREBBP\", \"VMA21\", \"ATP6V1B2\") dlbcl_genes = c(\"EZH2\", \"KMT2D\", \"MEF2B\", \"CD79B\", \"MYD88\", \"TP53\") genes = c(fl_genes, dlbcl_genes)  prettyOncoplot(     maf_df = maf_data,     genes = genes,     these_samples_metadata = maf_metadata )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"prepare-setup","dir":"Articles","previous_headings":"","what":"Prepare setup","title":"Upgrade your Oncoplots","text":"first import necessary packages: Next, get data display. metadata expected data frame one required column: Tumor_Sample_Barcode optional column want display annotation track. example, use example data set variant calls study identified genetic subgroup Follicular lymphoma (FL) associated histologic transformation DLBCL. Next, obtain coding mutations used plotting. data data frame standartized maf format. know? subset maf data frame coding mutations using prettyOncoplot. Much like tools, automatically handled display coding mutations. Now metadata mutations want explore, ready start visualizing data.","code":"# Load packages library(GAMBLR.open) library(dplyr) metadata <- get_gambl_metadata() %>%     filter(study == \"FL_Dreval\") maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" )  # How does it look like? dim(maf) [1] 44777    49 head(maf) %>%     select(         Tumor_Sample_Barcode,         Hugo_Symbol,         Variant_Classification     ) genomic_data Object Genome Build: grch37 Showing first 10 rows:   Tumor_Sample_Barcode Hugo_Symbol Variant_Classification 1             FL1001T1       AIFM1      Nonsense_Mutation 2             FL1001T1       USP24      Missense_Mutation 3             FL1001T1        LYST            Splice_Site 4             FL1001T1        GCKR      Missense_Mutation 5             FL1001T1      ORMDL1      Missense_Mutation 6             FL1001T1        BCL6      Missense_Mutation"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"the-simplest-oncoplot","dir":"Articles","previous_headings":"","what":"The simplest oncoplot","title":"Upgrade your Oncoplots","text":"number options customize oncoplot, ready use just metadata maf. example output default parameters:","code":"minMutationPercent <- 10 # only show genes mutated in at least 10% of samples prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"adding-annotation-tracks","dir":"Articles","previous_headings":"","what":"Adding annotation tracks","title":"Upgrade your Oncoplots","text":"can customize add annotation tracks informative display metadata ate interested :","code":"metadataColumns <- c(     \"pathology\",     \"lymphgen\",     \"genetic_subgroup\",     \"COO_consensus\",     \"sex\" ) prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"changing-font-sizes","dir":"Articles","previous_headings":"","what":"Changing font sizes","title":"Upgrade your Oncoplots","text":"may notice (less) genes annotations displayed oncoplot may want modify size gene names /annotation tracks labels. several parameters available : - metadataBarHeight: change height annotation tracks bottom oncoplot - metadataBarFontsize: change font size annotation tracks bottom oncoplot - fontSizeGene: change font size percentage labels right oncoplot gene names left - legendFontSize: change font size legend bottom plot Let’s see parameters action:","code":"metadataBarHeight <- 5 metadataBarFontsize <- 10 fontSizeGene <- 12 legendFontSize <- 7  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"show-samples-ordered-on-annotations","dir":"Articles","previous_headings":"","what":"Show samples ordered on annotations","title":"Upgrade your Oncoplots","text":"can notice default setting generates classic “rainfall” style plot - want add structure sort sample order way? easy parameter sortByColumns. can sort annotations use display oncoplot:  know? ordering occurs sequentially according order individual columns specified sortByColumns parameter. ordering ascending order, can toggled additional boolean parameter arrange_descending.","code":"prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"displaying-only-specific-genes","dir":"Articles","previous_headings":"","what":"Displaying only specific genes","title":"Upgrade your Oncoplots","text":"can scenarion might want diplay genes based recurrence, interest specific genes. Sure , one way pre-filter maf data genes interest. might unexpected consequences limit flexibility things, better way take advantage genes parameter:  Note Note removed minMutationPercent last function call since wanted see genes specifically requested. Now looking specific genes interest arranged decreasing order recurrence cohort. want enforce gene order oncoplot exactly specified gene variable? can take advantage keepGeneOrder parameter:","code":"fl_genes <- c(\"RRAGC\", \"CREBBP\", \"VMA21\", \"ATP6V1B2\", \"EZH2\", \"KMT2D\") dlbcl_genes <- c(\"MEF2B\", \"CD79B\", \"MYD88\", \"TP53\") genes <- c(fl_genes, dlbcl_genes)  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes ) prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     keepGeneOrder = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"grouping-genes-into-categories","dir":"Articles","previous_headings":"","what":"Grouping genes into categories","title":"Upgrade your Oncoplots","text":"can also group genes specific categories. , need named list name list element corresponds gene name, list element corresponds gene group. alreade genes variable, can convert appropriate format: Now can use split genes oncoplot groups:  know? can provide two groups genes - number groups supported long specified gene_groups. Note Within group, genes ordered decreasing order recurrence, keepGeneOrder parameter still supported specified, keep specified order within group.","code":"gene_groups <- c(     rep(\"FL\", length(fl_genes)),     rep(\"DLBCL\", length(dlbcl_genes)) ) names(gene_groups) <- genes  gene_groups RRAGC   CREBBP    VMA21 ATP6V1B2     EZH2    KMT2D    MEF2B    CD79B     \"FL\"     \"FL\"     \"FL\"     \"FL\"     \"FL\"     \"FL\"  \"DLBCL\"  \"DLBCL\"    MYD88     TP53  \"DLBCL\"  \"DLBCL\" prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"grouping-samples-into-categories","dir":"Articles","previous_headings":"","what":"Grouping samples into categories","title":"Upgrade your Oncoplots","text":"Similar grouping genes, can also group samples certain categories. Typically, done based one annotations tracks. default, labels sample category, also option specifying labels:","code":"prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\") )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"tallying-mutation-burden","dir":"Articles","previous_headings":"","what":"Tallying mutation burden","title":"Upgrade your Oncoplots","text":"Previously, noted maf data supplying prettyOncoplot subset contain coding mutations, also discouraged pre-filtering maf subset genes insterested looking . important: want layer additional information like total mutation burden per sample, subsetting filtering maf generate inaccurate misleading results. Therefore, prettyOncoplot handles ! go ahead tallying total mutation burden, just add additional parameters function call:  know? dynamic range total mutation burden big extreme outliers, bar chart top oncoplot can capped numeric value providing tally_all_mutations_max parameter. want additionally force ordering based total number mutations, nicely arranged decreasing order? can adding mutation counts one annotation tracks using sort samples:  Note modified sortByColumns parameter, provided two additional parameters numericMetadataColumns arrange_descending. know? top annotation n annotation bottom thing? Remove n legend adding hide_annotations = \"n\" remove display annotation track keeping ordering adding hide_annotations_tracks = TRUE.","code":"hideTopBarplot <- FALSE # will display TMB annotations at the top tally_all_mutations <- TRUE # will tally all mutations per sample  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations ) # Count all muts to define the order of samples total_mut_burden <- maf %>%     count(Tumor_Sample_Barcode)  head(total_mut_burden) genomic_data Object Genome Build: grch37 Showing first 10 rows:   Tumor_Sample_Barcode   n 1            01-20260T  71 2            02-13135T  98 3            02-20170T  67 4            02-22991T  53 5            03-34157T  26 6            04-24937T 146 # Add this info to metadata metadata <- left_join(     metadata,     total_mut_burden )  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"annotating-significance-of-mutation-frequencies-in-sample-groups","dir":"Articles","previous_headings":"","what":"Annotating significance of mutation frequencies in sample groups","title":"Upgrade your Oncoplots","text":"looking sample plots, can notice frequency mutations RRAGC, ATP6V1B2, VMA21 others different FL DLBCL. difference significant? Can layer diffenerence display panel? Yes can, easy GAMBLR family! first use another function GAMBLR.viz run Fisher’s test find genes significantly different FL DLBCL:  fact, genes mutated significantly different frequencies! Now let’s layer information oncoplot:","code":"fisher_test <- prettyForestPlot(     maf = maf,     metadata = metadata,     genes = genes,     comparison_column = \"pathology\",     comparison_values = c(\"DLBCL\", \"FL\"), # we have three pathologies in data     comparison_name = \"FL vs DLBCL\" ) fisher_test$arranged prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"annotating-genes-with-hotspots","dir":"Articles","previous_headings":"","what":"Annotating genes with hotspots","title":"Upgrade your Oncoplots","text":"genes mutated certain positions often others, therefore creating mutational hotspots - can layer level information oncoplot. First, need process maf data add new column called hot_spot contain boolean value showing whether particular mutation hotspot. don’t know , function exactly purpose GAMBLR.data, use example: Note GAMBLR.data version annotate_hotspots handles specific genes functionality annotate hotspots. Now, can add annotation hotspots oncoplot display toggling highlightHotspots parameter:","code":"# Annotate hotspots maf <- annotate_hotspots(maf)  # What are the hotspots? maf %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() hot_spot Hugo_Symbol TRUE      CREBBP   76      EZH2     86      FOXO1    20      MEF2B    23      MYD88    46      STAT6    51 highlightHotspots <- TRUE prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"co-oncoplot-two-plots-side-by-side","dir":"Articles","previous_headings":"","what":"Co-oncoplot: two plots side-by-side","title":"Upgrade your Oncoplots","text":"may also informative generate display panel two oncoplots displayed side--side, possible visually compare specific groups samples maintaining annotations ordering built far. purpose, GAMBLR.viz another function pretty family: prettyCoOncoplot. accepts parameters prettyOncoplot addition unique additions. example, lets break sample oncoplot created far genetic_subgroup see cFL compares dFL: Note possible display two groups side--side. metadata column want split contains groups, specific values can specified comparison_values parameter. know? Notice need create individual maf metadata objects supply prettyCoOncoplot - objects used also supported , specified differen parameters metadata maf. example, forced order genes exaclty specified gene displayed row oncoplots, othervise wold row due different frequencies group. addition specifying parameter, also enforced specific number rows legend plot, nicely align display items.","code":"prettyCoOncoplot(     metadata = metadata,     maf = maf,     comparison_column = \"genetic_subgroup\",     label1 = \"cFL\",     label2 = \"dFL\",     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     keepGeneOrder = TRUE,     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots,     legend_row = 2,     annotation_row = 2 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/oncoplot.html","id":"using-oncoplot-in-multi-panel-figure","dir":"Articles","previous_headings":"","what":"Using oncoplot in multi-panel figure","title":"Upgrade your Oncoplots","text":"arranging items multi-panel figure preparing manuscript experiment report, may needed use generated oncoplot page display items. prettyOncoplot (, therefore, prettyCoOncoplot), handles ComplexHeatmap hood generate graphics, readily available combined plots generated tools, example ggplot2. readily available - definitely impossible! output prettyCoOncoplot directly compatible arrangement multi-panel figure since uses trick shown hood put two panels side--side, otuput prettyOncoplot ComplexHeatmap object needs extra steps allow multi-panel arrangement. First, lets store returned oncoplot variable: Next, import packages needed handle trick: , capture display oncoplot: Now, ready us arrange multi-panel figure. can use forest plot already looked example, put right oncoplot: Final note: nice genes forest plot directly aligned genes displayed oncoplot, can providing consistent ordering adding white space forest plot match height oncoplot:","code":"my_oncoplot <- prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots ) library(ComplexHeatmap) # to handle the ComplexHeatmap object library(ggpubr) # to arrange multiple panels my_oncoplot = grid.grabExpr(     draw(my_oncoplot),     width = 10,     height = 17 ) multipanel_figure <- ggarrange(     my_oncoplot, # left panel     fisher_test$arranged, # right panel     widths = c(1.5, 1), # so the oncoplot is a little wider than the forest     labels = c(\"A\", \"B\"), # labels for the panels     font.label = list( # make labels bold face         color = \"black\",         face = \"bold\"     ) )  multipanel_figure my_oncoplot <- prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = rev(fisher_test$fisher$gene),     keepGeneOrder = TRUE,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots )  my_oncoplot = grid.grabExpr(     draw(my_oncoplot),     width = 10,     height = 17 )  multipanel_figure <- ggarrange(     my_oncoplot, # left panel     ggarrange( # right panel         NULL, # empty space at the top         fisher_test$arranged, # forest on the top         NULL, # empty space at the bottom         nrow = 3, # arrange vertically         heights = c(0.1, 2.5, 1) # match height of the oncoplot     ),     widths = c(1.5, 1), # so the oncoplot is a little wider than the forest     labels = c(\"A\", \"B\"), # labels for the panels     font.label = list( # make labels bold face         color = \"black\",         face = \"bold\"     ) )  multipanel_figure"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/recap_figures.html","id":"prepare-setup","dir":"Articles","previous_headings":"","what":"Prepare setup","title":"Reproducing figures from GAMBL papers","text":"first import necessary packages: Next, use standard color pallette store variable easy access: Finally, set consistent GAMBLR-specific ggplot theme tutorial:","code":"# Load library(readxl) library(ComplexHeatmap) library(ggbeeswarm) library(ggpubr) library(GAMBLR.open) library(tidyverse) colors <- get_gambl_colours() theme_set(theme_Morons())"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/recap_figures.html","id":"differential-gene-expression-between-fl-subgroups","dir":"Articles","previous_headings":"","what":"Differential gene expression between FL subgroups","title":"Reproducing figures from GAMBL papers","text":"Figure 4A Dreval et al shows differential gene expression CREBBP, FOXP1, MYC genetic subgroups FL described paper. can regenerate confirm published results demonstate easy work GAMBLR.viz. Next, can take advantage publicly available gene expression data access directly. data provided ENSEMBL identifiers, need make conversion human-readable ENSEMBL identifiers. need search linkage direcly available GAMBLR family: Now can access gene expression data prepare plotting Now can perform statistical comparisons find differences gene expression: Plot!","code":"# Get metadata metadata <- get_gambl_metadata() %>%     filter(         study == \"FL_Dreval\",         pathology %in% c(\"FL\", \"DLBCL\")     ) identifiers <- grch37_gene_coordinates %>%     filter(gene_name %in% c(\"CREBBP\", \"FOXP1\", \"MYC\")) %>%     select(ensembl_gene_id, gene_name) # get gene expression expression <- read_tsv(         \"https://www.bcgsc.ca/downloads/morinlab/cFL_Blood_2023_GE.tsv.gz\"     ) %>%     filter(ensembl_gene_id %in% identifiers$ensembl_gene_id) %>%     # add human-readable identifiers     left_join(         identifiers,         .     )  expression <- expression %>%     # convert to long format     pivot_longer(         !c(ensembl_gene_id, gene_name),         names_to = \"sample_id\",         values_to = \"expression\"     ) %>%     # add genetic metadata labels     left_join(         .,         metadata %>%             select(sample_id, pathology, genetic_subgroup)     ) %>%     # prepare grouping label and set consistent level order     mutate(         comp_group = ifelse(             pathology == \"DLBCL\",             pathology,             genetic_subgroup         ),         comp_group = factor(             comp_group,             levels = c(\"DLBCL\", \"dFL\", \"cFL\")         )     ) %>%     drop_na() pwc <- expression %>%     group_by(gene_name) %>%     rstatix::wilcox_test(         expression ~ comp_group     )  # Add coordinates for position of brackets pwc <- pwc %>%     rstatix::add_xy_position(x = \"comp_group\") p <- expression %>%     ggplot(         aes(             x = comp_group,             y = expression,             color = comp_group         )     ) +     geom_boxplot() +     geom_quasirandom() +     stat_pvalue_manual(         pwc,         hide.ns = TRUE,         size = 8,         label = \"p.adj.signif\"     ) +     facet_grid(cols = vars(gene_name)) +     scale_color_manual(values = colors) +     ylab(\"Expression\") +     theme(         axis.title.x = element_blank()     )  p"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/recap_figures.html","id":"differentially-mutated-genes-between-dlbcl-and-fl","dir":"Articles","previous_headings":"","what":"Differentially mutated genes between DLBCL and FL","title":"Reproducing figures from GAMBL papers","text":"paper Dreval et al showed Supplemental Figure 1B genes mutated differential frequencies FL DLBCL. can also easily regenerate plot:","code":"# First obtain maf data maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" )  # The Plot! p <- prettyForestPlot(     maf = maf,     metadata = metadata,     comparison_column = \"pathology\",     comparison_values = c(\"DLBCL\", \"FL\"),     max_q = 0.1,     genes = c(lymphoma_genes$Gene, \"VMA21\") )  p$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/articles/recap_figures.html","id":"patterns-of-mutations-at-common-ashm-target-sites","dir":"Articles","previous_headings":"","what":"Patterns of mutations at common aSHM target sites","title":"Reproducing figures from GAMBL papers","text":"study FL Dreval et al Supplemental Figure 4A demonstrated important visualization patterns mutations common aSHM target sites across DLBCL FL comparing tumors discovery cohort. can recapitulate figure tutorial using data bundled GAMBLR visualization functions available GAMBLR.viz. First, retreive metadata exactly provided paper: also want ensure consistent ordering Analysis cohort annotation track associated heatmap. default, values sorted alphabetically, set ordering informed biologically converting column factor: now also collect mutations samples: Now, need bed-formatted data frame coordinates regions interest. use aSHM regions GAMBLR, use version used original paper: Now, can plot heatmap mutations using GAMBLR.viz function prettyMutationDensity:","code":"# Read supplemental table from that paper metadata <- read_xlsx(     system.file(         \"extdata\",         \"studies/FL_Dreval.xlsx\",         package = \"GAMBLR.data\"     ) )  # What is provided in the supplemental table? colnames(metadata) [1] \"Patient barcode\"           \"Pairing status\"  [3] \"Genome sample id\"          \"Normal sample id\"  [5] \"Sex\"                       \"Age at diagnosis\"  [7] \"Pathology\"                 \"FL grade\"  [9] \"Analysis cohort\"           \"Tumor biopsy\" [11] \"Reference\"                 \"MYC FISH BA\" [13] \"BCL2 FISH BA\"              \"BCL6 FISH BA\" [15] \"MYC WGS Tx\"                \"BCL2 WGS Tx\" [17] \"BCL6 WGS Tx\"               \"Tumor purity\" [19] \"total N of SSM\"            \"PGA\" [21] \"Analysis\"                  \"cFL/dFL label\" [23] \"SeqType\"                   \"AverageBaseQuality\" [25] \"AverageInsertSize\"         \"AverageReadLength\" [27] \"PairsOnDiffCHR\"            \"TotalReads\" [29] \"TotalUniquelyMapped\"       \"TotalUnmappedreads\" [31] \"TotalDuplicatedreads\"      \"ProportionReadsDuplicated\" [33] \"ProportionReadsMapped\"     \"MeanCorrectedCoverage\" [35] \"ProportionCoverage10x\"     \"ProportionCoverage30x\" # Select and rename columns that we need for heatmap metadata <- metadata %>%     select(         sample_id = `Genome sample id`,         `Analysis cohort`,         \"BCL2 Status\" = `BCL2 WGS Tx`     ) %>%     mutate(         # convert from boolean to character         `BCL2 Status` = ifelse(`BCL2 Status`, \"POS\", \"NEG\"),         # adding seq type for compatibility with plotting         seq_type = \"genome\"     ) metadata <- metadata %>%     mutate(         `Analysis cohort` = factor(             `Analysis cohort`,             levels = c(                 \"denovo-DLBCL\",                 \"no-HT\",                 \"pre-HT\",                 \"post-HT\",                 \"COM\"             )         )     ) maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" ) some_regions <- somatic_hypermutation_locations_GRCh37_v0.2 %>%     select(1:4) %>%     rename(         \"chrom\" = \"chr_name\",         \"start\" = \"hg19_start\",         \"end\" = \"hg19_end\",         \"name\" = \"gene\"     ) %>%     mutate(chrom = str_remove(chrom, \"chr\"))  #set factor ordering for later some_regions$name <- factor(     some_regions$name,     levels = sort(unique(some_regions$name)) ) ashm_heatmap <- prettyMutationDensity(     these_samples_metadata = metadata,     maf_data = maf,     cluster_samples = FALSE,     regions_bed = some_regions,     min_bin_recurrence = 10,     region_fontsize = 5,     window_size = 1000,     slide_by = 500,     orientation = \"sample_columns\",     sortByMetadataColumns = c(\"Analysis cohort\", \"BCL2 Status\"),     metadataColumns = c(\"BCL2 Status\", \"Analysis cohort\"),     backgroundColour = \"white\",     customColours = list(         \"Analysis cohort\" = get_gambl_colours(),         \"BCL2 Status\" = get_gambl_colours(\"clinical\")     ),     returnEverything = TRUE )  ComplexHeatmap::draw(     ashm_heatmap$heatmap_object,     heatmap_legend_side = \"bottom\",     annotation_legend_side = \"bottom\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ryan Morin. Author. Kostiantyn Dreval. Author, maintainer. Laura Hilton. Author. Adam Mattsson. Author. Vladimir Souza. Author.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morin R, Dreval K, Hilton L, Mattsson , Souza V (2025). GAMBLR.viz: Make Plots Genomic Analysis Mature B-cell Lymphomas R. R package version 1.3, https://morinlab.github.io/GAMBLR.viz/.","code":"@Manual{,   title = {GAMBLR.viz: Make Plots for Genomic Analysis of Mature B-cell Lymphomas in R},   author = {Ryan Morin and Kostiantyn Dreval and Laura Hilton and Adam Mattsson and Vladimir Souza},   year = {2025},   note = {R package version 1.3},   url = {https://morinlab.github.io/GAMBLR.viz/}, }"},{"path":"https://morinlab.github.io/GAMBLR.viz/index.html","id":"gamblrviz","dir":"","previous_headings":"","what":"Make Plots for Genomic Analysis of Mature B-cell Lymphomas in R","title":"Make Plots for Genomic Analysis of Mature B-cell Lymphomas in R","text":"Collection functions make plots Genomic Analysis Mature B-cell Lymphomas R. detailed information install, bundled resources, functionality overview, tutorials, frequently asked questions much please visit website morinlab.github.io/GAMBLR.viz","code":""},{"path":[]},{"path":"https://morinlab.github.io/GAMBLR.viz/index.html","id":"cloning-repo-for-the-code-development","dir":"","previous_headings":"","what":"Cloning repo for the code development","title":"Make Plots for Genomic Analysis of Mature B-cell Lymphomas in R","text":"easiest way obtain contribute GAMBLR.viz via cloning repository R editor choice, set working directory place just cloned repo. Install package R running following command (requires devtools package) GAMBL users (GAMBLRs, speak) rely functionality package, Master branch protected. commits must submitted via pull request branch. Please refer GAMBL documentation details .","code":"cd git clone git@github.com:morinlab/GAMBLR.viz.git setwd(\"~/GAMBLR.viz\") devtools::install()"},{"path":"https://morinlab.github.io/GAMBLR.viz/index.html","id":"function-conflicts","dir":"","previous_headings":"","what":"Function conflicts","title":"Make Plots for Genomic Analysis of Mature B-cell Lymphomas in R","text":"package relies use functions (e.g. get_gambl_metadata(), get_coding_ssm() etc) exist 2 different versions: GAMBLR.data users access GSC GAMBLR.results Morin Lab users access GSC. contribution relies use functions, please follow 2 steps: prepend function use <package>:: (example, <package>::function()), add corresponding package @import section function Following steps ensure correct usage proper function depending package loaded session avoid functionality conflicts.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"Generates colourful multi-panel overview hypermutation regions interest across many samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"","code":"ashm_multi_rainbow_plot(   regions_bed,   these_samples_metadata,   this_seq_type = \"genome\",   custom_colours,   classification_column = \"lymphgen\",   maf_data,   projection = \"grch37\",   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"regions_bed Bed file chromosome coordinates, contain columns chr, start, end, name (exact names). required selecting many common regions; bonus regions also exist grch37. these_samples_metadata metadata file already subsetted arranged order want samples vertically displayed. this_seq_type seqtype want results back `maf_data` provided. custom_colours Provide named vector (named list vectors) containing custom annotation colours want use standardized pallette. classification_column Optional. Override default column assigning labels used colouring figure. maf_data already loaded maf. provided, function call `get_ssm_by_region`, using regions supplied `regions_bed`. Ensure maf matches genome projection. projection Provide genome build; default grch37. Bonus regions available grch37. verbose Set FALSE prevent printing full regions bed file console. Default TRUE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"input function bed-file following columns; chr, start, end, name. Note function work, column names must exactly . user also needs specify vector names (`regions_to_display`) control regions displayed returned plot. also possible exclude specific classifications metadata file. achieved `exclude_classifications`. addition user can also use `metadata` parameter use already subset arranged metadata table. function try obtain mutations internally `maf_data` given. info, refer parameter descriptions function.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_multi_rainbow_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASHM Multi-panel Rainbow Plot — ashm_multi_rainbow_plot","text":"","code":"suppressMessages(library(GAMBLR.open)) #get lymphgen colours lymphgen_colours = GAMBLR.helpers::get_gambl_colours(\"lymphgen\")  metadata = suppressMessages(GAMBLR.open::get_gambl_metadata()) %>%            dplyr::filter(pathology==\"DLBCL\",                  seq_type==\"genome\") %>%            check_and_clean_metadata(.,duplicate_action=\"keep_first\") %>%           dplyr::arrange(lymphgen) #> Duplicate rows (keeping first occurrence) for 'sample_id' and 'seq_type' have been dropped. regions_bed = GAMBLR.utils::create_bed_data(grch37_ashm_regions,                               fix_names = \"concat\",                               concat_cols = c(\"gene\",\"region\")) regions_bed = dplyr::filter(regions_bed,grepl(\"BCL6\",name)) ashm_multi_rainbow_plot(regions_bed,                         metadata,                         custom_colours = lymphgen_colours,                         verbose = TRUE) #> [1] \"ashm_multi_rainbow_plot\" #> [1] \"regions_bed provided\" #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>   chrom     start       end             name       region regulatory_comment #> 1     3 187458526 187464632          BCL6TSS          TSS               <NA> #> 2     3 187615533 187625659 BCL6Intergenic-1 Intergenic-1               <NA> #> 3     3 187625659 187638101 BCL6Intergenic-2 Intergenic-2               <NA> #> 4     3 187657518 187665996 BCL6Intergenic-3 Intergenic-3               <NA> #> 5     3 187675741 187690717 BCL6Intergenic-4 Intergenic-4               <NA> #> 6     3 187690717 187705000 BCL6Intergenic-5 Intergenic-5               <NA> #> [1] \"get_ssm_by_regions\" #> Using the bundled SSM calls (.maf) calls in GAMBLR.data... #> Using the bundled SSM calls (.maf) calls in GAMBLR.data... #> Running in default mode of any... #> genomic_data Object #> Genome Build: grch37  #> Showing first 10 rows: #>       start sample_id      region_name #> 1 187620119  OCI-Ly10 BCL6Intergenic-1 #> 2 187622610  SU-DHL-4 BCL6Intergenic-1 #> 3 187615657  FL1003T2 BCL6Intergenic-1 #> 4 187616207  SP116648 BCL6Intergenic-1 #> 5 187616296  SP116659 BCL6Intergenic-1 #> 6 187616515 96-31596T BCL6Intergenic-1 #> # A tibble: 6 × 8 #>   COO_consensus DHITsig_consensus EBV_status_inf Tumor_Sample_Barcode age_group #>   <chr>         <chr>             <chr>          <chr>                <chr>     #> 1 UNCLASS       DHITsigNeg        NA             01-14774_tumorB      Other     #> 2 ABC           DHITsig-IND       NA             01-23117_tumorB      Other     #> 3 ABC           DHITsigNeg        NA             04-14093_tumorB      Other     #> 4 UNCLASS       DHITsigNeg        NA             04-24061_tumorB      Other     #> 5 UNCLASS       DHITsigPos        NA             05-22052             Other     #> 6 UNCLASS       DHITsigPos        NA             05-22052T            Other     #> # ℹ 3 more variables: bam_available <lgl>, cohort <chr>, compression <chr> #> Joining with `by = join_by(sample_id)` #> Joining with `by = join_by(start)` #> Joining with `by = join_by(sample_id)` #> genomic_data Object #> Genome Build:  #> Showing first 10 rows: #>       start sample_id      region_name COO_consensus DHITsig_consensus #> 1 187620119  OCI-Ly10 BCL6Intergenic-1           ABC        DHITsigNeg #> 2 187622610  SU-DHL-4 BCL6Intergenic-1           GCB        DHITsigPos #> 3 187615657  FL1003T2 BCL6Intergenic-1           GCB        DHITsigPos #> 4 187616207  SP116648 BCL6Intergenic-1          <NA>                NA #> 5 187616296  SP116659 BCL6Intergenic-1          <NA>                NA #> 6 187616515 96-31596T BCL6Intergenic-1       UNCLASS        DHITsigNeg #>   EBV_status_inf Tumor_Sample_Barcode age_group bam_available #> 1   EBV-negative             OCI-Ly10     Other          TRUE #> 2   EBV-negative             SU-DHL-4     Other          TRUE #> 3           <NA>             FL1003T2     Other          TRUE #> 4           <NA>             SP116648     Other          TRUE #> 5           <NA>             SP116659     Other          TRUE #> 6           <NA>            96-31596T     Other          TRUE #>               cohort #> 1   DLBCL_cell_lines #> 2   DLBCL_cell_lines #> 3          FL_Kridel #> 4         DLBCL_ICGC #> 5         DLBCL_ICGC #> 6 DLBCL_GenomeCanada #> [1] \"plotting\" #> [1] \"done\"   #build plot if (FALSE) { # \\dontrun{ ashm_multi_rainbow_plot(regions_to_display = c(\"BCL2-TSS\",                                                \"MYC-TSS\",                                                \"SGK1-TSS\",                                                \"IGL\"),                         custom_colours = lymphgen_colours,                         this_seq_type = \"genome\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ASHM Rainbow Plot — ashm_rainbow_plot","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"Make rainbow plot mutations region, ordered coloured metadata.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"","code":"ashm_rainbow_plot(   mutations_maf,   metadata,   exclude_classifications,   drop_unmutated = FALSE,   classification_column,   bed,   region,   custom_colours,   hide_ids = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"mutations_maf data frame containing mutations (MAF format) within region interest (.e. use get_ssm_by_region). metadata data frame sample_id column. exclude_classifications Optional argument excluding specific classifications metadeta file. drop_unmutated Boolean argument removing unmutated sample ids mutated cases. classification_column name metadata column use ordering colouring samples. bed Optional data frame specifying regions annotate (required columns: start, end, name). region Genomic region plotting bed format. custom_colours Provide named vector (named list vectors) containing custom annotation colours want use standartized pallette. hide_ids Boolean argument, TRUE, ids removed.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"ggplot2 object","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"function creates rainbow plot mutations region. Region can either specified `region` parameter, user can provide maf already subset region(s) interest `mutation_maf`. third alternative, regions can also specified bed file `bed`. Lastly, function variety parameters can used customize returned plot many different ways. Refer parameter descriptions, examples well vignettes demonstrations function can called.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/ashm_rainbow_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASHM Rainbow Plot — ashm_rainbow_plot","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #basic usage this_region = \"chr6:90975034-91066134\" metadata = get_gambl_metadata() metadata = check_and_clean_metadata(metadata,            duplicate_action =\"keep_first\") ashm_rainbow_plot(metadata = metadata,                   region = this_region) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/categorize_CN_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","title":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","text":"Categorize arm-level chromosomal CNV events","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/categorize_CN_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","text":"","code":"categorize_CN_events(pretty_CN_heatmap_output)"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/categorize_CN_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","text":"pretty_CN_heatmap_output output running pretty_CN_heatmap function","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/categorize_CN_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","text":"List data frames","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/categorize_CN_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize arm-level and chromosomal CNV events — categorize_CN_events","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open) meta = get_gambl_metadata() meta = check_and_clean_metadata(meta,duplicate_action=\"keep_first\")  all_segments = get_cn_segments(these_samples_metadata = meta)  all_states_binned = segmented_data_to_cn_matrix(                                  seg_data = all_segments,                                  strategy=\"auto_split\",                                  n_bins_split=500,                                  these_samples_metadata = meta) labelTheseGenes = c(\"REL\",\"TP53\") cn_out = pretty_CN_heatmap(cn_state_matrix=all_states_binned,     scale_by_sample = TRUE,     these_samples_metadata = meta,     metadataColumns = c(\"pathology\",\"seq_type\"),     return_data = TRUE)      aneuploidies = categorize_CN_events(cn_out)  select(aneuploidies,1:5) %>% head()  } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/circular_CN_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Circular overview of copy number data across a cohort — circular_CN_plot","title":"Circular overview of copy number data across a cohort — circular_CN_plot","text":"Circular overview copy number data across cohort","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/circular_CN_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circular overview of copy number data across a cohort — circular_CN_plot","text":"","code":"circular_CN_plot(   pretty_CN_heatmap_output,   ideogram = TRUE,   track_height = 0.1,   min_correlation = 0.35,   max_neg_correlation = -0.06,   del_col = \"#0000FF80\",   gain_col = \"#FF000080\",   calculate_correlations = FALSE,   link_transparency = 0.8,   labelTheseGenes = c(\"CD58\", \"TLR2\", \"MCL1\", \"CDKN2A\", \"TMEM30A\", \"RHOA\", \"B2M\", \"PTEN\",     \"FAS\", \"ETV6\", \"GRB2\", \"FCGR2B\", \"CCND3\", \"CUX1\", \"MIR17HG\", \"TFPT\", \"CD274\", \"JAK2\",     \"CDK14\", \"BCL6\", \"EZH2\", \"HIST1H1E\", \"REL\", \"NOL9\", \"TNFRSF14\", \"TOX\", \"TP53\", \"RB1\",     \"TCF4\", \"HNRNPD\", \"BCL2\", \"NFKBIZ\", \"TNFAIP3\", \"PRDM1\", \"CD70\", \"MYC\") )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/circular_CN_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circular overview of copy number data across a cohort — circular_CN_plot","text":"pretty_CN_heatmap_output Output [GAMBLR.results::pretty_CN_heatmap] call. ideogram Logical value indicating whether plot ideogram. Default TRUE. track_height Change increase/decrease height tracks. (0.1) min_correlation Minimum correlation consider plotting links max_neg_correlation Maximum negative value correlations <1 consider plotting links del_col Optionally specify different colour use CNV deletion track gain_col Optionally specify different colour use CNV gain track calculate_correlations Experimental! Calculate correlation CNVs different chromosomes link highly correlated regions link_transparency Specify different alpha increase decrease transparency links labelTheseGenes Specify vector gene names label plot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/circular_CN_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circular overview of copy number data across a cohort — circular_CN_plot","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/circular_CN_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circular overview of copy number data across a cohort — circular_CN_plot","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open) meta = get_gambl_metadata() meta = check_and_clean_metadata(meta,duplicate_action=\"keep_first\") print(\"pretty_CN_heatmap\")   all_segments = get_cn_segments(these_samples_metadata = meta) all_states_binned = segmented_data_to_cn_matrix(                                  seg_data = all_segments,                                  strategy=\"auto_split\",                                  n_bins_split=500,                                  these_samples_metadata = meta) labelTheseGenes = c(\"REL\",\"TP53\") CN_out = pretty_CN_heatmap(cn_state_matrix=all_states_binned,                            these_samples_metadata = meta,                            return_data = TRUE,                            labelTheseGenes = labelTheseGenes)  circular_CN_plot(CN_out) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":null,"dir":"Reference","previous_headings":"","what":"sample-level SV/SSM/CN reports in PDF — comp_report","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"Construct pdf sample-level plots, using minimum arguments","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"","code":"comp_report(   this_sample_id,   export_individual_plots = FALSE,   out = \"./\",   seg_data,   seg_path = NULL,   maf_data,   maf_path = NULL,   this_seq_type = \"genome\",   projection = \"grch37\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"this_sample_id Sample ID plotted report. export_individual_plots Boolean parameter, set TRUE export individual plots. Path output folder. default working directory. seg_data Optional parameter copy number df already loaded R. seg_path Optional parameter path external cn file. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". projection Specify projection want returned plots reference . Possible values \"grch37\" \"hg38\". Default grch37.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"Nothing.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"function runs complete collection `fancy_x_plots` specific sample ID (`this_sample`), default parameters. generated plots put together two-page PDF. addition, also possible export individual plots. can done setting `export_individual_plots` TRUE. also possible use already loaded seg file instead using `this_sample_id` parameter, done `seg_data` `maf_data` parameters. Similarly, can also point function local file disk `seg_path` `maf_path` parameters.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/comp_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sample-level SV/SSM/CN reports in PDF — comp_report","text":"","code":"if (FALSE) { # \\dontrun{ # create a PDF report for one sample, as well as exporting all  # individual plots. comp_report(this_sample_id = \"HTMCP-01-06-00422-01A-01D\",             out = \"./\",             export_individual_plots = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"CN VAF Plot — copy_number_vaf_plot","title":"CN VAF Plot — copy_number_vaf_plot","text":"Create genome-wide copy number plot one sample (optionally) display mutation VAF.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CN VAF Plot — copy_number_vaf_plot","text":"","code":"copy_number_vaf_plot(   this_sample_id,   just_segments = FALSE,   coding_only = FALSE,   one_chrom,   genes_to_label,   this_seq_type = \"genome\",   from_flatfile = TRUE,   use_augmented_maf = TRUE,   add_chr_prefix = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CN VAF Plot — copy_number_vaf_plot","text":"this_sample_id sample_id sample plot. just_segments Specify whether segments plotted (instead mutation VAF). Default FALSE. coding_only Optional. Set TRUE restrict plotting coding mutations. one_chrom Subset plot one chromosome. genes_to_label Optional. Provide vector genes label (mutated). Can used coding_only (see ). this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". from_flatfile set true function use flatfiles instead database. use_augmented_maf Boolean statement use augmented maf, default TRUE. add_chr_prefix TRUE, \"chr\" prefix added chr column. Default FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CN VAF Plot — copy_number_vaf_plot","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CN VAF Plot — copy_number_vaf_plot","text":"function takes sample ID internally calls [GAMBLR::assign_cn_to_ssm] get copy number segments plotting. plot visualizing mutation VAFs per default, can turned setting `just_segments` TRUE. plots segments. user can also restrict plotted segments coding regions. , set `coding_only= TRUE`, specify genes interest (coding regions) `genes_to_label` (vector genes).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/copy_number_vaf_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CN VAF Plot — copy_number_vaf_plot","text":"","code":"if (FALSE) { # \\dontrun{ #build plot copy_number_vaf_plot(this_sample_id = \"DOHH-2\")  #coding only copy_number_vaf_plot(this_sample_id = \"DOHH-2\",                      coding_only = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Alignment Metrics — fancy_alignment_plot","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"Visualize (stacked barplot) genomic read-subsets (metrics) across selection samples.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"","code":"fancy_alignment_plot(   these_sample_ids,   metadata,   these_samples_metadata,   comparison_group,   seq_type = \"genome\",   add_mean = TRUE,   add_corrected_coverage = TRUE,   keep_cohort,   keep_pathology,   this_color_palette = c(TotalReads = \"#3D405B\", TotalUniquelyMapped = \"#81B29A\",     TotalDuplicatedreads = \"#E07A5F\"),   plot_sub = \"\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"these_sample_ids Data frame sample IDs (plotted) first column. metadata Optional argument, used derive sample IDs sample_table Null. these_samples_metadata GAMBL metadata subset cases want process. comparison_group Optional argument plotting mean alignment metrics. Default plotting mean samples provided. parameter takes vector sample IDs. seq_type Subset qc metrics specific seq_type, default genome. add_mean Set TRUE superimpose mean values plotted variables. Default TRUE. add_corrected_coverage Set TRUE add corrected coverage selected samples. keep_cohort df sample IDs supplied (these_sample_ids = NULL) function returns metadata subsets selected cohorts. keep_pathology df sample IDs supplied (these_sample_ids = NULL) function returns metadata subsets selected pathology. this_color_palette Optional parameter holds selected colours plotted bars. plot_sub Optional parameter, add subtitle alignment metric plot.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"function available plotting relevant alignment metrics (read-subsets) selection samples. Per default, plot returns following read-metrics; total n reads, total n uniquely mapped reads, total n duplicated reads. plot can also superimposed read metrics additional samples, allowing easy comparisons different sample populations. run function, simply specify sample IDs interested `these_sample_ids`. parameter expects data frame sample IDs first column. Optionally, user can also provide already subset (sample IDS interest) metadata table `these_samples_metadata`. adding comparison group returned plot, simply give another cohort/set samples `comparison_group` parameter. Similarly `these_sample_ids`, parameter also expects data frame sample IDs first column. addition, plot can also add additional read-metrics mean values plotted metrics corrected coverage. enable features, simply set `add_mean` `add_corrected_coverage` TRUE (default).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_alignment_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Alignment Metrics — fancy_alignment_plot","text":"","code":"#load packages if (FALSE) { # \\dontrun{ library(dplyr) library(GAMBLR.data)  #get sample IDs for available genome samples genome_collated = collate_results(seq_type_filter = \"genome\") %>%   pull(sample_id)  #subset the collated samples on BL samples my_samples = get_gambl_metadata() %>%   dplyr::filter(sample_id %in% genome_collated) %>%   dplyr::filter(pathology == \"BL\") %>% pull(sample_id)  fancy_alignment_plot(these_sample_ids = my_samples) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Number states barplot — fancy_cnbar","title":"Copy Number states barplot — fancy_cnbar","text":"Plot sample-specific CN states affected bases segment","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Number states barplot — fancy_cnbar","text":"","code":"fancy_cnbar(   this_sample_id,   seg_data,   seg_path = NULL,   chrom_col = 2,   start_col = 3,   end_col = 4,   cn_col = 7,   plot_title = paste0(this_sample_id),   plot_subtitle =     \"n CNV Segments (barplots, left y-axis), n Affected bases for each CN state\",   chr_select = paste0(\"chr\", c(1:22)),   cutoff = 15,   include_cn2 = TRUE,   this_seq_type = \"genome\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Number states barplot — fancy_cnbar","text":"this_sample_id Sample plotted. seg_data Optional parameter copy number df already loaded R. seg_path Optional parameter path external cn file. chrom_col Index column chromosome annotations (used either maf_data maf_path). start_col Index column copy number start coordinates (used either maf_data maf_path). end_col Index column copy number end coordinates (used either maf_data maf_path). cn_col Index column holding copy number information (used either maf_data maf_path). plot_title Title plot (default sample ID). plot_subtitle Subtitle created plot. chr_select Vector chromosomes included plot, defaults autosomes. cutoff Set threshold maximum CN state retrieved. include_cn2 Optional boolean statement including CN = 2 states plot. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Number states barplot — fancy_cnbar","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Number states barplot — fancy_cnbar","text":"`fancy_cnbar` visualizes copy number (CN) states sample-level. Similarly fancy_x_plots function accepts either sample ID, function get copy number states [GAMBLR::get_sample_cn_segments]. function can also accept already loaded seg file given `seg_data` parameter. can also load seg file `seg_path` parameter. user calls either `seg_data` `seg_path`, collection parameters available specifying relevant columns given data frame (`chrom_col`, `starat_col`, `end_col`, `cn_col`). also possible restrict returned plot given chromosome. done `chr_select` parameter (default autosomes). control returned plot, also possible set threshold maximum CN states returned (default 15). `include_cn2` (Boolean) user can control CN segments = 2 added plot, default TRUE. user can also control annotations returned plot `plot_title` `plot_subtitle`. Lastly, function also computes number affected bases copy number state plots values secondary y-axis (right), useful overviewing extent copy number state, context full genome.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_cnbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Number states barplot — fancy_cnbar","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #Return a plot for one sample, with default parameters. fancy_cnbar(this_sample_id = \"DOHH-2\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":null,"dir":"Reference","previous_headings":"","what":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"Generate sample-level ideogram copy number information, ssm gene annotations, etc.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"","code":"fancy_ideogram(   this_sample_id,   gene_annotation,   seg_data,   seg_path = NULL,   maf_data,   maf_path = NULL,   variant_type_col_maf = 10,   chromosome_col_maf = 5,   start_col_maf = 6,   end_col_maf = 7,   chrom_col_seg = 2,   start_col_seg = 3,   end_col_seg = 4,   cn_col_seg = 7,   plot_title = paste0(this_sample_id),   plot_subtitle = \"Genome-wide Ideogram (grch37).\",   intersect_regions,   include_ssm = TRUE,   ssm_count = TRUE,   coding_only = FALSE,   this_seq_type = \"genome\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"this_sample_id Sample plotted (multiple samples, see fancy_multisample_ideogram. gene_annotation Annotate ideogram set genes. genes can either specified vector characters data frame. seg_data Optional parameter copy number df already loaded R. seg_path Optional parameter path external seg like file. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. variant_type_col_maf Index column holding Variant Type (used either maf_data maf_path). chromosome_col_maf Index column holding Chromosome (used either maf_data maf_path). start_col_maf Index column variant start coordinates (used either maf_data maf_path). end_col_maf Index column variant end coordinates (used either maf_data maf_path). chrom_col_seg Index column chromosome annotations (used either maf_data maf_path). start_col_seg Index column copy number start coordinates (used either maf_data maf_path). end_col_seg Index column copy number end coordinates (used either maf_data maf_path). cn_col_seg Index column holding copy number information (used either maf_data maf_path). plot_title Title plot (default sample ID). plot_subtitle Optional argument plot subtitle. intersect_regions Optional parameter subset variant calls specific regions. either vector characters (chr:start-end) data frame regions. include_ssm Set TRUE plot SSMs (dels ins). ssm_count Optional parameter summarize n variants per chromosome, inlcude_ssm must set TRUE. coding_only Optional. Set TRUE restrict plotting coding mutations. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"function generates genome-wide ideograms, visualizing SSM data well CN segments. also possible superimpose plot gene annotations. Offering comprehensive overview SSM CN segments different aneuploidy. plotting SSM can toggled setting `include_ssm` TRUE. , also possible count number SSMs per chromosome `ssm_count = TRUE`. get data plotting, different options available; like `fanncy_x_plots` sample ID can provided `this_sample_id` parameter. done , function retrieve data (SSm CN segments) wrapping appropriate functions. data can also provided `seg_data`, `seg_path`, `maf_data` `maf_path`. info run parameters, refer parameter descriptions. order annotate ideogram genes, simply give `gene_annotations` parameter set genes vector characters data frame gene names first column. Another useful parameter restricting plotted regions call function `intersect_regions`. parameter takes vector characters data frame regions plotted calls restricted .","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_ideogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"genome-wide ideogram annotated with SSM and CN information — fancy_ideogram","text":"","code":"#build plot if (FALSE) { # \\dontrun{ fancy_ideogram(this_sample_id = \"DOHH-2\",                gene_annotation = \"MYC\",                plot_title = \"Sample-level Ideogram Example\",                plot_subtitle = \"grch37\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Quality Control Metrics. — fancy_qc_plot","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"Plot visualizing QC metrics allowing grouping different metadata columns.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"","code":"fancy_qc_plot(   these_sample_ids,   keep_cohort,   keep_pathology,   seq_type = \"genome\",   metadata,   these_samples_metadata,   plot_data,   fill_by = \"pathology\",   comparison_samples,   plot_title = \"\",   y_axis_lab = \"\",   return_plotdata = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"these_sample_ids Data frame sample IDs (plotted) first column (named sample_id). keep_cohort Optional parameter used these_sample NULL. Returns metadata filters cohort supplied parameter. keep_pathology Optional parameter used these_sample NULL. Returns metadata filters pathology supplied parameter. seq_type Selected seq type incoming QC metrics. metadata Optional, user can provide metadata df subset sample IDs . these_samples_metadata GAMBL metadata subset cases want process. plot_data Plotting parameter, define data type plotted. fill_by Parameter specifying fill variable grouped bar plot. Can factor incoming metadata, e.g pathology, cohort, etc. comparison_samples Optional parameter, give function vector sample IDs compared main plotting group. Pathology default. plot_title Plotting parameter, plot title. y_axis_lab Plotting parameter, label y-axis. return_plotdata Optional parameter, set TRUE vector acceptable data types plotting returned, nothing else.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"function readily available visualizing variety quality control metrics. get started, user can easily overview available metrics `return_plotdata = TRUE`. parameter set TRUE, vector characters returned detailing , plot, available metrics. deciding metric plot, simply give metric choice `plot_data` parameter. function also lets user provide data frame sample IDs included plot. Optionally, user can also provide already filtered metadata table sample IDs interest `these_samples_metadata`. none two parameters supplied, user can easily restrict plot cohort /pathology liking. done calling `keep_cohort` `keep_pathology`. parameters used, function retrieve metadata available GAMBL sample IDs subset specified cohort pathology. layout returned plot can also customized `sort_by`. parameter controls order samples appear. Similarly, `fill_by` allows user control factor plot filled . Sometimes can also useful see subset samples compares another group; one call function vector additional sample IDs given `comparison_samples` parameter (see examples information). lastly, plot can also configured custom plot title axis labels (`plot_title` `y_axis_lab`). information, see examples parameter descriptions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_qc_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Quality Control Metrics. — fancy_qc_plot","text":"","code":"if (FALSE) { # \\dontrun{ #load packages library(dplyr) library(GAMBLR.open)  #get sample IDs for available genome samples genome_collated = collate_results(seq_type_filter = \"genome\") %>%   pull(sample_id)  #subset the collated samples on BL samples my_samples = get_gambl_metadata() %>%   dplyr::filter(sample_id %in% genome_collated) %>%   dplyr::filter(pathology == \"BL\") %>% pull(sample_id)  fancy_qc_plot(these_sample_ids = my_samples, plot_data = \"AverageBaseQuality\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":null,"dir":"Reference","previous_headings":"","what":"n SNVs per chromosome plot — fancy_snv_chrdistplot","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"Visualizing number SNVs per chromosome.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"","code":"fancy_snv_chrdistplot(   this_sample_id,   maf_data,   maf_path = NULL,   variant_type_col = 10,   chromosome_col = 5,   plot_title = paste0(this_sample_id),   plot_subtitle = \"SNV Distribution Per Chromosome\",   chr_select = paste0(\"chr\", c(1:22)),   include_dnp = FALSE,   hide_legend = FALSE,   this_seq_type = \"genome\",   projection = \"grch37\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"this_sample_id Sample plotted. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. variant_type_col Index column holding Variant Type (used either maf_data maf_path). chromosome_col Index column holding Chromosome (used either maf_data maf_path). plot_title Title plot (default sample ID). plot_subtitle Subtitle created plot. chr_select vector chromosomes included plot, defaults autosomes. include_dnp Optional argument including DNPs. Default FALSE. hide_legend Set True remove legend plot, default FALSE. this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". projection Genome build returned variants. Default grch37.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"function takes already loaded maf-like data frame, path maf file interest. addition, user can also give function sample ID function run get_ssm_by_sample get data plotting. maf file data frame used, user chance specify column holds Variant Type information (`variant_type_col`), addition user can also specify column incoming maf corresponding chromosome annotations. function also includes useful subsetting options. example, `chr_select` allows user restrict plot specific chromosomes. `include_dnp` optional argument (Boolean) variants subtype included . Lastly, plotting function also convenient parameters customizing returned plot, e.g `plot_title`, `y_interval`, `hide_legend`, `plot_subtitle`.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_snv_chrdistplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"n SNVs per chromosome plot — fancy_snv_chrdistplot","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open)  #plot SNVs fancy_snv_chrdistplot(this_sample_id = \"DOHH-2\")  #plot SNVs and DNPs fancy_snv_chrdistplot(this_sample_id = \"DOHH-2\",                       include_dnp = TRUE,                       plot_subtitle = \"SNV + DNP Distribution Per Chromosome\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Variants Size Plot. — fancy_sv_sizedens","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"Generate plot visualizing SV sizes. Subset variant type, filter VAF, size etc.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"","code":"fancy_sv_sizedens(   this_sample_id,   maf_data,   maf_path = NULL,   chrom_a_col = 3,   start_a_col = 4,   end_a_col = 5,   variant_type_col = 9,   vaf_cutoff = 0,   size_cutoff = 50,   adjust_value = 1,   trim = FALSE,   hide_legend = FALSE,   chr_select = paste0(\"chr\", c(1:22)),   plot_title = paste0(this_sample_id),   plot_subtitle =     paste0(\"SV sizes for Manta calls.\\n                                                    Dashed line annotates mean\\n                                                    variant size.\\nVAF cut off:\\n                                                    \",     vaf_cutoff,     \", SV size\\n                                                    cut off: \",     size_cutoff),   projection = \"grch37\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"this_sample_id Sample plotted. maf_data Optional parameter copy number df already loaded R. maf_path Optional parameter path external cn file. chrom_a_col Index column holding chromosome (used either maf_data maf_path). start_a_col Index column holding start coordinates (used either maf_data maf_path). end_a_col Index column holding end coordinates (used either maf_data maf_path). variant_type_col Index column holding variant type information (used either maf_data maf_path). vaf_cutoff Threshold filtering variants VAF (events VAF > cutoff retained). size_cutoff Threshold filtering variants size, default 50bp. adjust_value multiplicate bandwidth adjustment. makes possible adjust bandwidth still using bandwidth estimator. example, adjust = 1/2 means use half default bandwidth. trim FALSE, default, density computed full range data. hide_legend Set True remove legend plot, default FALSE. chr_select Optional argument subsetting selected chromosomes, default autosomes. plot_title Title plot (default sample ID). plot_subtitle Subtitle created plot. projection Genomic projection SVs circos plot. Accepted values grch37 hg38.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"Plot sample-level SV sizes across selected chromosomes. function also variety filtering parameters available. example, possible subset included variants specific VAF threshold `VAF_cutoff`. `size_cutoff` another parameter filtering variants set variant sizes, default parameter include variants least 50bp. function takes either sample ID (`this_sample_id`) already loaded data frame (`maf_data` path maf-like file `maf_path`). `this_sample_id` called, function run [GAMBLR::get_combined_sv] retrieve SV calls. either `maf` parameters used, note possible specify columns interest; (`chrom_a_col`, `start_a_col`, `end_a_col` `variant_type_col`), allowing function work maf-like data frames. function also allows user customize returned plot. info , please refer aesthetic parameters; `hide_legend`, `plot_title`, `plot_subtitle`, `adjust_value` `trim`.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_sv_sizedens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural Variants Size Plot. — fancy_sv_sizedens","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #build plot sith default parameters fancy_sv_sizedens(this_sample_id = \"SP116715\")  #restrict plot to only chromosome 1 and 2 fancy_sv_sizedens(this_sample_id = \"SP116715\",                   size_cutoff = 0,                   chr_select = c(\"chr1\", \"chr2\")) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":null,"dir":"Reference","previous_headings":"","what":"n variants per chromosome plot. — fancy_v_chrcount","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"Visualizing variant (SSM SVs) counts per chromosome.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"","code":"fancy_v_chrcount(   this_sample_id,   maf_data,   maf_path = NULL,   ssm = TRUE,   projection = \"grch37\",   min_vaf = 0,   variant_type_col = 10,   chromosome_col = 5,   plot_title = paste0(this_sample_id),   y_interval = 1,   hide_legend = FALSE,   plot_subtitle = \"Variant Count Distribution Per Chromosome\",   chr_select = paste0(\"chr\", c(1:22)),   add_qc_metric = FALSE,   this_seq_type = \"genome\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"this_sample_id Sample plotted. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. ssm Set FALSE get plotting data [GAMBLR::get_combined_sv] (SVs). Default value TRUE (plots SSM retrieved annotate_cn_by_ssm$maf) projection Genome build returned variants (applicable ssm = FALSE) min_vaf minimum tumour VAF SV returned. Recommended: 0 (applicable ssm = FALSE). variant_type_col Index column holding Variant Type (used either maf_data maf_path). chromosome_col Index column holding Chromosome (used either maf_data maf_path). plot_title Title plot (default sample ID). y_interval Optional parameter specifying intervals y-axis. hide_legend Set True remove legend plot, default FALSE. plot_subtitle Subtitle created plot. chr_select vector chromosomes included plot, defaults autosomes. add_qc_metric Boolean statement, set TRUE specified QC metric added (second y-axis). this_seq_type Default \"genome\".","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"Takes maf data frame (path maf), counts number variants per chromosome. Selected chromosomes (`chr_select`) plotted along x-axis variant counts represented y-axis. function can plot Structural Variants (SV) Simple Shared Motifs (SSM). plots SVs per default SSM can added setting `ssm = TRUE`. plot can also restricted show coding mutations. , set `coding_only` TRUE. addition, returned plot can also superimposed sample-specific mean coverage ([GAMBLR::collate_results]). , set `add_qc_metric` TRUE. collection parameters customizing returned plot also available. e.g `plot_title`, `y_interval`, `hide_legend`, `plot_subtitle`.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_chrcount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"n variants per chromosome plot. — fancy_v_chrcount","text":"","code":"if (FALSE) { # \\dontrun{  library(GAMBLR.open)  #plot ssm fancy_v_chrcount(this_sample_id = \"DOHH-2\",                  y_interval = 10) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Total n variants count plot. — fancy_v_count","title":"Total n variants count plot. — fancy_v_count","text":"Generate bar plot visualizing total variant (SSM SVs) count selected contigs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total n variants count plot. — fancy_v_count","text":"","code":"fancy_v_count(   this_sample_id,   maf_data,   maf_path = NULL,   ssm = TRUE,   projection = \"grch37\",   this_seq_type = \"genome\",   min_vaf = 0,   variant_type_col = 10,   chromosome_col = 5,   plot_title = paste0(this_sample_id),   plot_subtitle = \"Variant Count For Selected Contigs\",   chr_select = paste0(\"chr\", c(1:22)),   variant_select = c(\"DEL\", \"INS\", \"DUP\"),   snp_colours = c(SNP = \"#2B9971\", DNP = \"#993F2B\", TNP = \"#A62656\"),   hide_legend = FALSE,   log10_y = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total n variants count plot. — fancy_v_count","text":"this_sample_id Sample plotted. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. ssm Set FALSE get plotting data get_manta_sv (SVs). Default value TRUE (plots SSM retrieved get_ssm_by_sample). projection Genome build returned variants (applicable ssm = FALSE). this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". min_vaf minimum tumour VAF SV returned. Recommended: 0 (applicable ssm = FALSE). variant_type_col Index column holding Variant Type (used either maf_data maf_path). chromosome_col Index column holding Chromosome (used either maf_data maf_path). plot_title Title plot (default sample ID). plot_subtitle Subtitle created plot. chr_select vector chromosomes included plot, defaults autosomes. variant_select Subtypes SVs included plot, default DEL, INS DUP. snp_colours Optional vector colours SNPs (DNP TNP). hide_legend Set True remove legend plot, default FALSE. log10_y Set TRUE force y axis log10.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total n variants count plot. — fancy_v_count","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total n variants count plot. — fancy_v_count","text":"function creates barplot showing total number variants selected sample. Convenience parameters restricting returned plot available. example, `ssm` (Boolean) can toggle plot respect SSM (`ssm = TRUE`) wish count SVs (`ssm = FALSE`). addition, plot can also accept variety incoming data types. Either, supply function sample ID (`this_sample_id`) function retrieve data using get_ssm_by_sample get_manta_sv (depending `ssm` parameter used). function also supports maf maf-like data frame directly, done `maf_data` `maf_path`. data supplied either parameters, user can specify column holds variant type information well chromosome information (`variant_type_col` `chromosome_col`). Lastly, plotting function also convenient parameters customizing returned plot, e.g `plot_title`, `y_interval`, `hide_legend`, `plot_subtitle` `snp_colours`. lastly, also possible control variants counted `variant_select`. Default deletions, insertions duplications, c(\"DEL\", \"DUP\", \"INS\"). variant types specified parameter must match whatever present corresponding `variant_type_col`.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total n variants count plot. — fancy_v_count","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #count all variants for one sample (default parameters) fancy_v_count(this_sample_id = \"DOHH-2\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant size distribution plot — fancy_v_sizedis","title":"Variant size distribution plot — fancy_v_sizedis","text":"Generate violin plot showing variant (SSM SVs) size distributions selected contigs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant size distribution plot — fancy_v_sizedis","text":"","code":"fancy_v_sizedis(   this_sample_id,   maf_data,   maf_path = NULL,   ssm = TRUE,   projection = \"grch37\",   this_seq_type = \"genome\",   min_vaf = 0,   variant_type_col = 10,   chromosome_col = 5,   start_col = 6,   end_col = 7,   plot_title = paste0(this_sample_id),   plot_subtitle = \"Variant Size Distribution\",   scale_value = \"width\",   log_10 = TRUE,   plot_trim = FALSE,   chr_select = paste0(\"chr\", c(1:22)) )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant size distribution plot — fancy_v_sizedis","text":"this_sample_id Sample plotted. maf_data Optional parameter maf like df already loaded R. maf_path Optional parameter path external maf like file. ssm Set FALSE get plotting data get_combined_sv (SVs). Default value TRUE (plots SSM retrieved annotate_cn_by_ssm$maf). projection Genome build returned variants (applicable ssm = FALSE). this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". min_vaf minimum tumour VAF SV returned. Recommended: 0 (applicable ssm = FALSE). variant_type_col Index column holding Variant Type (used either maf_data maf_path). chromosome_col Index column holding Chromosome (used either maf_data maf_path). start_col Index column variant start coordinates (used either maf_data maf_path). end_col Index column variant end coordinates (used either maf_data maf_path). plot_title Title plot (default sample ID). plot_subtitle Subtitle created plot. scale_value Scale type violin plot, accepted values \"area\", \"width\", \"count\", default \"count. log_10 Boolean statement y-axis, default TRUE. plot_trim TRUE, trim tails violins range data. FALSE (default), trim tails. chr_select vector chromosomes included plot, defaults autosomes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variant size distribution plot — fancy_v_sizedis","text":"plot ggplot object (grob).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variant size distribution plot — fancy_v_sizedis","text":"Function plotting variant size distributions. function takes either sample ID given `this_sample` parameter. addition, function can also accept already loaded MAF MAF-like object given `maf_data` parameter. third option, function can also read maf disk (provide path maf `maf_path`). collection convenient filtering data subsetting parameters also available function. plot can also deal SVs well SSM data. control , please use `ssm` parameter. set TRUE `this_sample` called, function gets data get_ssm_by_sample set FALSE, function calls `get_manta_sv` get SV calls plotting. user calls either `maf_data` `maf_path`, collection parameters available specifying relevant columns given data frame (`variant_type_col`, `chhromosome_col`, `start_col`, `end_col`). also possible restrict returned plot given chromosome. done `chr_select` parameter (default autosomes). addition, plot aesthetics can also controlled `plot_title`, `plot_subtitle`, `scale_value`, `log10`, `trim`. info run parameters, refer parameter descriptions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/fancy_v_sizedis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variant size distribution plot — fancy_v_sizedis","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.data)  #plot SSM size distributions: fancy_v_sizedis(this_sample_id = \"DOHH-2\") } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Number Segments Plot — focal_cn_plot","title":"Copy Number Segments Plot — focal_cn_plot","text":"Generates plot CN segments specified region.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Number Segments Plot — focal_cn_plot","text":"","code":"focal_cn_plot(   region,   gene,   these_samples_metadata,   this_seq_type = \"genome\",   type = \"gain\",   segment_size = 1,   crop_segments = TRUE,   sort_by_annotation = c(\"pathology\"),   crop_distance = 1e+08 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Number Segments Plot — focal_cn_plot","text":"region Genomic region plotting bed format. gene Optional variable, converts gene region region supplied. these_samples_metadata Required parameter. GAMBL metadata subset cases want process (full metadata). this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". type Type CN segment plotted. Default gain (CN > 2). segment_size parameter controls size segment plotted ggplot2, default 1. crop_segments Boolean statement crops segment first checking crop segment smaller lef/right distance, adds subtracts  crop distance end/start coordinates. Default TRUE. sort_by_annotation Sort CN annotation, default \"pathology\". crop_distance Crop distance cropping segments. Default value 10000000 bp.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy Number Segments Plot — focal_cn_plot","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Number Segments Plot — focal_cn_plot","text":"function visualizes CN segments defined region, colours returned segments based lymphgen information. addition, function takes either specified region (chr:start-end format). region supplied, user can give function gene symbol `gene`. , function internally retrieve region specified gene. Sample IDs specified along y-axis genomic position visualized along x-axis.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/focal_cn_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Number Segments Plot — focal_cn_plot","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open)  #get metadata this_metadata = get_gambl_metadata()  #get myc region myc_region = GAMBLR.utils::gene_to_region(gene_symbol = \"MYC\",                                           return_as = \"region\")  #build plot focal_cn_plot(these_samples_metadata = this_metadata,               region = myc_region,               type = \"loss\",               crop_distance = 100000000) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/map_metadata_to_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","title":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","text":"Assign colour palette metadata columns automatically consistently.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/map_metadata_to_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","text":"","code":"map_metadata_to_colours(   metadataColumns,   these_samples_metadata,   column_alias = list(),   verbose = FALSE,   annoAlpha = 1 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/map_metadata_to_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","text":"metadataColumns Names metadata columns assign colours . these_samples_metadata Metadata just samples need colours . column_alias list column_names values indicating gambl colour scheme use (e.g. pos_neg, pathology, lymphgen). verbose Set TRUE enable verbose mode (debugging messages. annoAlpha Optional alpha apply annotation colours.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/map_metadata_to_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","text":"named list","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/map_metadata_to_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign a colour palette to metadata columns automatically and consistently. — map_metadata_to_colours","text":"","code":"library(GAMBLR.open)  #get metadata all_meta = suppressMessages(get_gambl_metadata() %>%   dplyr::filter(pathology %in% c(\"FL\",\"DLBCL\")))  #get colours all_cols = map_metadata_to_colours(      metadataColumns = c(          \"lymphgen\",          \"pathology\"),      these_samples_metadata = all_meta,      column_alias = list(\"nothing\" = \"FL\") )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/mutation_hotspot_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent mutation hot spots as a sequence logo — mutation_hotspot_logo","title":"Represent mutation hot spots as a sequence logo — mutation_hotspot_logo","text":"Generates summary frequency SSMs small region around mutation hot spot using \"sequence logo\"-style stacked plot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/mutation_hotspot_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent mutation hot spots as a sequence logo — mutation_hotspot_logo","text":"","code":"mutation_hotspot_logo(   maf_df,   hotspot_position = 128750677,   genome_build,   pad_length = 20,   fasta_path,   include_AA = FALSE,   group_AA = FALSE,   annotate_motif = FALSE,   annotate_only = FALSE,   return_data = FALSE,   base_size = 5,   aa_size = 3,   text_size = 5,   prepend_plot_label = \"\",   include_title = TRUE,   real_coordinates = TRUE,   reverse = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/mutation_hotspot_logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent mutation hot spots as a sequence logo — mutation_hotspot_logo","text":"named list containing ggplot object various processed data","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/mutation_hotspot_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent mutation hot spots as a sequence logo — mutation_hotspot_logo","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open) g_meta <- suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(seq_type == \"genome\") # CXCR4 non-coding hotspot muts <- get_ssm_by_regions(   regions_list = \"2:136875000-136875097\",   streamlined = FALSE,   projection = \"grch37\",   these_samples_metadata = g_meta )   mutation_hotspot_logo(   maf_df = muts,   hotspot_position = 136875037,   include_AA = TRUE,   pad_length = 51,   annotate_motif = TRUE,   base_size = 2,   prepend_plot_label = \"CXCR4\" )   cap_meta <- suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(seq_type == \"capture\")  # ID3 hotspot muts <- get_ssm_by_regions(   regions_list = \"1:23885706-23885798\",   streamlined = FALSE,   projection = \"grch37\",   this_seq_type = \"capture\",   these_samples_metadata = cap_meta )   mutation_hotspot_logo(   maf_df = muts,   hotspot_position = 23885750,   include_AA = TRUE,   aa_size = 3,   pad_length = 42,   annotate_motif = TRUE,   base_size = 3,   prepend_plot_label = \"ID3\",   text_size = 8 ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_MutationTimeR.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MutationTimeR Results — plot_MutationTimeR","title":"Plot MutationTimeR Results — plot_MutationTimeR","text":"function plots timing information MutationTimeR SSMs CNAs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_MutationTimeR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MutationTimeR Results — plot_MutationTimeR","text":"","code":"plot_MutationTimeR(this_sample_metadata, timed_cna, timed_ssm, verbose = FALSE)"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_MutationTimeR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MutationTimeR Results — plot_MutationTimeR","text":"this_sample_metadata Metadata one row containing sample details timed_cna Timed CNAs `GAMBLR.results::get_timed_mutations` timed_ssm Timed SSMs `GAMBLR.results::get_timed_mutations` verbose Set TRUE chattier experience. Default FALSE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_MutationTimeR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MutationTimeR Results — plot_MutationTimeR","text":"named list containing two plot objects, `full` plot chromosomes `minimal` plot chromosomes timed CNAs.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_MutationTimeR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MutationTimeR Results — plot_MutationTimeR","text":"","code":"if (FALSE) { # \\dontrun{ my_meta = suppressMessages(get_gambl_metadata()) %>%   dplyr::filter(sample_id==\"01-20985T\",                seq_type==\"genome\") timed = GAMBLR.results::get_timed_mutations(my_meta,\"hg38\")  all_plots = plot_MutationTimeR(my_meta,timed$CNA,timed$SSM)  all_plots$full  all_plots$minimal } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample-level Circos Plot — plot_sample_circos","title":"Sample-level Circos Plot — plot_sample_circos","text":"Plot sample-centric circos overview.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample-level Circos Plot — plot_sample_circos","text":"","code":"plot_sample_circos(   this_sample_id,   sv_df,   cnv_df,   ssm_df,   include_sv = TRUE,   include_ssm = FALSE,   legend_metadata_columns,   legend_metadata_names = c(),   include_cnv = TRUE,   genome_build,   this_seq_type = \"genome\",   chrom_list,   label_genes,   auto_label_sv = FALSE,   link_colour_column = NULL,   hide_legend = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample-level Circos Plot — plot_sample_circos","text":"this_sample_id Sample ID sample plot. sv_df Optional data frame SVs. provided function run `get_manta_sv` retrieve SVs. cnv_df Optional data frame CNVs. provided, function run `get_sample_cn_segments` retrieve CNVs. ssm_df parameter anything yet. Maybe meant implemented. include_sv Default TRUE. (anything yet). include_ssm Defaul FALSE. (anything yet). legend_metadata_columns Column names metadata legend_metadata_names List metadata names plotted. include_cnv Default TRUE. (anything yet). genome_build genome_build use (usually inferred automatically data) this_seq_type Seq type returned CN segments. One \"genome\" (default) \"capture\". chrom_list List chromosomes plotted. stated, chr1-22+X used. label_genes Gene labels (df, list type?) auto_label_sv Default FALSE link_colour_column column sv_df use link colouring (default: NULL) hide_legend Set TRUE want suppress legend. Particularly useful using GAMBL data/metadata verbose Set TRUE chattier experience","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample-level Circos Plot — plot_sample_circos","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample-level Circos Plot — plot_sample_circos","text":"function takes sample ID `this_sample_id` parameter. Optionally, user can supply already loaded data frames (SV, CNV, SSM) `sv_df`, `cnv_df` `ssm_df` parameters. Convenient Boolean parameteers also avaialble restricting plot specific mutation types (`include_sv`, `include_cnv`, `include_ssm`).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/plot_sample_circos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample-level Circos Plot — plot_sample_circos","text":"","code":"if (FALSE) { # \\dontrun{ library(GAMBLR.open)  plot_sample_circos(this_sample_id = \"02-13135T\",                    legend_metadata_columns = c(\"pathology\",                                                \"lymphgen\",                                                \"COO_consensus\",                                                \"DHITsig_consensus\"),                    legend_metadata_names = c(\"pathology\",                                              \"LymphGen\",                                              \"COO\",                                              \"DHITsig\"),                    chrom_list = c(\"chr3\",                                   \"chr8\",                                   \"chr14\",                                   \"chr18\")) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromosome Plot — prettyChromoplot","title":"Chromosome Plot — prettyChromoplot","text":"Use GISTIC2.0 scores output reproduce maftools::chromoplot flexibility.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromosome Plot — prettyChromoplot","text":"","code":"prettyChromoplot(   scores_path,   scores_df,   labels_bed,   default_gene_set = \"oncogenes\",   genome_build,   cutoff = 0.5,   adjust_amps = 0.5,   adjust_dels = 2.75,   label_size = 3,   force_pull = 0,   segment.curvature = 0.25,   segment.ncp = 4,   segment.angle = 25,   hide_neutral = FALSE,   verbose = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromosome Plot — prettyChromoplot","text":"scores_path Output file scores.gistic run GISTIC2.0 scores_df Optional. Instead specifying scores_path pass pre-loaded scores file data frame using scores_df labels_bed Optional. bed_data object specifying regions apply labels. genome_build Defines chr prefix coordinates default genes label `genes_to_label` provided. Automatically set labels_bed provided cutoff Optional. Used determine regions color aberrant. Must float range 0 1. higher number, less regions considered aberrant. default 0.5. adjust_amps Optional. value G-score highest amplification peak multiplied value determine far gene label displayed. Default 0.5. adjust_dels Optional. value G-score highest deletion peak multiplied value determine far gene label displayed. Default 2.75. label_size Optional. font size gene label displayed. Default 3. force_pull Optional. strong gene name label pulled towards data point. Default 0 (pulling). segment.curvature Optional. Indicates whether arrow data point curved. Accepts numeric value, negative left-hand positive right-hand curves, 0 straight lines. Default 0.25. segment.ncp Optional. Indicates number control points make smoother curve. Higher value allows flexibility curve. Default 4. segment.angle Optional. Numeric value range 0-180, less 90 skews control points arrow label data point toward start point. Default 25. hide_neutral Optional. Set TRUE hide neutral (insignificant) regions instead plotting grey","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chromosome Plot — prettyChromoplot","text":"plot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chromosome Plot — prettyChromoplot","text":"function uses GISTIC2.0 scores create chromosome plot, based similar plotting function `maftools`. required parameter function `scores`, path file GISTIC2.0 scores. parameters optional. detailed explanation use , refer parameter descriptions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyChromoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chromosome Plot — prettyChromoplot","text":"","code":"suppressMessages(library(GAMBLR.open))  # Bundled output from a GISTIC run using grch37 results gistic_scores = system.file(\"extdata\",   \"scores.gistic\",   package=\"GAMBLR.viz\")  suppressMessages(   suppressWarnings({ # Automatic labeling of gene sets for a given pathology prettyChromoplot(scores_path = gistic_scores,                  default_gene_set = \"FL\",                  genome_build = \"grch37\")  })) #> Warning: ggrepel: 17 unlabeled data points (too many overlaps). Consider increasing max.overlaps   ## Specifying your own gene list for labeling genes = c(   \"MYC\",\"FCGR2B\",\"TNFRSF14\",\"FAS\",\"PTEN\",\"B2M\",   \"RB1\",\"TCL1A\",\"CD70\",\"TOX\",\"PRAME\",\"CD38\",   \"BCL2\",\"KLHL14\",\"TCF4\",\"REL\",\"BCL6\",   \"SMARCA4\",\"CDKN2A\",\"RHOA\",\"HIST1H1C\",   \"TNFAIP3\",\"TP53\",\"CDK14\",\"RELN\",\"ETS1\",   \"MDM1\",\"MIR17HG\",\"CD58\",\"HNRNPD\"   ) gene_bed = dplyr::select(GAMBLR.data::grch37_gene_coordinates,-1) %>% #remove ensembl ID column   dplyr::filter(hugo_symbol %in% genes) %>%  #keep genes of interest   dplyr::mutate(length = end - start,mid = start + length/2) %>%   dplyr::mutate(start = mid,end=start+1) %>%   unique() %>% #convert to bed_data format  GAMBLR.utils::create_bed_data(genome_build = \"grch37\")  suppressMessages(   suppressWarnings({  prettyChromoplot(scores_path = gistic_scores,                  labels_bed = gene_bed)  }))  #NOTE: genome build is inferred from gene_bed if (FALSE) { # \\dontrun{  # GISTIC run using hg38 data prettyChromoplot(scores_path=gistic_scores,                    cutoff = 0.9,                    label_size=2,                    adjust_amps = 0.5,                    adjust_dels = 0.8,                    genome_build=\"hg38\",                    hide_neutral = TRUE) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side Oncoplots — prettyCoOncoplot","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"`prettyCoOncoplot` returns ggplot-compatible figure 2 [GAMBLR.viz::prettyOncoplot] side--side.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"","code":"prettyCoOncoplot(   maf,   metadata,   comparison_column,   comparison_values,   label1,   label2,   ... )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"maf Required argument. data frame containing mutations want plot oncoplots. metadata Required argument. data.frame metadata oncoplots. comparison_column Required: name metadata column containing comparison values. comparison_values Optional: comparison column contains two values factor, specify character vector length two order like factor levels set, reference group first. label1 Optional argument. Label shown title oncoplot #1. label2 Optional argument. Label shown title oncoplot #2. ... `prettyOncoplot` arguments, see function info avaialble parameters.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"ggplot object 2 oncoplots side--side.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"function generate graphic displaying 2 oncoplots side--side. Optionally user can annotate oncoplot title displayed top. arguments recognized [GAMBLR.viz::prettyOncoplot] supported can specified calling function. oncoplots specified parameters applied (e.g. genes display, split columns, font size, top annotation etc). provided argument recognized [GAMBLR.viz::prettyOncoplot], discarded. want specific order oncoplots left right, please ensure argument `comparison_column` factor first level group want plotted left side. developers: new arguments added [GAMBLR.viz::prettyOncoplot] future expected ---box compatible function nd need code modifications.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyCoOncoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Side-by-side Oncoplots — prettyCoOncoplot","text":"","code":"library(GAMBLR.open) #get data for plotting meta <- get_gambl_metadata() %>%   GAMBLR.helpers::check_and_clean_metadata(duplicate_action = \"keep_first\") #> Using the bundled metadata in GAMBLR.data... #> Duplicate rows (keeping first occurrence) for 'sample_id' and 'seq_type' have been dropped. meta <- meta %>%     dplyr::filter(         pathology %in% c(\"DLBCL\", \"FL\")     ) ssm <- get_coding_ssm(     these_samples_metadata = meta ) #> Using the bundled SSM calls (.maf) calls in GAMBLR.data... #> after linking with metadata, we have mutations from 546 samples  suppressMessages(   suppressWarnings({ #build plot prettyCoOncoplot(     maf = ssm,     metadata = meta,     comparison_column = \"pathology\",     comparison_values = c(\"DLBCL\",\"FL\"),     genes=dplyr::filter(lymphoma_genes,                         FL_Tier==1 | DLBCL_Tier==1) %>%                          dplyr::pull(Gene),     metadataColumns = c(         \"pathology\",         \"lymphgen\",         \"pairing_status\"     ),     metadataBarHeight = 10,     fontSizeGene = 12,     metadataBarFontsize = 10,     legend_row = 2,     label1 = \"FL\",     label2 = \"DLBCL\",     simplify_annotation =TRUE,     minMutationPercent = 5 )  }))"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest Plot. — prettyForestPlot","title":"Forest Plot. — prettyForestPlot","text":"Create forest plot comparing mutation frequencies set genes two groups.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest Plot. — prettyForestPlot","text":"","code":"prettyForestPlot(   maf,   mutmat,   metadata,   genes,   keepGeneOrder = FALSE,   min_mutations = 1,   comparison_column,   rm_na_samples = FALSE,   comparison_values = FALSE,   separate_hotspots = FALSE,   comparison_name = FALSE,   custom_colours = FALSE,   custom_labels = FALSE,   max_q = 1 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest Plot. — prettyForestPlot","text":"maf maf data frame. Minimum required columns Hugo_Symbol Tumor_Sample_Barcode. mutmat Optional argument binary mutation matrix. supplied, function generate matrix file used argument \"maf\". metadata Metadata comparisons. Minimum required columns Tumor_Sample_Barcode column assigning case one two groups. genes optional vector genes restrict plot . gene-list supplied, function extract mutated genes incoming maf. See min_mutations parameter info. keepGeneOrder Set TRUE want preserve gene order specified. min_mutations Optional parameter `genes` provided. parameter ensures genes n mutations kept `genes`. Default value 1, means genes incoming maf plotted. comparison_column Mandatory: name metadata column containing comparison values. rm_na_samples Set TRUE remove 0 mutation samples. Default FALSE. comparison_values Optional: comparison column contains two values factor, specify character vector length two order like factor levels set, reference group first. separate_hotspots Optional: like treat hotspots separately mutations gene. Requires maf file annotated [GAMBLR::annotate_hotspots]. comparison_name Optional: Specify legend title different comparison column name. custom_colours Optional: Specify named vector colours match values comparison column. custom_labels Optional: Specify custom labels legend categories. Must order comparison_values. max_q cut q values filtered fish test","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest Plot. — prettyForestPlot","text":"convenient list containing data frames created making plot, including mutation matrix. also produces (returns) ggplot object side--side forest plot bar plot showing mutation incidences across two groups.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forest Plot. — prettyForestPlot","text":"function returns two types plot (box plot forest plot), user can either view separately arranged grob. addition function also lets user control mutation frequencies plotted genes. `genes` provided, function auto-defaults genes incoming maf. user can control minimum number mutations requirement gene included plot. done `min_mutations` parameter. extended examples use function, refer example inside function documentation vignettes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyForestPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest Plot. — prettyForestPlot","text":"","code":"library(GAMBLR.open) suppressWarnings(   suppressMessages({  metadata = get_gambl_metadata() this_meta = dplyr::filter(metadata, pairing_status == \"matched\") this_meta = dplyr::filter(this_meta, pathology %in% c(\"FL\", \"DLBCL\")) %>%             check_and_clean_metadata(.,duplicate_action=\"keep_first\")  maf = get_coding_ssm(these_samples_metadata = this_meta)  plots = prettyForestPlot(maf = maf,                  metadata = this_meta,                  genes = c(\"ATP6V1B2\",                            \"EZH2\",                            \"TNFRSF14\",                            \"RRAGC\"),                  comparison_column = \"pathology\",                  comparison_values = c(\"DLBCL\",                                        \"FL\"),                  separate_hotspots = FALSE,                  comparison_name = \"FL vs DLBCL\") plots$arranged  }))"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Cloud Plot — prettyGeneCloud","title":"Gene Cloud Plot — prettyGeneCloud","text":"Make word cloud gene names MAF file based mutation frequency.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Cloud Plot — prettyGeneCloud","text":"","code":"prettyGeneCloud(   maf_df,   these_genes,   other_genes,   these_genes_colour = \"#B2DF8A\",   other_genes_colour = \"#bc42f5\",   colour_index,   return_genes = FALSE,   wordcloud_version = 2,   zoomout = 1,   fontFamily = \"Arial\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Cloud Plot — prettyGeneCloud","text":"maf_df MAF-format data frame containing mutations want summarize gene word cloud these_genes optional vector gene symbols (defaults lymphoma genes) other_genes optional second vector gene symbols include cloud second colour these_genes_colour Specify hex code colour use first set genes other_genes_colour Specify another hex code colour use second set genes colour_index Optional named character vector name gene these_genes colour value return_genes Optionally request vector genes plot. Default FALSE. wordcloud_version Specify whether want use original wordcloud package wordcloud2 (1 2) zoomout Increase decrease fit less words view. works wordcloud_version 2. Default 1","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Cloud Plot — prettyGeneCloud","text":"data frame counts gene","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene Cloud Plot — prettyGeneCloud","text":"Create wordcloud incoming MAF. Required parameter `maf_df`. Optional parameters `these_genes`, `other_genes`, `these_genes_colour`, `other_genes_colour` `colour_index`. genes supplied calling function, function default lymphoma genes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyGeneCloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Cloud Plot — prettyGeneCloud","text":"","code":"#get all coding SSM directly from GAMBLR.data maf = GAMBLR.data::sample_data$grch37$maf   #build wordcloud prettyGeneCloud(maf_df = maf,                 wordcloud_version = 2,                 zoomout=0.3)  {\"x\":{\"word\":[\"KMT2D\",\"IGLL5\",\"CREBBP\",\"PIM1\",\"TP53\",\"BCL2\",\"MYD88\",\"TNFRSF14\",\"HIST1H1E\",\"TMSB4X\",\"B2M\",\"GNA13\",\"ARID1A\",\"SOCS1\",\"MYC\",\"SGK1\",\"CARD11\",\"EZH2\",\"BTG2\",\"TNFAIP3\",\"BTG1\",\"CD79B\",\"DUSP2\",\"HIST1H1C\",\"DDX3X\",\"IRF8\",\"EBF1\",\"EP300\",\"SPEN\",\"BCL6\",\"BCL7A\",\"MEF2B\",\"TBL1XR1\",\"FOXO1\",\"DTX1\",\"CCND3\",\"ACTB\",\"HIST1H1B\",\"ZNF608\",\"BIRC6\",\"KLHL6\",\"KMT2C\",\"NOTCH2\",\"SETD1B\",\"HLA-B\",\"TET2\",\"CD70\",\"FAS\",\"ITPKB\",\"ID3\",\"PRDM1\",\"STAT6\",\"ATM\",\"LTB\",\"SMARCA4\",\"CD58\",\"ZFP36L1\",\"ETV6\",\"MGA\",\"STAT3\",\"HIST1H1D\",\"OSBPL10\",\"ETS1\",\"KLHL14\",\"MPEG1\",\"ZNF292\",\"CD83\",\"HIST1H2AM\",\"TAF1\",\"GNAI2\",\"POU2F2\",\"TMEM30A\",\"MTOR\",\"HLA-A\",\"CHD8\",\"HIST1H2BK\",\"BCL10\",\"P2RY8\",\"HIST1H2AC\",\"CIITA\",\"FBXO11\",\"HIST1H2BC\",\"RHOA\",\"TOX\",\"UBE2A\",\"NFKBIE\",\"RB1\",\"BTK\",\"PIM2\",\"NOTCH1\",\"NFKBIA\",\"POU2AF1\",\"IKZF3\",\"IRF4\",\"KLF2\",\"HNRNPU\",\"SIN3A\",\"EEF1A1\",\"RFX7\",\"PTEN\",\"ZC3H12A\",\"TCL1A\",\"GRHPR\",\"BRAF\",\"PCBP1\",\"NOL9\",\"PTPN6\",\"RRAGC\",\"S1PR2\",\"JUNB\",\"IL4R\",\"HIST2H2BE\",\"MEF2C\",\"CDKN2A\",\"USP7\",\"SF3B1\",\"HVCN1\",\"XPO1\",\"PHF6\",\"HLA-DMB\",\"WEE1\",\"MAP2K1\",\"FBXW7\",\"HLA-C\",\"KRAS\",\"GRB2\",\"CXCR4\",\"HIST1H3B\",\"LRRN3\",\"MS4A1\",\"NFKBIZ\",\"ACTG1\",\"ATP6V1B2\",\"HIST1H2AG\",\"CTSS\",\"LCOR\",\"VMA21\",\"WNK1\",\"ATP6AP1\",\"HIST1H2BG\",\"BMP7\",\"BACH2\",\"TCF3\"],\"freq\":[910,754,572,547,528,465,451,428,427,375,360,349,331,331,330,309,305,294,287,276,265,265,264,264,256,251,248,248,247,244,238,237,237,232,230,226,222,220,218,213,213,199,198,198,197,195,190,185,185,182,181,178,176,176,175,169,169,167,163,163,160,159,157,153,153,153,150,144,139,136,135,133,132,131,129,129,126,126,125,119,119,118,116,116,116,114,114,112,111,109,108,108,107,106,105,102,101,100,99,97,93,88,86,82,82,81,81,81,81,79,78,77,76,72,70,69,68,68,67,65,65,63,62,62,60,59,56,56,45,39,33,28,24,18,16,13,12,12,11,11,10,3,3],\"fontFamily\":\"Arial\",\"fontWeight\":\"bold\",\"color\":[\"#FC8D62\",\"#E5C494\",\"#E78AC3\",\"#A6D854\",\"#8DA0CB\",\"#A6D854\",\"#8DA0CB\",\"#FC8D62\",\"#8DA0CB\",\"#8DA0CB\",\"#E5C494\",\"#B3B3B3\",\"#8DA0CB\",\"#FC8D62\",\"#B3B3B3\",\"#A6D854\",\"#E78AC3\",\"#FC8D62\",\"#FFD92F\",\"#A6D854\",\"#E5C494\",\"#B3B3B3\",\"#FC8D62\",\"#B3B3B3\",\"#E5C494\",\"#FC8D62\",\"#B3B3B3\",\"#66C2A5\",\"#B3B3B3\",\"#66C2A5\",\"#E78AC3\",\"#B3B3B3\",\"#66C2A5\",\"#66C2A5\",\"#FC8D62\",\"#E5C494\",\"#8DA0CB\",\"#8DA0CB\",\"#E78AC3\",\"#E5C494\",\"#FFD92F\",\"#FFD92F\",\"#E78AC3\",\"#FC8D62\",\"#FFD92F\",\"#FC8D62\",\"#E78AC3\",\"#66C2A5\",\"#FC8D62\",\"#FC8D62\",\"#A6D854\",\"#66C2A5\",\"#E5C494\",\"#8DA0CB\",\"#E5C494\",\"#8DA0CB\",\"#E5C494\",\"#FC8D62\",\"#FFD92F\",\"#8DA0CB\",\"#E78AC3\",\"#8DA0CB\",\"#A6D854\",\"#E78AC3\",\"#FFD92F\",\"#A6D854\",\"#E78AC3\",\"#66C2A5\",\"#E5C494\",\"#E5C494\",\"#E5C494\",\"#FC8D62\",\"#FFD92F\",\"#E78AC3\",\"#B3B3B3\",\"#FC8D62\",\"#E5C494\",\"#B3B3B3\",\"#66C2A5\",\"#B3B3B3\",\"#66C2A5\",\"#66C2A5\",\"#A6D854\",\"#FC8D62\",\"#B3B3B3\",\"#E5C494\",\"#E78AC3\",\"#B3B3B3\",\"#B3B3B3\",\"#B3B3B3\",\"#FC8D62\",\"#FC8D62\",\"#FFD92F\",\"#FC8D62\",\"#8DA0CB\",\"#FC8D62\",\"#8DA0CB\",\"#E78AC3\",\"#66C2A5\",\"#B3B3B3\",\"#E78AC3\",\"#B3B3B3\",\"#E5C494\",\"#8DA0CB\",\"#E5C494\",\"#E78AC3\",\"#8DA0CB\",\"#66C2A5\",\"#A6D854\",\"#A6D854\",\"#FC8D62\",\"#E5C494\",\"#B3B3B3\",\"#8DA0CB\",\"#FC8D62\",\"#E5C494\",\"#E5C494\",\"#E78AC3\",\"#FC8D62\",\"#E78AC3\",\"#A6D854\",\"#66C2A5\",\"#8DA0CB\",\"#E5C494\",\"#A6D854\",\"#E78AC3\",\"#FC8D62\",\"#8DA0CB\",\"#FFD92F\",\"#B3B3B3\",\"#E5C494\",\"#66C2A5\",\"#66C2A5\",\"#E78AC3\",\"#B3B3B3\",\"#A6D854\",\"#E78AC3\",\"#FFD92F\",\"#A6D854\",\"#A6D854\",\"#8DA0CB\",\"#E5C494\",\"#66C2A5\"],\"minSize\":0,\"weightFactor\":0.05934065934065934,\"backgroundColor\":\"white\",\"gridSize\":0,\"minRotation\":-0.7853981633974483,\"maxRotation\":0.7853981633974483,\"rotationSteps\":6,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"circle\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty mutation density heatmap — prettyMutationDensity","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"Obtain heatmap mutation counts across sliding windows multiple regions.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"","code":"prettyMutationDensity(   regions_list = NULL,   regions_bed = NULL,   these_samples_metadata = NULL,   these_sample_ids = NULL,   this_seq_type = c(\"genome\", \"capture\"),   maf_data,   mut_freq_matrix,   projection,   region_padding = 1000,   drop_unmutated = FALSE,   metadataColumns = c(\"pathology\"),   sortByMetadataColumns = NULL,   expressionColumns = NULL,   orientation = \"sample_rows\",   skip_regions,   only_regions,   customColours = NULL,   naColour = \"white\",   backgroundColour = \"transparent\",   slide_by = 100,   window_size = 500,   split_regions = TRUE,   min_count_per_bin = 0,   min_bin_recurrence = 5,   min_mut_tumour = 0,   region_fontsize = 8,   clustering_distance_samples = \"euclidean\",   cluster_samples = FALSE,   cluster_rows_heatmap,   split_samples_kmeans,   show_row_names = TRUE,   show_column_names = FALSE,   cluster_regions = FALSE,   show_gene_colours = FALSE,   label_regions_by = \"name\",   merge_genes = FALSE,   label_regions_rotate = 0,   legend_row = 3,   legend_col = 3,   show_legend = TRUE,   legend_direction = \"horizontal\",   legendFontSize = 10,   metadataBarHeight = 1.5,   metadataBarFontsize = 5,   metadataSide = \"bottom\",   region_annotation_name_side = \"top\",   sample_annotation_name_side = \"left\",   legend_side = \"bottom\",   returnEverything = FALSE,   from_indexed_flatfile = TRUE,   mode = \"slms-3\",   width,   height,   hide_annotation_name = FALSE,   use_raster = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"regions_list Named vector regions format c(name1 = \"chr:start-end\", name2 = \"chr:start-end\"). one (none) `regions_list` `regions_bed` arguments provided. neither regions_list regions_bed specified, function use GAMBLR aSHM region information. regions_bed Data frame regions four columns (chrom, start, end, name). one (nome) `regions_list` `regions_bed` arguments provided. these_samples_metadata Metadata least sample_id column. providing maf data frame, seq_type also required. these_sample_ids Vector sample IDs. Metadata subset sample IDs present vector. this_seq_type Optional vector seq_types include heatmap. Default c(\"genome\", \"capture\"). Uses default seq_type priority samples >1 seq_type. maf_data Optional maf data frame. subset rows Tumor_Sample_Barcode matches provided sample IDs metadata table. provided, maf data obtained get_ssm_by_regions(). mut_freq_matrix Optional matrix binned mutation frequencies generated outside function, usually [GAMBLR::calc_mutation_frequency_bin_regions]. projection Genome build function operate . Ensure matches provided regions maf data correct chr prefix handling. Default grch37. region_padding Amount pad start end coordinates . Default 1000 drop_unmutated Whether drop bins 0 mutations. returning matrix format, drop bins mutations samples. metadataColumns Mandatory character vector metadata columns use heatmap annotation. Default c(\"pathology\"). sortByMetadataColumns Optional character vector metadata columns order annotations . ordered factor levels sorted order specified. Default NULL. expressionColumns Optional character vector numeric metadata columns, usually gene expression, heatmap annotation. orientation Specify whether heatmap samples rows (\"sample_rows\") columns (\"sample_cols\"). Default sample_rows. skip_regions Optional character vector genes exclude default aSHM regions. only_regions Optional character vector genes include default aSHM regions. customColours Optional list character vectors specifying colours heatmap annotation metadataColumns, e.g. list(pathology = c(DLBCL = \"green\", BL = \"purple\")). left blank, function attempt match heatmap annotations existing colours [GAMBLR::get_gambl_colours], default Blood colour palette. naColour Colour use NA values metadata/expression. Default \"white\". backgroundColour Optionally specify colour heatmap bins 0 mutations. Default grey90. slide_by Slide size sliding window. Default 100. window_size Size sliding window. Default 500. min_count_per_bin Specify minimum number mutations per bin included heatmap. bins samples falling threshold dropped. Default 0. min_bin_recurrence Specify many samples bin must mutated displayed. Default 5. min_mut_tumour Specify many bins tumour must mutated displayed. Default 0. region_fontsize Fontsize region labels heatmap. Default 8. show_gene_colours Boolean. Whether add heatmap annotation colours region. Default FALSE. label_regions_by Specify feature regions label heatmap . Heatmap split according value, ordered factor levels specified column factor. Default name. merge_genes Set TRUE drop everything \"-\" label collpse regions gene/locus. Default FALSE. label_regions_rotate Specify degree label previous parameter rotated. Default 0 (rotation). accepted values 0, 90, 270. legend_row Control aesthetics heatmap legend. Default 3. legend_col Control aesthetics heatmap legend. Default 3. show_legend Boolean. Default TRUE. legend_direction Control aesthetics heatmap legend. Default \"horizontal\". legendFontSize Control aesthetics heatmap legend. Default 10. metadataBarHeight Optional argument adjust height bar annotations. default 1.5. metadataBarFontsize Optional argument control font size metadata annotations. default 5. metadataSide Default location metadata bottom. Set \"top\" want move legend_side Control aesthetics heatmap legend. Default \"bottom\". returnEverything Boolean. FALSE plot heatmap automatically. TRUE return heatmap object allow tweaking draw() function. Default FALSE. from_indexed_flatfile Set TRUE avoid using database instead rely flat files (works streamlined data, full MAF details). mode works indexed flat files. Accepts 2 options \"slms-3\" \"strelka2\" indicate variant caller use. Default \"slms-3\". use_raster Control whether ComplexHeatmap uses rastering. default: TRUE","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"table mutation counts sliding windows across one regions. May long wide.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"function takes metadata table `these_samples_metadata` parameter internally calls [GAMBLR::calc_mutation_frequency_bin_region] (internally calls [GAMBLR::get_ssm_by_regions]). retrieve mutation counts sliding windows across one regions generate heatmap. May optionally provide combination maf data frame, existing metadata, regions data frame named vector.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyMutationDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty mutation density heatmap — prettyMutationDensity","text":"","code":"library(GAMBLR.open) # get meta data my_meta <- get_gambl_metadata() %>%   dplyr::filter(pathology %in% c(\"FL\",\"DLBCL\"), seq_type != \"mrna\") %>%   check_and_clean_metadata(duplicate_action = \"keep_first\") #> Using the bundled metadata in GAMBLR.data... #> Duplicate rows (keeping first occurrence) for 'sample_id' and 'seq_type' have been dropped.  # get ashm regions of a set of genes. my_regions = create_bed_data(GAMBLR.data::grch37_ashm_regions,   fix_names = \"concat\",   concat_cols = c(\"gene\",\"region\"),sep = \"-\")  # create heatmap of mutation counts for the specified regions meta_columns <- c(\"pathology\",                   \"lymphgen\",                   \"COO_consensus\",                    \"DHITsig_consensus\") suppressMessages(   suppressWarnings({  prettyMutationDensity(    regions_bed = my_regions,    these_samples_metadata = my_meta,    metadataColumns = meta_columns,    orientation=\"sample_columns\",    sortByMetadataColumns = meta_columns,    projection = \"grch37\",    backgroundColour = \"transparent\",    show_legend = FALSE,    region_fontsize = 3)  }))"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"PrettyOncoplot — prettyOncoplot","title":"PrettyOncoplot — prettyOncoplot","text":"Create highly customizable oncoplot.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PrettyOncoplot — prettyOncoplot","text":"","code":"prettyOncoplot(   maf_df,   gene_cnv_df,   binned_cnv_df,   genes,   include_noncoding = NULL,   keepGeneOrder = FALSE,   keepSampleOrder = FALSE,   highlightHotspots = FALSE,   these_samples_metadata,   genes_CN_thresh,   metadataColumns,   numericMetadataColumns,   expressionColumns = c(),   numericMetadataMax,   sortByColumns,   sortByGenes,   arrange_descending = FALSE,   removeNonMutated = FALSE,   minMutationPercent = 0,   mutAlpha = 1,   recycleOncomatrix = FALSE,   splitColumnName,   splitGeneGroups,   showTumorSampleBarcode = FALSE,   groupNames,   hide_annotations,   hide_annotations_tracks = FALSE,   annotate_specific_genes = FALSE,   this_forest_object = NULL,   custom_colours = NULL,   hideTopBarplot = TRUE,   tally_all_mutations = FALSE,   tally_all_mutations_max = 1000,   hideSideBarplot = FALSE,   box_col = NA,   annoAlpha = 1,   legend_direction = \"horizontal\",   ylim = NULL,   legend_position = \"bottom\",   legend_row = 3,   legend_col = 3,   metadataBarHeight = 1.5,   metadataBarFontsize = 5,   metadataSide = \"bottom\",   legendFontSize = 10,   fontSizeGene = 6,   annotation_row = 2,   annotation_col = 1,   verbose = FALSE,   cluster_rows = FALSE,   cluster_cols = FALSE,   clustering_distance_rows = \"binary\",   clustering_distance_cols = \"binary\",   split_rows_kmeans,   split_columns_kmeans,   dry_run = FALSE,   simplify_annotation = FALSE,   simplify_bg_colour = NA,   stacked = FALSE,   return_inputs = FALSE,   gap = 0,   use_raster = NULL,   plot_width = NULL,   plot_height = NULL,   show_any_legend = TRUE,   pct_side = \"left\",   pctFontSize = 6,   row_names_side = \"right\",   show_pct = TRUE,   hide_annotation_name = FALSE,   cnv_df )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PrettyOncoplot — prettyOncoplot","text":"maf_df maf data frame containing mutations want plot. gene_cnv_df optional data frame CN status genes want included (rows = sample_id, columns = Hugo_Symbol) See [GAMBLR.results::get_cnv_and_ssm_status] information. binned_cnv_df optional data frame genome-wide CN status samples genomic bins see [GAMBLR.utils::segmented_data_to_cn_matrix] information. genes optional vector genes restrict plot . include_noncoding List non-coding regions included, default NULL. Specify like : include_noncoding=list(\"NFKBIZ\" = c(\"3'UTR\"), \"HNRNPH1\" = \"Splice_Region\") keepGeneOrder Set TRUE want preserve gene order specified. keepSampleOrder Set TRUE want preserve sample order specified. default value FALSE respects specified ordering. highlightHotspots Set TRUE highlight hot spots. Default FALSE. these_samples_metadata Data frame containing metadata samples. genes_CN_thresh named vector specifying genes whose copy number status incorporated. names must gene symbols values integers indicate maximum minimum CN states consider gene. example: 'REL'=4 show CN 4 higher; 'TP53'=1 show heterozygous homozygous deletions 'BCL2'=3 show single-copy gains higher metadataColumns vector containing categorical column names want plot . numericMetadataColumns vector containing numeric columns want plot . expressionColumns Optional variable retreiving expression values specific gene(s). numericMetadataMax numeric vector cutoffs apply numeric columns . sortByColumns vector containing column names want sort columns (patients) . arrange_descending Boolean parameter. Set TRUE sort metadata descending fashion. Default FALSE. removeNonMutated Set TRUE drop unmutated cases. minMutationPercent genes mutated minMutationPercent % patients included. mutAlpha Optional alpha apply mutation colours. recycleOncomatrix Set TRUE time reuse oncomatrix saved maftools. splitColumnName Optional argument indicate metadata column split . splitGeneGroups Split genes groups better seperation (different gene-groups) prettyOncoplot. showTumorSampleBarcode Optional argument showing tumor barcode. Default FALSE. groupNames optional vector group names displayed heatmap. length number groups shown. Default NULL (labels). hide_annotations Hide annotations specifc ashms. argument takes list annotations. hide_annotations_tracks hide_annotations supplied list columns, parameter can optionally also display columns annotation track. Accepts TRUE FALSE (default). annotate_specific_genes Optional argument, specifying whether features labelled according significance one pathologies. Default FALSE (annotation). this_forest_object annotate_specific_genes specified, arguments takes output GAMBLR::prettyForestPlot directly determine annotations. custom_colours Provide named vector (named list vectors) containing custom annotation colours want use standardized pallette. hideTopBarplot Optional argument removing top bar plot. Default value TRUE. tally_all_mutations Optional argument. Set TRUE tally mutations. Default FALSE. tally_all_mutations_max Optional argument. Default 1000. hideSideBarplot Optional argument removing side bar plot. Default value FALSE. box_col Colour boxes outlining mutations (can problematic larger oncoprints). annoAlpha Optional alpha apply annotation colours. legend_direction Direction legend, default \"horizontal\". ylim Limit y-axis. legend_position Position legend, default \"bottom\". legend_row Fiddle widen narrow legend. legend_col Fiddle widen narrow legend. metadataBarHeight Optional argument adjust height bar annotations. default 1.5. metadataBarFontsize Optional argument control font size metadata annotations. default 5. legendFontSize Font size legend, default 10. fontSizeGene Font size gene labels (default 6). annotation_row Row annotations, default 2. annotation_col Column annotations, default 1. verbose Set TRUE enable verbose mode (debugging messages. cluster_rows Force clustering genes correlated mutation patterns cluster_cols Force clustering patients correlated mutation patterns clustering_distance_rows Distance metric used clustering cluster_rows = TRUE clustering_distance_cols Distance metric used clustering cluster_cols = TRUE split_rows_kmeans K value k-means clustering rows split_columns_kmeans K value k-means clustering columns dry_run Set TRUE efficiently view clustering result debugging cluster_rows/clustering_distance_rows simplify_annotation Collapse/group variant effect categories 3 options. much faster option many patients/genes included. simplify_bg_colour simplify_annotation called, adjust color background passign value argument. Default NA. stacked Deprecated. See [GAMBLR.viz::prettyStackedOncoplot] functionality. return_inputs Optional flag return plot various internal objects underlying mutation matrix. gap Size gap columns represented proportion full width column. Default 0 (gap). use_raster Whether rasterize image show_pct TRUE default. Set FALSE hide percentage. hide_annotation_name Default: FALSE cluster_numeric_rows Deprecated. See [GAMBLR.viz::prettyStackedOncoplot] functionality. cluster_numeric_cols Deprecated. See [GAMBLR.viz::prettyStackedOncoplot] functionality. numeric_heatmap_type Deprecated. See [GAMBLR.viz::prettyStackedOncoplot] functionality. numeric_heatmap_location Deprecated. See [GAMBLR.viz::prettyStackedOncoplot] functionality.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PrettyOncoplot — prettyOncoplot","text":"default, nothing unless return_inputs specified, case returns named list contains different things depending function run least, contain Heatmap object logical matrix indicating mutation status gene patient shown output.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PrettyOncoplot — prettyOncoplot","text":"Generatss oncoplot (.k.. oncoprint) pretty using ComplexHeatmap. metadata expected follow structure column naming used GAMBL. provide non-GAMBL samples metadata, must include least following columns names. first one match Tumor_Sample_Barcode MAF object onco_matrix provide. sample_id, pathology","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyOncoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PrettyOncoplot — prettyOncoplot","text":"","code":"suppressMessages(   suppressWarnings({ # load packages library(grid) library(dplyr) library(GAMBLR.open)  # Using GAMBLR.open maf_metadata <- GAMBLR.open::get_gambl_metadata(                                seq_type_filter = \"genome\") %>%   dplyr::filter(pathology %in% c(\"FL\", \"DLBCL\"),                 study == \"FL_Dreval\")   maf_data <- get_coding_ssm(   these_samples_metadata = maf_metadata ) }))  # define some genes of interest fl_genes <- GAMBLR.data::lymphoma_genes %>%   dplyr::filter(FL_Tier == 1) %>%   pull(Gene)  dlbcl_genes <- GAMBLR.data::lymphoma_genes %>%   dplyr::filter(DLBCL_Tier == 1, !Gene %in% fl_genes) %>%   pull(Gene)  genes <- c(fl_genes, dlbcl_genes)  # For splitting into gene sets split_genes <- c(rep(\"FL\", length(fl_genes)),                  rep(\"DLBCL\", length(dlbcl_genes))) names(split_genes) <- genes  suppressMessages(   suppressWarnings({ prettyOncoplot(   maf_df = maf_data, genes = genes,   these_samples_metadata = maf_metadata,   splitGeneGroups = split_genes,   minMutationPercent = 5 ) }))   # Was that too slow for you? Enable the simplify_annotation # parameter for a quicker result.  suppressMessages(   suppressWarnings({  prettyOncoplot(   maf_df = maf_data, genes = genes,   these_samples_metadata = maf_metadata,   splitGeneGroups = split_genes,   minMutationPercent = 5,   simplify_annotation = TRUE )  }))   # Want to include copy number? You have two options. # Option 1: # Incorporate CN status of specific genes into your oncoplot # along with mutations. # There are two ways to go about this. # The original way involves using the helper function get_cnv_and_ssm_status  gene_regions <- data.frame(   gene_id = c(     \"REL\", \"CDKN2A\",     \"MIR17HG\", \"TP53\", \"ATM\", \"FAS\", \"SMARCA4\", \"B2M\", \"TNFRSF14\",     \"TMEM30A\", \"TNFAIP3\", \"BCL2\"   ),   cn_thresh = c(4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 3) )  # this data frame specifies the threshold and directionality for # each gene's copy number state to display on the oncoplot. # Amplifications will be shown for REL and MIR17HG, gains # for BCL2, deletions for the rest print(gene_regions) #>     gene_id cn_thresh #> 1       REL         4 #> 2    CDKN2A         1 #> 3   MIR17HG         4 #> 4      TP53         1 #> 5       ATM         1 #> 6       FAS         1 #> 7   SMARCA4         1 #> 8       B2M         1 #> 9  TNFRSF14         1 #> 10  TMEM30A         1 #> 11  TNFAIP3         1 #> 12     BCL2         3  suppressMessages(   suppressWarnings({  gene_cnv <- GAMBLR.results::get_cnv_and_ssm_status(   only_cnv = \"all\",   these_samples_metadata = get_gambl_metadata(),   genes_and_cn_threshs = gene_regions )     prettyOncoplot(   maf_df = maf_data, genes = c(     \"CREBBP\", \"EZH2\", \"MYD88\",     \"TCF3\", \"BCL2\", \"BCL7A\",     \"MEF2B\", \"POU2F2\", \"POU2AF1\",     \"ID3\", \"MYC\",     \"RRAGC\", \"TCL1A\", \"KMT2D\",     \"PIM1\", \"CD79B\", \"TMSB4X\",     \"TMEM30A\", \"TNFAIP3\"   ),   these_samples_metadata = maf_metadata,   cluster_rows = TRUE,   metadataColumns = c(     \"pathology\",     \"lymphgen\",     \"seq_type\",     \"ffpe_or_frozen\"   ),   cluster_cols = FALSE,   simplify_annotation = TRUE,   cnv_df = gene_cnv,   sortByColumns = c(\"pathology\", \"lymphgen\") ) }))    # Option 2: # The second way to incorporate copy number relies # instead on a binned copy number matrix # If you already have one on hand, this is clearly the preferred approach! # First let's make one with the help of segmented_data_to_cn_matrix if (FALSE) { # \\dontrun{ all_segments <- get_cn_segments(these_samples_metadata = maf_metadata) all_states_binned <- segmented_data_to_cn_matrix(   seg_data = all_segments,   strategy = \"auto_split\",   n_bins_split = 1000,   fill_missing_with = \"avg_ploidy\",   adjust_for_ploidy = TRUE,   these_samples_metadata = maf_metadata )   # Note: adjust_for_ploidy = TRUE ensures the relative # CN status is used for high-ploidy cases  # as before, we need to specify which genes we want # CN events shown for and what direction (gain or loss) # This is done a bit more easily with the genes_CN_thresh option.  CN_thresh <- c(   \"REL\" = 4,   \"CDKN2A\" = 1,   \"MIR17HG\" = 4,   \"TP53\" = 1,   \"TNFRSF14\" = 1,   \"TNFAIP3\" = 1 )   prettyOncoplot(   maf_df = maf_data,   binned_cnv_df = all_states_binned,   genes_CN_thresh = CN_thresh,   genes = head(genes, 25),   these_samples_metadata = maf_metadata,   cluster_rows = TRUE,   metadataColumns = c(     \"pathology\",     \"genetic_subgroup\",     \"seq_type\",     \"ffpe_or_frozen\"   ),   cluster_cols = FALSE,   simplify_annotation = TRUE,   sortByColumns = c(\"pathology\", \"genetic_subgroup\"),   minMutationPercent = 0 )  } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainfall Plot — prettyRainfallPlot","title":"Rainfall Plot — prettyRainfallPlot","text":"Plot rainfall plot one sample. function takes      MAF data frame, path custom MAF file.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainfall Plot — prettyRainfallPlot","text":"","code":"prettyRainfallPlot(   this_sample_id = NULL,   label_ashm_genes = TRUE,   projection = \"grch37\",   chromosome,   sv_data = NULL,   this_maf = NULL,   maf_path,   zoom_in_region,   this_seq_type,   label_sv = FALSE,   plot_title,   annotate_sv = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rainfall Plot — prettyRainfallPlot","text":"this_sample_id Sample id sample display. argument required want multi-sample plot otherwise needed. label_ashm_genes Boolean argument indicating whether aSHM regions labeled . projection Specify projection (grch37 hg38) mutations. Default grch37. chromosome Provide one chromosomes plot. chr prefix can inconsistent projection handled. sv_data Optionally provide SV data used plotting instead retreiving SVs GAMBLR fly. this_maf Specify custom MAF data frame mutations. maf_path Specify path MAF file already loaded data frame. zoom_in_region Provide specific region format \"chromosome:start-end\" zoom specific region. this_seq_type Specify one \"genome\" \"capture\" relying function obtain mutations region (.e. provided MAF single sample_id) label_sv Boolean argument specify whether label SVs green line rainfall plot. plot_title Specify title returned plot, default provided sample_id annotate_sv Optionally annotate intrachromosomal SVs label gene partner information plot. Default TRUE (perform annotation).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rainfall Plot — prettyRainfallPlot","text":"ggplot2 object","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rainfall Plot — prettyRainfallPlot","text":"Create sample-level rainfall plot visualizing single nucleotide      substitutions mutations selected chromosomes.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyRainfallPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rainfall Plot — prettyRainfallPlot","text":"","code":"suppressMessages(library(GAMBLR.open)) maf = GAMBLR.data::sample_data$grch37$maf prettyRainfallPlot(this_sample_id = \"14-35026\",                    this_maf = maf,                    label_sv = FALSE,                    chromosome = \"3\") #> Subsetting MAF to the specified sample ...   if (FALSE) { # \\dontrun{ # This mode will annotate and label SVs prettyRainfallPlot(      this_sample_id = \"DOHH-2\",      this_seq_type = \"genome\",      zoom_in_region = \"8:125252796-135253201\",      label_sv = TRUE )  # Will not annotate SVs (use raw bedpe) but still label them prettyRainfallPlot(      this_sample_id = \"DOHH-2\",      this_seq_type = \"genome\",      zoom_in_region = \"8:125252796-135253201\",      label_sv = TRUE,      annotate_sv = FALSE )  # Will use user-specified SV data sv <- get_manta_sv(     these_sample_ids = \"DOHH-2\" )  prettyRainfallPlot(      this_sample_id = \"DOHH-2\",      this_seq_type = \"genome\",      zoom_in_region = \"8:125252796-135253201\",      sv_data = sv,      label_sv = TRUE ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyStackedOncoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty stacked oncoplot — prettyStackedOncoplot","title":"Pretty stacked oncoplot — prettyStackedOncoplot","text":"Pretty stacked oncoplot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyStackedOncoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty stacked oncoplot — prettyStackedOncoplot","text":"","code":"prettyStackedOncoplot(   these_samples_metadata,   maf_data,   metadataColumns = \"pathology\",   sortByMetadataColumns,   seg_data,   sortByPGA = FALSE,   cn_state_matrix = NULL,   ashm_matrix,   regions_bed,   genes,   sortByGenes,   genes_CN_thresh,   secondPlotType = \"pretty_CN_heatmap\",   oncoplot_location = \"top\",   cluster_samples = FALSE,   secondPlotArgs,   oncoplotArgs,   returnEverything = FALSE,   plot_width = 15,   oncoplotHeight = 6,   secondPlotHeight = 6,   verbose = FALSE,   row_names_side = \"right\",   pctFontSize = 0 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyStackedOncoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty stacked oncoplot — prettyStackedOncoplot","text":"these_samples_metadata metadata data frame sample_id column. order sample IDs rows data frame dictate order samples oncoplot. maf_data data frame maf data used populate oncoplot. Required parameter. metadataColumns character vector column names specifies columns these_samples_metadata displayed oncoplot. secondPlotType Defaults pretty_CN_heatmap, currently option tested function. verbose Set TRUE ultra chatty mode","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/prettyStackedOncoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty stacked oncoplot — prettyStackedOncoplot","text":"","code":"suppressMessages(   suppressWarnings({  library(GAMBLR.open)  # Prepare some metadata  dlbcl_genome_meta = get_gambl_metadata() %>%    dplyr::filter(pathology==\"DLBCL\",                 seq_type==\"genome\") %>%   check_and_clean_metadata(.,duplicate_action=\"keep_first\")  # Get CN segments for these samples dlbcl_seg = get_cn_segments(dlbcl_genome_meta)  # Prepare CN matrix cn_mat = segmented_data_to_cn_matrix(dlbcl_seg,                                      these = dlbcl_genome_meta,                                      adjust_for_ploidy = TRUE)  dlbcl_maf = get_all_coding_ssm(dlbcl_genome_meta)  })) #> Error in get_all_coding_ssm(dlbcl_genome_meta): could not find function \"get_all_coding_ssm\"  genes=c(\"KMT2D\",\"BCL2\",\"CREBBP\",\"EZH2\",\"MYD88\",\"CD79B\",\"TP53\",         \"PIM1\",\"CARD11\",\"SGK1\",\"SOCS1\",'TET2',\"SPEN\",         \"ETV6\",\"CD83\",\"B2M\",\"S1PR2\",\"GNA13\",\"BTG1\",         \"BTG2\",\"DDX3X\",\"KLHL6\",\"HIST1H1E\",\"TBL1XR1\",\"SMARCA4\")  # we will only sort on the mutation status of these # genes and in this order sortGenes = c(\"TP53\",\"KMT2D\",\"BCL2\",\"EZH2\",\"MYD88\",\"CD79B\")    CN_thresh = c(\"REL\"=4,               \"CDKN2A\"=1,               \"MIR17HG\"=4,               \"TP53\"=1,               \"TNFRSF14\"=1,               \"TNFAIP3\"=1)  # oncoplot on top with column order dicted by the mutation status # of sortGenes (in the order of the genes appearance in that vector)  suppressMessages(   suppressWarnings({ prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta,                           maf_data = dlbcl_maf,                         metadataColumns = c(\"pathology\",\"lymphgen\"),                         sortByMetadataColumns = c(\"pathology\",\"lymphgen\"),                         cn_state_matrix = cn_mat,                         genes_CN_thresh = CN_thresh,                         genes = genes,                         sortByGenes = sortGenes)  })) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'dlbcl_maf' not found # oncoplot on top. Clustering of mutations is used to order the columns. suppressMessages(   suppressWarnings({ prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta,                         maf_data = dlbcl_maf,                       metadataColumns = c(\"pathology\",\"lymphgen\"),                       cluster_samples = TRUE,                       cn_state_matrix = cn_mat,                       genes_CN_thresh = CN_thresh,                       genes = genes)  })) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'dlbcl_maf' not found # make a list of arguments for the second (here, the upper) plot CN_args = list(\"keep_these_chromosomes\"=c(\"2\"),               \"scale_by_sample\" = TRUE) suppressMessages(   suppressWarnings({  prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta,                      maf_data = dlbcl_maf,                      sortByGenes = \"REL\",                      metadataColumns = c(\"pathology\",\"lymphgen\"),                      oncoplot_location = \"bottom\",                      secondPlotArgs = CN_args,                      cn_state_matrix = cn_mat,                      genes_CN_thresh = CN_thresh,                      genes = genes,                      oncoplotHeight = 8,                      secondPlotHeight=3)  })) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'dlbcl_maf' not found # make a list of arguments for the second (here, the upper) plot CN_args = list(               \"scale_by_sample\" = TRUE,               \"hide_these_chromosomes\" = \"X\")  # Specifying sortByGenes automatically ensures those genes # are sorted by their CN status then mutation status when # oncoplot_location is \"bottom\". # The order in the upper plot restricts the order of the lower plot.  suppressMessages(   suppressWarnings({ prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta,                      maf_data = dlbcl_maf,                      sortByGenes = \"TP53\",                      metadataColumns = c(\"pathology\",\"lymphgen\"),                      oncoplot_location = \"bottom\",                      secondPlotArgs = CN_args,                      cn_state_matrix = cn_mat,                      genes_CN_thresh = CN_thresh,                      genes = genes,                      secondPlotHeight=9) })) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'dlbcl_maf' not found  some_regions = create_bed_data(GAMBLR.data::grch37_ashm_regions,                               fix_names = \"concat\",                               concat_cols = c(\"gene\",\"region\"),sep=\"-\")  suppressMessages(   suppressWarnings({ simple_ashm_mat =   get_ashm_count_matrix(some_regions,                        these_samples_metadata = dlbcl_genome_meta)   prettyStackedOncoplot(these_samples_metadata = dlbcl_genome_meta,                      maf_data = dlbcl_maf,                      regions_bed= some_regions,                      metadataColumns = c(\"pathology\",\"lymphgen\"),                      oncoplot_location = \"bottom\",                      ashm_matrix = simple_ashm_mat,                     secondPlotType = \"prettyMutationDensity\",                      secondPlotArgs = list(\"merge_genes\"=TRUE,                                            region_fontsize=3),                      genes = genes,                     cluster_samples = TRUE,                     secondPlotHeight = 9)  })) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'dlbcl_maf' not found"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_CN_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Copy Number Heatmap — pretty_CN_heatmap","title":"Pretty Copy Number Heatmap — pretty_CN_heatmap","text":"Pretty Copy Number Heatmap","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_CN_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Copy Number Heatmap — pretty_CN_heatmap","text":"","code":"pretty_CN_heatmap(   cn_state_matrix,   scale_by_sample = FALSE,   these_samples_metadata,   keep_sample_order = FALSE,   metadataColumns = c(\"pathology\"),   expressionColumns,   genome_build = \"grch37\",   cluster_columns = FALSE,   cluster_rows = TRUE,   show_row_names = FALSE,   show_column_names = FALSE,   keep_these_chromosomes,   hide_these_chromosomes,   keep_these_bins,   hide_annotations,   sortByBins,   sortByGenes,   splitByBinState,   sortByPGA = FALSE,   sortByMetadataColumns,   labelTheseGenes,   labelTheseCytobands,   highlightTheseRegions,   bin_label_fontsize = 5,   bin_label_nudge = 1.03,   bin_label_rotation = 45,   drop_if_PGA_below = 0,   drop_if_PGA_above = 1,   focus_on_these_bins,   geneBoxPlot,   show_bottom_annotation_name = FALSE,   bottom_annotation_name_side = \"left\",   left_annotation_name_side = \"top\",   bin_labels,   legend_direction = \"horizontal\",   legend_position = \"bottom\",   legend_row = 2,   legend_col = 3,   metadataBarFontsize = 5,   metadataBarHeight = 1.5,   boxplot_orientation = \"vertical\",   return_data = FALSE,   drop_bin_if_sd_below = 0,   flip = FALSE,   max_CN_allowed = 6,   verbose = FALSE,   rotate = FALSE,   width = 15,   height = 6,   cluster_samples,   cluster_regions )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_CN_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Copy Number Heatmap — pretty_CN_heatmap","text":"cn_state_matrix output get_cn_states scale_by_sample Set TRUE scale CN values within sample_id these_samples_metadata output get_gambl_metadata keep_sample_order FALSE. Set TRUE ensure samples order metadata metadataColumns One columns metadata want display beside heatmap expressionColumns Optional: One columns metadata include gene expression values want shown cluster_columns Set TRUE enable clustering genomic regions (columns) based CN value across patients heatmap cluster_rows Set TRUE enable clustering genomic regions (columns) based CN value across regions heatmap show_row_names Set TRUE display ID every bin (region) shown heatmap show_column_names Set TRUE display sample_id every sample shown heatmap keep_these_chromosomes vector chromosome names include (others excluded) hide_these_chromosomes vector chromosome names exclude (others included unless keep_these_chromosomes specified) keep_these_bins vector bin names include (others excluded) hide_annotations vector annotation names suppress legends plot sortByBins Optional: vector containing one names genomic bins used order heatmap rows. splitByBinState Optional: single genomic bin used split heatmap based CN state bin sortByPGA Optional: Sort rows based percent genome altered (PGA) instead options sortByMetadataColumns vector containing one names columns metadata used order rows overall within slices (combined splitByBinState geneBoxPlot) labelTheseGenes vector Hugo gene symbols whose location indicated top heatmap bin_label_fontsize Font size gene labels (default 5) bin_label_nudge Increase decrease value shift gene labels /(default 1.03) bin_label_rotation Rotate direction bin label. Default 45. drop_if_PGA_below Lower limit proportion genome altered (PGA). Samples value dropped (default 0) drop_if_PGA_above Upper limit proportion genome altered (PGA). Samples value dropped (default 1) focus_on_these_bins Mask regions outside bins (set CN 0). Useful visualizing GISTIC results. geneBoxPlot Optional: Specify Hugo symbol single gene embed box plots adjacent heatmap. Expression data gene must present metadata column name. show_bottom_annotation_name set TRUE label bottom annotation tracks details bottom_annotation_name_side using show_bottom_annotation_name, set \"left\" \"right\" relocate names left_annotation_name_side side put name metadata annotations (top bottom) bin_labels Instead automatically labeling genes, can instead explicitly provide list labels bins heatmap. names element match bin. value element label shown. option can used skip gene location look-ups (see examples). legend_direction orientation use legend legend_position put legend legend_row many rows legend layout legend_col many columns legend layout boxplot_orientation Either \"horizontal\" \"vertical\" (default: horizontal) return_data Specify TRUE get internal data back including heatmap object drop_bin_if_sd_below Force bins standard deviation value excluded flip Optionally, flip rows/columns resulting heatmap. Default FALSE. verbose Control verbosity console output. Default FALSE. width Set width heatmap. Default 10. cluster_samples intuitive alias cluster_rows, especially combining rotate = TRUE cluster_regions intuitive alias cluster_columns","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_CN_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Copy Number Heatmap — pretty_CN_heatmap","text":"list (return_data = TRUE)","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_CN_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Copy Number Heatmap — pretty_CN_heatmap","text":"","code":"suppressMessages(library(dplyr)) suppressMessages(library(GAMBLR.open)) #get some metadata for subsetting the data to just one pathology (DLBCL) dlbcl_genome_meta = suppressMessages(get_gambl_metadata()) %>%                     filter(pathology==\"DLBCL\",                     seq_type==\"genome\")  #remove any duplicate sample_id/seq_type combinations meta_clean = check_and_clean_metadata(dlbcl_genome_meta,                                       duplicate_action = \"keep_first\") #> Duplicate rows (keeping first occurrence) for 'sample_id' and 'seq_type' have been dropped.  # Create the copy number matrix using the helper functions all_segments = get_cn_segments(these = meta_clean) #> Using the bundled CN segments (.seg) calls in GAMBLR.data... dlbcl_cn_binned = segmented_data_to_cn_matrix(                                   seg_data = all_segments,                                   strategy=\"auto_split\",                                   n_bins_split=1300,                                   these_samples_metadata = meta_clean)  # Generate a basic genome-wide CN heatmap pretty_CN_heatmap(cn_state_matrix=dlbcl_cn_binned,                   these_samples_metadata = meta_clean,                   hide_annotations = \"chromosome\") #> Warning: The input is a data frame-like object, convert it to a matrix.   # Disable row (sample) clustering and restrict to a few chromosomes # and highlight some genes of interest pretty_CN_heatmap(cn_state_matrix=dlbcl_cn_binned,   these_samples_metadata = meta_clean,   hide_annotations = \"chromosomes\",   keep_these_chromosomes = c(\"9\",\"17\"),   cluster_rows=FALSE,   labelTheseGenes = c(\"CDKN2A\",\"TP53\")) #> mapping genes to bins #> Warning: The input is a data frame-like object, convert it to a matrix.   if (FALSE) { # \\dontrun{  # get gene expression data  gene_exp_all = get_gene_expression(all_genes=T,                                     lazy_join=T,                                      arbitrarily_pick = TRUE,                                      HGNC=T,format=\"wide\")   genome_meta_exp = left_join(get_gambl_metadata() %>%     dplyr::filter(seq_type==\"genome\") %>%     dplyr::select(sample_id,pathology,lymphgen),     dplyr::select(gene_exp_all,-sample_id),     by=c(\"sample_id\"=\"genome_sample_id\")) %>%      filter(!is.na(MYC)) } # } # Include gene expression data and embed a box plot showing the expression of one gene across different CN states  if (FALSE) { # \\dontrun{  pretty_CN_heatmap(cn_state_matrix=all_states_binned,    these_samples_metadata = filter(genome_meta_exp,pathology==\"DLBCL\"),    hide_annotations = \"chromosomes\",    cluster_rows=F,    geneBoxPlot = \"TP53\",    boxplot_orientation=\"horizontal\",bin_label_fontsize = 9,bin_label_nudge = 19  ) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty MAF summary — pretty_MAF_summary","title":"Pretty MAF summary — pretty_MAF_summary","text":"Generates visually appealling alternative MAFtools `plotmafSummary“.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty MAF summary — pretty_MAF_summary","text":"","code":"pretty_MAF_summary(   maf_data,   base_size = 4,   top_n = 10,   point_size = 0.5,   returnEverything = FALSE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty MAF summary — pretty_MAF_summary","text":"maf_data data frame containing mutation data. base_size Base size fonts use Morons theme top_n Number genes show top_n panel (default 10) point_size Size points use ggbeeswarm plot (default 0.5) returnEverything Set TRUE get underlying numbers panels list","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty MAF summary — pretty_MAF_summary","text":"plot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pretty MAF summary — pretty_MAF_summary","text":"function reproduces multi-panel MAF summary plot generated MAFtools. colour, plot aesthetics etc utilize GAMBLR colours consistent GAMBLR.viz plots prettyOncoplot.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_MAF_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty MAF summary — pretty_MAF_summary","text":"","code":"suppressMessages(library(GAMBLR.open)) FL_meta <- GAMBLR.open::get_gambl_metadata() %>%     dplyr::filter(pathology == \"FL\") %>%     check_and_clean_metadata(.,duplicate_action=\"keep_first\") #> Using the bundled metadata in GAMBLR.data... FL_coding <- GAMBLR.open::get_coding_ssm(these_samples_metadata = FL_meta) #> Using the bundled SSM calls (.maf) calls in GAMBLR.data... #> after linking with metadata, we have mutations from 215 samples  pretty_MAF_summary(FL_coding)   pretty_MAF_summary(FL_coding, top_n = 22, base_size = 6)"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_circular_mutation_frequency_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","title":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","text":"pretty_circular_mutation_frequency_heatmap","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_circular_mutation_frequency_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","text":"","code":"pretty_circular_mutation_frequency_heatmap(   prettyOncoplot_output,   cn_status_matrix,   collated_results,   these_samples_metadata,   genes,   cluster = T,   keep_these_pathologies,   min_sample_num = 20,   col_fun,   col_theme,   return_data = FALSE,   dend_location = \"inside\",   clustering_distance_method = \"euclidean\",   border = T,   split_by_type = FALSE,   rotate_degrees = 0,   gap.degree = 15,   show.sector.labels = FALSE,   label_cex = 0.5,   rownames_cex = 0.5,   include_legend = F,   colour_labels = F,   label_group = \"text\",   label_alpha )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_circular_mutation_frequency_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","text":"prettyOncoplot_output output prettyOncoplot function cn_status_matrix output get_cn_states collated_results list data frames sample_id rownames features column names these_samples_metadata data frame metadata. Usually output [GAMBLR.results::get_gambl_metadata]. genes vector genes label cluster Whether perform clustering. Default TRUE (clustering performed). keep_these_pathologies vector pathology values show plot. remaining rows ignored. min_sample_num Minimum number samples pathology considered plot. Pathologies less number excluded. (20) col_fun Color function modify default color pallette heatmap. col_theme Alternatively, provide color theme instead  `col_fun` change default colors heatmap. return_data Conditionally return formatted data used plotting. Default FALSE (image plotted data returned). dend_location Location dendrogram. Default \"inside\". clustering_distance_method Clustering method. Default \"euclidean\". border Whether draw border around heatmap. Default TRUE (border). split_by_type Whether split mutations type. Default FALSE (splitting). rotate_degrees Rotate labels. Default 0 (rotation). gap.degree Gap degree. Default 15. show.sector.labels Show labels sector heatmap. Default FALSE (labels). label_cex Number indicating amount plotting text symbols scaled relative default displaying labels. Default 0.5. rownames_cex Number indicating amount plotting text symbols scaled relative default displaying rownames. Default 0.5. include_legend Whether include legend. Default FALSE (legend). colour_labels Optionally color labels. Default FALSE (coloring). label_group group labels. Default \"text\". label_alpha Value 0 1 control alpha label.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_circular_mutation_frequency_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","text":"Nothing list data frames (return_data = TRUE)","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_circular_mutation_frequency_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pretty_circular_mutation_frequency_heatmap — pretty_circular_mutation_frequency_heatmap","text":"","code":"library(dplyr) library(GAMBLR.open) suppressMessages(   suppressWarnings({  metadata <- get_gambl_metadata() %>%    dplyr::filter(!seq_type == \"mrna\") %>%    dplyr::filter(pathology %in% names(get_gambl_colours(\"pathology\"))) %>%    check_and_clean_metadata(.,duplicate_action=\"keep_first\")  all_coding <- get_coding_ssm(these_samples_metadata = metadata)  genes <- lymphoma_genes %>%     dplyr::filter(DLBCL|FL|BL) %>%     dplyr::pull(Gene) %>%     unique %>%     sort  oncoplot_output <- prettyOncoplot(     all_coding,     genes = genes,     minMutationPercent = 2,     these_samples_metadata = metadata,     simplify_annotation = TRUE,     return_inputs = TRUE )  # Basic plot pretty_circular_mutation_frequency_heatmap(     prettyOncoplot_output = oncoplot_output,     keep_these_pathologies = c(         \"FL\", \"DLBCL\", \"PMBCL\", \"BL\", \"HGBL\"     ) ) }))   suppressMessages(   suppressWarnings({ # Add sv layer all_sv <- get_manta_sv(these_samples_metadata = metadata) annotated_sv <- annotate_sv(all_sv) %>%     dplyr::filter(gene %in% genes, !is.na(partner)) %>%     dplyr::select(sample_id = tumour_sample_id, gene)  # This is to replicate the output format of collate_sv sv_collated <- annotated_sv %>%     dplyr::mutate(         gene = paste(\"manta\", gene, \"sv\", sep = \"_\"),         mutated = \"POS\"     ) %>%     dplyr::distinct() %>%     tidyr::pivot_wider(         names_from = gene,         values_from = mutated     ) %>%     replace(is.na(.), \"NEG\")  # Plot SSM + SVs pretty_circular_mutation_frequency_heatmap(     collated_results = list(sv_collated),     prettyOncoplot_output = oncoplot_output,     these_samples_metadata = metadata ) }))    suppressMessages(   suppressWarnings({ regions_bed = GAMBLR.utils::create_bed_data(GAMBLR.data::grch37_ashm_regions,                               fix_names = \"concat\",                               concat_cols =c(\"gene\",\"region\"),                               sep=\"-\") # Add aSHM data ashm_freq <- get_ashm_count_matrix(     these_samples_metadata = metadata,     regions_bed = regions_bed,     this_seq_type = \"genome\",     projection = \"grch37\" )  ashm_freq_collated <- mutate(ashm_freq,across(,~ifelse(.x>0,1,0)))  ashm_freq_collated <- ashm_freq_collated[,colSums(ashm_freq_collated) >130] ashm_freq_collated <- tibble::rownames_to_column(ashm_freq_collated,                                                  \"sample_id\")  # Comprehensive plot with SSM + SV + aSHM and some non-default arguments pretty_circular_mutation_frequency_heatmap(     collated_results = list(sv_collated, ashm_freq_collated),     prettyOncoplot_output = oncoplot_output,     these_samples_metadata = metadata,     keep_these_pathologies = c(\"DLBCL\", \"FL\", \"BL\"),     split_by_type = TRUE,     colour_labels = TRUE,     label_cex = 0.4,     rownames_cex = 0.4,     include_legend = TRUE )  }))"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty Lollipop Plot. — pretty_lollipop_plot","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"Generates visually appealing lollipop plot.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"","code":"pretty_lollipop_plot(   maf_df,   gene = NULL,   plot_title,   by_allele = TRUE,   max_count = 10,   include_silent = FALSE,   labelPos = NULL,   show_rate = FALSE,   title_size = 8,   x_axis_size = 4,   domain_label_size = 0,   aa_label_size = 3 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"maf_df data frame containing mutation data. gene gene symbol plot. plot_title Optional, title plot. Default gene. by_allele Set FALSE consider mutations codon equivalent. FALSE, combined labelPos, labels indicate amino acid number. Default TRUE. include_silent Logical parameter indicating whether include silent mutations coding mutations. Default FALSE. labelPos Specify AA positions label plot (default labels).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"lollipop plot.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"Retrieve maf data specific sample set samples. gene interest can visualized given maf data. Silent mutations can visualized setting include_silent TRUE.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_lollipop_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty Lollipop Plot. — pretty_lollipop_plot","text":"","code":"library(GAMBLR.open) suppressMessages(   suppressWarnings({  #get meta data (BL_Thomas) metadata <- suppressMessages(get_gambl_metadata()) %>%     filter(seq_type == \"genome\") %>%     check_and_clean_metadata(.,duplicate_action=\"keep_first\")  maf_df <- get_coding_ssm(     these_samples_metadata = metadata )  #construct pretty_lollipop_plot. lollipop_result <- pretty_lollipop_plot(maf_df, \"DDX3X\") print(lollipop_result) }))"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_mutual_exclusivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty mutual exclusivity plot — pretty_mutual_exclusivity","title":"Pretty mutual exclusivity plot — pretty_mutual_exclusivity","text":"Pretty mutual exclusivity plot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_mutual_exclusivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty mutual exclusivity plot — pretty_mutual_exclusivity","text":"","code":"pretty_mutual_exclusivity(   maf_data,   mut_mat,   cn_mat,   corr_mat,   p_mat,   min_mutation_percent = 2,   genes,   these_samples_metadata,   q_threshold = 0.05,   drop_positive_correlations = FALSE,   exclude_insignificant_genes = TRUE,   engine = \"ggcorrplot\",   font_size = 7,   use_alpha = FALSE,   clustering_distance = \"binary\",   gene_anno_df,   size_factor = 0.01,   split,   return_data = FALSE,   include_silent = FALSE,   include_hotspots = FALSE,   review_hotspots = FALSE,   bonferroni = FALSE,   verbose = FALSE,   metadataBarHeight = 3,   metadataBarFontsize = 4,   legend_direction = \"horizontal\",   annotate_by_pathology = TRUE,   show_heatmap_legend = TRUE,   cut_k,   width = 10 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_mutual_exclusivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty mutual exclusivity plot — pretty_mutual_exclusivity","text":"return_data Default False include_silent Default False include_hotspots Default False review_hotspots Default False bonferroni Default False verbose Default FALSE","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/pretty_mutual_exclusivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty mutual exclusivity plot — pretty_mutual_exclusivity","text":"","code":"suppressMessages(library(GAMBLR.open)) suppressMessages(library(ComplexHeatmap))  bl_fl_dlbcl_meta = get_gambl_metadata() %>%   dplyr::filter(pathology %in% c(\"DLBCL\",\"FL\",\"BL\"), seq_type != \"mrna\") %>%   check_and_clean_metadata(.,duplicate_action=\"keep_first\") #> Using the bundled metadata in GAMBLR.data... #> Duplicate rows (keeping first occurrence) for 'sample_id' and 'seq_type' have been dropped. dlbcl_meta = dplyr::filter(bl_fl_dlbcl_meta,pathology==\"DLBCL\") %>%              check_and_clean_metadata(.,duplicate_action=\"keep_first\")  all_coding <- get_all_coding_ssm(bl_fl_dlbcl_meta) #> Error in get_all_coding_ssm(bl_fl_dlbcl_meta): could not find function \"get_all_coding_ssm\"  if (FALSE) { # \\dontrun{ lymphgens = get_lymphgen(flavour = \"no_cnvs.no_sv.with_A53\") lg_feats = lymphgens$feature_annotation lg_genes = unique(lg_feats$Feature)  pretty_mutual_exclusivity(    maf_data = all_coding,    genes = lg_genes,    these = dlbcl_meta,    size_factor =  0.007,    engine = \"ComplexHeatmap\",    font_size = 6,    use_alpha = FALSE,    clustering_distance = \"binary\",    include_hotspots = TRUE) } # }  fl_bl_dlbcl_genes = dplyr::filter(GAMBLR.data::lymphoma_genes,   FL_Tier == 1 | BL_Tier == 1 | DLBCL_Tier ==1) %>%   pull(Gene)  # because the first steps of this are slow we can # store the output matrix as a shortcut for subsequent runs  suppressWarnings(   suppressMessages({ outs = pretty_mutual_exclusivity(   maf_data = all_coding,   genes = fl_bl_dlbcl_genes,   these = bl_fl_dlbcl_meta,   engine = \"ComplexHeatmap\",   font_size = 5,   use_alpha = TRUE,   clustering_distance = \"binary\",   include_hotspots = FALSE,   return_data = TRUE ) draw(outs$plot)  })) #> Error: object 'all_coding' not found  suppressWarnings(   suppressMessages({  pretty_mutual_exclusivity(   mut_mat=outs$mut_mat,   corr_mat = outs$corr_mat,   p_mat = outs$p_mat,   maf_data = all_coding,   genes = fl_bl_dlbcl_genes,   these = bl_fl_dlbcl_meta,   engine = \"ComplexHeatmap\",   font_size = 5,   use_alpha = TRUE,   size_factor = 0.004,   clustering_distance = \"euclidean\",   include_hotspots = FALSE )  })) #> Error: object 'outs' not found  suppressWarnings(   suppressMessages({  pretty_mutual_exclusivity(   p_mat = outs$p_mat,   maf_data = all_coding,   genes = fl_bl_dlbcl_genes,   these = dlbcl_meta,   engine = \"ComplexHeatmap\",   font_size = 5,   use_alpha = TRUE,   size_factor = 0.004,   clustering_distance = \"euclidean\",   legend_direction = \"vertical\",   include_hotspots = FALSE)  })) #> Error: object 'all_coding' not found"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap — splendidHeatmap","title":"Heatmap — splendidHeatmap","text":"Create highly customizable heatmap using ComplexHeatmap package.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap — splendidHeatmap","text":"","code":"splendidHeatmap(   this_matrix,   importance_values,   these_samples_metadata,   max_number_of_features_per_group = 10,   splitColumnName = \"pathology\",   metadataColumns = c(\"pathology\"),   numericMetadataColumns = NULL,   numericMetadataMax = NULL,   prioritize_ordering_on_numeric = TRUE,   custom_colours = NULL,   legend_direction = \"horizontal\",   legend_position = \"bottom\",   legend_row = 3,   legend_col = 3,   fontSizeGene = 6,   metadataBarHeight = 1.5,   leftStackedWidth = 4,   metadataBarFontsize = 5,   groupNames = NULL )"},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap — splendidHeatmap","text":"this_matrix data frame column Tumor_Sample_Barcode column feature. Can binary. Expected contain negative values. importance_values Provide data frame feature (rows) group (columns) numeric values representative feature importance. Can obtained rf$inportance basis(NMF). these_samples_metadata Data frame containing metadata samples. max_number_of_features_per_group Optional argument indicate many features group considered display. Default 10. splitColumnName Optional argument indicate metadata column split . Default set pathology. metadataColumns vector containing categorical column names want plot . numericMetadataColumns vector containing numeric columns want plot . numericMetadataMax numeric vector cutoffs apply numeric columns . prioritize_ordering_on_numeric Logical argument specifying whether sort numeric metadata first metadata columns. Default TRUE (sort numeric metadata, columns). custom_colours Provide named vector (named list vectors) containing custom annotation colours want use standartized pallette. legend_direction Optional argument indicate whether legend horizontal (default) vertical position. legend_position Optional argument indicate legend drawn. default set bottom, can also accept top, right, left. legend_row Fiddle widen narrow legend (default 3). legend_col Fiddle widen narrow legend (default 3). fontSizeGene Font size gene labels (default 6). metadataBarHeight Optional argument adjust height bar annotations. default 1.5 leftStackedWidth Optional argument control wide stacked plot left . default 4. metadataBarFontsize Optional argument control font size metadata annotations. default 5. groupNames optional vector group names displayed heatmap. length number groups shown. Default NULL (labels).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap — splendidHeatmap","text":"Nothing","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap — splendidHeatmap","text":"Make heatmap looking cute using ComplexHeatmap. metadata expected follow structure column naming used GAMBL. provide non-GAMBL samples metadata, must include least columns names corresponding annotation tracks column \"Tumor_Sample_Barcode\". showing sample ids. metadata can contain numeric columns, plotted numeric variables annotation. feature matrix supplied `this_matrix` argument. expected samples rows, features columns. argument importance_values similar widths NMF object importance values feature/group RF models. also expected column names (names groups shown heatmap) rownames (corresponding feature ids).","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/reference/splendidHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap — splendidHeatmap","text":"","code":"if (FALSE) { # \\dontrun{ splendidHeatmap(this_matrix = data,                 importance_values = rf$importance[,c(1:3)],                 these_samples_metadata = MASTER.METADATA,                 splitColumnName = \"pathology\",                 metadataColumns = c(\"cohort\",                                     \"pathology\",                                     \"sex\",                                     \".\",                                     \"COO_consensus\",                                     \"DHITsig_consensus\",                                     \"seq_type\"),                 numericMetadataColumns = \".\",                 numericMetadataMax = 0.7,                 custom_colours = custom_colours) } # }"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Prepare setup","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"first import necessary packages:","code":"# Load packages library(GAMBLR.open) suppressMessages(library(dplyr))"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Metadata","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"usual, typically begin analysis loading metadata restricting rows samples interest based number criteria. , ’ll separately look data WGS (genome seq_type) whole exome sequencing capture seq_type. shows data 529 genomes 1783 exomes just DLBCLs.","code":"dlbcl_genome_meta = suppressMessages(get_gambl_metadata(seq_type_filter = \"genome\")) %>%                     filter(pathology==\"DLBCL\")  dlbcl_exome_meta = suppressMessages(get_gambl_metadata(seq_type_filter = \"capture\")) %>%                     filter(pathology==\"DLBCL\")  #remove any duplicate sample_id/seq_type combinations g_meta_clean = check_and_clean_metadata(dlbcl_genome_meta,                                       duplicate_action = \"keep_first\") #remove any duplicate sample_id/seq_type combinations e_meta_clean = check_and_clean_metadata(dlbcl_exome_meta,                                       duplicate_action = \"keep_first\")  nrow(g_meta_clean) [1] 529 nrow(e_meta_clean) [1] 1783"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Projections","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"number samples copy number results available isn’t necessarily going match . Importantly, studies older relied grch37 (.e. hg19) genome build whereas studies used flavour hg38. GAMBL, aim project results grch37 hg38 results relatively comparable studies. However, efficiency, GAMBLR.data doesn’t projections every data set (sorry!). Let’s start determining samples metadata data available case results available one projection. seem copy number segments available 48 samples hg38. grch37 data 214 samples. exome data? Ouch! provided copy number data genome samples (far). Let’s proceed largest data set, genome samples grch37 projection.","code":"g_segments_grch37 = get_cn_segments(these = g_meta_clean,                                     projection = 'grch37')  g_segments_hg38 = get_cn_segments(these = g_meta_clean,                                     projection = 'hg38')  length(unique(g_segments_grch37$ID)) [1] 214 length(unique(g_segments_hg38$ID)) [1] 48 e_segments_grch37 = get_cn_segments(these = e_meta_clean,                                     projection = 'grch37')  e_segments_hg38 = get_cn_segments(these = e_meta_clean,                                     projection = 'hg38')  length(unique(e_segments_grch37$ID)) [1] 0 length(unique(e_segments_hg38$ID)) [1] 0"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"From segments to bins","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"Segmented copy number data can difficult work variety reasons. coordinate genome, ’s unnecessarily complicated determine copy number samples. simplify breaking genome series bins determining copy number state bin across samples. yields N M matrix N number samples copy number data M number bins. segmented_data_to_cn_matrix function GAMBLR.utils makes easy. example, ’ll 214 using 2500 bins. ’ve provided metadata even though ’s strictly necessary. can useful pass seg_data contains rows patients don’t plan analyze. rows removed slow process begins. took 19 finish. might imagine, increasing n_bins_split value make process slower increase resolution analysis. can see, process took considerably longer time additional samples weren’t dropped. might guessed strategy parameter, strategies converting segmented data copy number matrix don’t rely equal-sized bins. options ‘custom_regions’,‘cytobands’ ‘GISTIC’. covered another tutorial. can find segmented_data_to_cn_matrix documentation.","code":"time_start = Sys.time(); dlbcl_cn_binned = segmented_data_to_cn_matrix(                                   seg_data = g_segments_grch37,                                   strategy=\"auto_split\",                                   n_bins_split=2500,                                   these_samples_metadata = g_meta_clean) time_end = Sys.time(); elapsed = round(time_end - time_start) print(elapsed) Time difference of 19 secs every_seg = get_cn_segments(get_gambl_metadata()) length(unique(every_seg$ID)) [1] 448 time_start = Sys.time(); all_cn_binned = segmented_data_to_cn_matrix(                                   seg_data = every_seg,                                   strategy=\"auto_split\",                                   n_bins_split=2500) #no metadata provided [1] \"missing these_samples_metadata\" time_end = Sys.time(); elapsed = round(time_end - time_start) print(elapsed) Time difference of 28 secs"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"DLBCL Copy Number Heatmap","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"Let’s start basic example. Using copy number matrix just created, run pretty_CN_heatmap. functions, provide metadata table via these_samples_metadata. can often unambiguously refer parameter word .","code":"# Generate a basic genome-wide CN heatmap pretty_CN_heatmap(cn_state_matrix=dlbcl_cn_binned,                   these_samples_metadata = g_meta_clean,                   hide_annotations = \"chromosome\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/CopyNumberHeatmap.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Copy Number Heatmap for everything","title":"Tutorial: Copy Number Heatmaps – GAMBLR.viz","text":"earlier example, generated larger matrix grch37 copy number data GAMBLR.data. nrow(all_cn_binned) samples . Let’s see looks like heatmap. time, ’ll tell function scale copy number values average ploidy sample using scale_by_sample.","code":"all_genome_meta = get_gambl_metadata() all_genome_meta = check_and_clean_metadata(all_genome_meta,                                       duplicate_action = \"keep_first\") #drop any genomes that don't have copy number data  all_genome_meta = dplyr::filter(all_genome_meta,sample_id %in% rownames(all_cn_binned)) # Generate a genome-wide CN heatmap without clustering # Instead, we'll order samples based on pathology and lymphgen pretty_CN_heatmap(cn_state_matrix=all_cn_binned,                   these_samples_metadata = all_genome_meta,                   scale_by_sample = TRUE,                   cluster_rows=F,                   metadataColumns = c(\"pathology\",\"lymphgen\"),                   sortByMetadataColumns = c(\"pathology\",\"lymphgen\"),                   bin_label_nudge = 1.08,                   labelTheseGenes = c(\"CDKN2A\",\"TP53\"),                   hide_annotations = \"chromosome\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/data_q.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Prepare setup","title":"Tutorial: Exploring data quality – GAMBLR.viz","text":"first import necessary packages: Next, get data display. explored obrain data bundled GAMBLR.data difference available objects, use demonstrated approaches retreive metadata simple somatic mutations. demonstration purposes, focus largest whole exome sequencing studies. Next, can take advantage collate_results() function GAMBLR.data add necessary QC metrics directly reported MIRAGE manuscript. Now metadata mutations want explore, ready start exploring visualizing data.","code":"# Load packages library(ggbeeswarm) library(ggExtra) library(tidyverse) library(GAMBLR.open) # Get metadata metadata <- gambl_metadata %>%     filter(         cohort %in% c(\"dlbcl_chapuy\", \"dlbcl_reddy\", \"dlbcl_schmitz\")     )  # Get mutations maf <- get_coding_ssm(     these_samples_metadata = metadata,     this_seq_type = \"capture\" ) metadata <- collate_results(     sample_table = metadata ) %>% left_join(metadata, ., by = \"sample_id\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/data_q.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Target space coverage across the studies","title":"Tutorial: Exploring data quality – GAMBLR.viz","text":"original manuscript highlights striking difference effective nonredundant coverage across target space (MeanCorrectedCoverage). Let’s see plot generated:  Indeed, coverage one studies different rest. plot, also shown panel B Figure 1 manuscript, also shows 5/999 samples study Reddy et al coverage figher sample lowest coverage study Schmitz et al! Seeing , logical question arises: difference sample quality affects ability detect coding mutations lymphoma genes?","code":"metadata %>%     ggplot(         aes(             x = study,             y = MeanCorrectedCoverage,             colour = ffpe_or_frozen         )     ) +     geom_boxplot(outlier.shape = NA) +     geom_quasirandom(         dodge.width = 0.8,         alpha = 0.5     ) +     coord_flip() +     facet_wrap(         ~seq_type,         ncol = 1,         scales = \"free\"     ) +     scale_colour_manual(values = get_gambl_colours()) +     theme_Morons(         my_legend_position = \"right\",         my_legend_direction = \"vertical\"     )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/data_q.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Correlation between coverage and mutation discovery","title":"Tutorial: Exploring data quality – GAMBLR.viz","text":"Next, can see whether limitation detect somatic mutations relevant genes sample poor quality. Indeed, plot replicates panel C Figure 1 manuscript shows direct effect:","code":"# reformat naming of the standard colors cols <- get_gambl_colours()[c(\"Schmitz\", \"Chapuy\", \"Reddy\")] names(cols) <- c(\"Schmitz, 2018\", \"Chapuy, 2018\", \"Reddy, 2017\")  # plot p <- metadata %>%     ggplot(         aes(             x = MeanCorrectedCoverage,             y = coding_mutations,             colour = study         )     ) +     geom_point(alpha = 0.5) +     scale_color_manual(values = cols) +     ylim(c(0, 1000)) +     xlim(c(0, 200)) +     theme_Morons(         base_size = 8,         my_legend_position = \"bottom\",         my_legend_direction = \"horizontal\"     )  # display density ggMarginal(     p,     type = \"density\",     groupColour = TRUE,     groupFill = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/data_q.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Find significant differences between low and high coverage groups","title":"Tutorial: Exploring data quality – GAMBLR.viz","text":"Next, can explore whether significant differences frequency mutations detected high low coverage. cutoff, arbitrarily selected value 25X sample considered “High” “Low” groups. reformat metadata convenient format: demonstation purposes, let’s focus set genes reported significantly mutated Reddy et al study. find genes, need search Pubmed gene lists, can convently retreive one GAMBLR.data objects: now can take look genes significantly different high low coverage groups:  ’s lot difference! can easily display information form oncoplot:","code":"mirage_meta <- metadata %>%     mutate(         good_coverage = ifelse(MeanCorrectedCoverage > 25 , \"TRUE\", \"FALSE\")     ) %>%     as.data.frame %>%     mutate(         sample_id = Tumor_Sample_Barcode,         `DNA source` = ifelse(             ffpe_or_frozen == \"ffpe\",             toupper(ffpe_or_frozen),             ffpe_or_frozen         ),         Pathology = pathology,         Study = study,         `Pairing status` = pairing_status,         Protocol = seq_type     ) genes <- GAMBLR.data::reddy_genes %>%     pull(hgnc_symbol) forest <- prettyForestPlot(     maf = maf,     genes = genes,     metadata = mirage_meta,     comparison_column = \"good_coverage\",     max_q = 0.1 ) forest$arranged # display genes in the order of decreasing difference gene_order <- forest$fisher %>%     arrange(desc(estimate)) %>%     pull(gene)   prettyCoOncoplot(     metadata = mirage_meta,     maf = maf,     comparison_column = \"good_coverage\",     label1 = paste0(         \"High coverage (>25X, N=\",         nrow(mirage_meta %>% filter(good_coverage == \"TRUE\")),         \")\"     ),     label2 = paste0(         \"Low coverage (<25X, N=\",         nrow(mirage_meta %>% filter(good_coverage == \"FALSE\")),         \")\"     ),     metadataColumns = c(         \"Pairing status\",         \"DNA source\",         \"Protocol\",         \"Study\",         \"MeanCorrectedCoverage\"     ),     numericMetadataColumns = \"MeanCorrectedCoverage\",     sortByColumns = \"MeanCorrectedCoverage\",     metadataBarHeight = 5,     metadataBarFontsize = 10,     fontSizeGene = 12,     legendFontSize = 7,     genes = gene_order,     keepGeneOrder = TRUE,     arrange_descending = TRUE,     legend_row = 2,     annotation_row = 2 ) [1] \"CDKN2A\"   \"CD58\"     \"TMEM30A\"  \"YY1\"      \"RARA\"     \"GNAS\"      [7] \"DDX10\"    \"GNAI2\"    \"FOXO1\"    \"TNFRSF14\" \"STAT6\"    \"BCL10\"    [13] \"CXCR4\"    \"XPO1\"     \"STAT3\"    \"ACTB\"     \"CCND3\"    \"UBE2A\"    [19] \"HNRNPU\"   \"TP53\"     \"FAS\"      \"NFKBIE\"   \"TNFAIP3\"  \"MEF2B\"    [25] \"BTG1\"     \"RB1\"      \"NFKBIA\"   \"BCL6\"     \"NOTCH2\"   \"CREBBP\"   [31] \"FOXP1\"    \"TOX\"      \"ETS1\"     \"PRDM1\"    \"MAP2K1\"   \"BTG2\"     [37] \"CARD11\"   \"PIK3CD\"   \"MYD88\"    \"PIM2\"     \"EBF1\"     \"TMSB4X\"   [43] \"TAF1\"     \"KMT2D\"    \"ETV6\"     \"ZEB2\"     \"SETD1B\"   \"CD79B\"    [49] \"POU2F2\"   \"IKZF3\"    \"KLHL14\"   \"TBL1XR1\"  \"B2M\"      \"DUSP2\"    [55] \"ARID1A\"   \"PIM1\"     \"SOCS1\" [1] \"CDKN2A\"   \"CD58\"     \"TMEM30A\"  \"YY1\"      \"RARA\"     \"GNAS\"      [7] \"DDX10\"    \"GNAI2\"    \"FOXO1\"    \"TNFRSF14\" \"STAT6\"    \"BCL10\"    [13] \"CXCR4\"    \"XPO1\"     \"STAT3\"    \"ACTB\"     \"CCND3\"    \"UBE2A\"    [19] \"HNRNPU\"   \"TP53\"     \"FAS\"      \"NFKBIE\"   \"TNFAIP3\"  \"MEF2B\"    [25] \"BTG1\"     \"RB1\"      \"NFKBIA\"   \"BCL6\"     \"NOTCH2\"   \"CREBBP\"   [31] \"FOXP1\"    \"TOX\"      \"ETS1\"     \"PRDM1\"    \"MAP2K1\"   \"BTG2\"     [37] \"CARD11\"   \"PIK3CD\"   \"MYD88\"    \"PIM2\"     \"EBF1\"     \"TMSB4X\"   [43] \"TAF1\"     \"KMT2D\"    \"ETV6\"     \"ZEB2\"     \"SETD1B\"   \"CD79B\"    [49] \"POU2F2\"   \"IKZF3\"    \"KLHL14\"   \"TBL1XR1\"  \"B2M\"      \"DUSP2\"    [55] \"ARID1A\"   \"PIM1\"     \"SOCS1\""},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Prepare setup","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"first import necessary packages: Next, get data display. metadata expected data frame one required column: sample_id another column contain sample annotations according comparison group. example, use example data set variant calls study identified genetic subgroup Burkitt lymphoma (BL). Next, obtain coding mutations used plotting. data data frame standartized maf format. purpose tutorial, focus small subset genes known significantly mutated BL. Now metadata mutations want explore, ready start visualizing data.","code":"# Load packages library(GAMBLR.open) library(tibble) library(dplyr) metadata <- get_gambl_metadata() %>%     filter(cohort == \"BL_Thomas\") maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\",     projection = \"hg38\" )  # How does it look like? dim(maf) [1] 47043    49 head(maf) %>%     select(         Tumor_Sample_Barcode,         Hugo_Symbol,         Variant_Classification     ) genomic_data Object Genome Build: hg38  Showing first 10 rows:   Tumor_Sample_Barcode Hugo_Symbol Variant_Classification 1                Akata        CPTP      Missense_Mutation 2                Akata      FNDC10      Missense_Mutation 3                Akata       MORN1      Missense_Mutation 4                Akata       MEGF6      Missense_Mutation 5                Akata       NPHP4                 Silent 6                Akata      GPR157      Missense_Mutation genes <- lymphoma_genes_bl_v_latest$Gene head(genes) [1] \"ARID1A\" \"BACH2\"  \"BCL6\"   \"BCL7A\"  \"BMP7\"   \"CCND3\""},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"The default forest plot","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"forest plot ready called default parameters just providing metadata data frame mutations standard maf format. example output default parameters: output function list containing following objects: - fisher: data frame detailed statistics Fisher’s test gene - mutmat: binary matrix used Fisher’s test - forest: ggplot2 object forest plot ORs Fisher’s test gene - bar: ggplot2 object wiht mutation frequencies Gene - arranged: display item forest bar plots nicely arranged side--side","code":"comparison_column <- \"EBV_status_inf\" # character of column name for comparison fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column ) names(fp) [1] \"fisher\"   \"forest\"   \"bar\"      \"arranged\" \"mutmat\""},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Report only significant differences","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"default, genes interest reported output. Fisher’s test performed, prettyForestPlot also calculates FDR can use report significant differences providing significance cutoff parameter max_q: now can take look genes passing significance cutoff:","code":"max_q <- 0.1 # only those qith Q value <= 0.1 will be reported fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column,     max_q = max_q ) fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Comparing categories with more than two groups","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"prettyForestPlot construcst 2x2 contingency tables run Fisher’s test find significant differences, can operate comparing 2 groups - want see difference ? handle scenario, can take advantage comparison_values parameter, used subset metadata requested groups perform testing plotting subset. Let’s see action:  plot exactly reproducing Supplemmental Figure 12D Thomas et al study!","code":"comparison_column <- \"genetic_subgroup\" # change the comparison column comparison_values <- c(\"IC-BL\", \"Q53-BL\") fp <- prettyForestPlot(     metadata = metadata,     maf = maf,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_values,     max_q = max_q )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Separating genes with hotspots","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"can additionally separate hotspots mutations compare separately. First, need annotate maf data, use annotate_hotspots GAMBLR family. function add new column maf named hot_spot indicating whether specific mutation hotspot region. GAMBLR.data version annotate_hotspots handles specific genes functionality annotate hotspots. Oh ! Looks like hotspots maf data. make sense, happened? Aha, hotspot annotation GAMBLR.data works data grch37 projection. maf hg38, ? One way lift maf data another projection using UCSC’s liftOver, GAMBLR family exactly function serves purpose: Can annotate hotspots now? Indeed, hotspots properly annotated maf correct projection. Now, can simply toggle separate_hotspots parameter perform separate comparisons within hotspots:","code":"# Annotate hotspots maf <- annotate_hotspots(maf)  # What are the hotspots? maf %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() < table of extent 0 x 0 > maf_grch37 <- liftover(     maf,     mode = \"maf\",     target_build = \"grch37\" ) %>% mutate(Chromosome = gsub(\"chr\", \"\", Chromosome)) %>% select(-hot_spot) # since it is empty we can just drop it maf_grch37 <- annotate_hotspots(maf_grch37)  # What are the hotspots? maf_grch37 %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() hot_spot Hugo_Symbol TRUE      CREBBP    1      EZH2      1      FOXO1    60      MYD88     2      STAT6     4 comparison_column <- \"EBV_status_inf\" fp <- prettyForestPlot(     metadata = metadata,     maf = maf_grch37,     genes = genes,     comparison_column = comparison_column,     max_q = max_q,     separate_hotspots = TRUE )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/forestplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Using binary matrix as input","title":"Tutorial: The prettiest forestplot – GAMBLR.viz","text":"Sometimes might useful different input format instead maf - example, binary matrix features. Can use prettyForestPlot case? Yes, sure can! First, let’s construct binary matrix. supplement maf non-coding mutations look aSHM regions addition coding mutations, already give us data correct projection: Now convert maf binary matrix: Next, supplement matrix non-coding mutation across aSHM regions can now combine coding non-coding features single matrix: Now can provide binary matrix prettyForestPlot regenerate Supplemmental Figure 12C Thomas et al study!","code":"maf <- get_ssm_by_samples(     these_samples_metadata = metadata ) maf$Variant_Classification %>% table .                3'Flank                  3'UTR                5'Flank                    1457                    513                   2957                   5'UTR        Frame_Shift_Del        Frame_Shift_Ins                    1102                    124                     97                     IGR           In_Frame_Del           In_Frame_Ins                     457                     40                     14                  Intron      Missense_Mutation      Nonsense_Mutation                   44397                   1859                    286        Nonstop_Mutation                    RNA                 Silent                       6                     74                    481           Splice_Region            Splice_Site Translation_Start_Site                     148                    114                     22 # Generate binary matrix coding_matrix <- get_coding_ssm_status(     these_samples_metadata = metadata,     maf_data = maf,     gene_symbols = genes,     include_hotspots = TRUE,     review_hotspots = TRUE ) # We'll use the aSHM regions defined in GAMBLR.data # Let our helper function massage it into a consistent format regions_bed = create_bed_data(somatic_hypermutation_locations_GRCh37_v0.2,                               fix_names=\"concat\",                               concat_cols=c(\"gene\",\"region\"),                               sep=\"-\")  # Generate matrix of mutations per each site ashm_matrix <- get_ashm_count_matrix(     regions_bed = regions_bed,     these_samples_metadata = metadata )  # Binarize matrix using arbitrary 3 muts/region cutoff ashm_matrix[ashm_matrix <= 3] = 0 ashm_matrix[ashm_matrix > 3] = 1 ashm_matrix <- ashm_matrix %>%     rownames_to_column(\"sample_id\") feature_matrix <- left_join(     coding_matrix,     ashm_matrix )  # Drop any fearures absent across at least 10 samples to clean any noise feature_matrix <- feature_matrix %>%     select_if(is.numeric) %>%     select(where(~ sum(. > 0, na.rm = TRUE) >= 10)) %>%     bind_cols(         feature_matrix %>% select(sample_id),         .     ) comparison_column <- \"genetic_subgroup\" comparison_values <- c(\"DGG-BL\", \"Q53-BL\") fp <- prettyForestPlot(     metadata = metadata,     mutmat = feature_matrix,     genes = genes,     comparison_column = comparison_column,     comparison_values = comparison_values,     max_q = max_q )  fp$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/getting_started.html","id":null,"dir":"Tutorials","previous_headings":"","what":"What are standartized colours?","title":"Tutorial: Getting started – GAMBLR.viz","text":"First, let’s explore standartized color pallettes GAMBLR.viz. stored list one GAMBLR.viz dependencies (GAMBLR.helpers) integral part visualizations. demonstration purposes, obtain standartized colours: colours available? colour groups? Many colours conviniently provided ensure consistency independent formatting case: example, color DLBCL COO returned, color used UNCLASS, U, UNC, Unclassified etc. Just purpose guide, define simple function display colour pallettes:","code":"all_c <- get_gambl_colours(     as_dataframe = TRUE ) str(all_c) 'data.frame':   328 obs. of  3 variables:  $ group : chr  \"chromosome\" \"chromosome\" \"chromosome\" \"chromosome\" ...  $ name  : chr  \"chr1\" \"chr2\" \"chr3\" \"chr4\" ...  $ colour: chr  \"#555FAB\" \"#CE3D31\" \"#749B58\" \"#F0E584\" ... table(all_c$group) aneuploidy                BL             blood chapuy_classifier                  8                 7                15                 6         chromosome          clinical            cohort               coo                 23                47                16                12        copy_number           domains               EBV                FL                 17                24                 4                 3   genetic_subgroup              hmrn            indels   lacy_classifier                 24                 8                 2                 8           lymphgen    lymphgenerator          mutation         pathology                 14                10                15                32            pos_neg          rainfall          seq_type               sex                 13                 7                 3                 6                svs              type                  2                 2 show_col <- function(data, group){     data %>%         filter(             !!sym(\"group\") == {{group}}         ) %>%         ggplot(             aes(                 x = name,                 y = 0,                 fill = colour,                 label = name             )         ) +         geom_tile(width = 0.9, height = 1) +         geom_text(color = \"white\", fontface=\"bold\") +         scale_fill_identity(guide = \"none\") +         coord_flip() +         theme_void() +         labs(title = toupper(group)) +         theme(plot.title = element_text(lineheight = 0.9,hjust=0.5,face=\"bold\")) }"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/getting_started.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Hex codes for B-cell lymphomas","title":"Tutorial: Getting started – GAMBLR.viz","text":"","code":"show_col(all_c, \"pathology\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/getting_started.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Hex codes for genetic subgroups","title":"Tutorial: Getting started – GAMBLR.viz","text":"","code":"show_col(all_c, \"genetic_subgroup\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/getting_started.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Hex codes for clinical variables","title":"Tutorial: Getting started – GAMBLR.viz","text":"","code":"show_col(all_c, \"clinical\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/getting_started.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Hex codes for Mutation types","title":"Tutorial: Getting started – GAMBLR.viz","text":"","code":"show_col(all_c, \"mutation\")"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Prepare setup","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"first import necessary packages: Next, get data display. metadata expected data frame one required column: Tumor_Sample_Barcode optional column want display annotation track. example, use example data set variant calls study identified genetic subgroup Follicular lymphoma (FL) associated histologic transformation DLBCL. Next, obtain coding mutations used plotting. data data frame standartized maf format. subset maf data frame coding mutations using prettyOncoplot. Much like tools, automatically handled display coding mutations. Now metadata mutations want explore, ready start visualizing data.","code":"# Load packages library(GAMBLR.open) library(dplyr) metadata <- get_gambl_metadata() %>%     filter(cohort == \"FL_Dreval\") maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" )  # How does it look like? dim(maf) [1] 44777    49 head(maf) %>%     select(         Tumor_Sample_Barcode,         Hugo_Symbol,         Variant_Classification     ) genomic_data Object Genome Build: grch37  Showing first 10 rows:   Tumor_Sample_Barcode Hugo_Symbol Variant_Classification 1             FL1001T1       AIFM1      Nonsense_Mutation 2             FL1001T1       USP24      Missense_Mutation 3             FL1001T1        LYST            Splice_Site 4             FL1001T1        GCKR      Missense_Mutation 5             FL1001T1      ORMDL1      Missense_Mutation 6             FL1001T1        BCL6      Missense_Mutation"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"The simplest oncoplot","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"number options customize oncoplot, ready use just metadata maf. example output default parameters:","code":"minMutationPercent <- 10 # only show genes mutated in at least 10% of samples prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Adding annotation tracks","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"can customize add annotation tracks informative display metadata ate interested :","code":"metadataColumns <- c(     \"pathology\",     \"lymphgen\",     \"genetic_subgroup\",     \"COO_consensus\",     \"sex\" ) prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Changing font sizes","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"may notice (less) genes annotations displayed oncoplot may want modify size gene names /annotation tracks labels. several parameters available : - metadataBarHeight: change height annotation tracks bottom oncoplot - metadataBarFontsize: change font size annotation tracks bottom oncoplot - fontSizeGene: change font size percentage labels right oncoplot gene names left - legendFontSize: change font size legend bottom plot Let’s see parameters action:","code":"metadataBarHeight <- 5 metadataBarFontsize <- 10 fontSizeGene <- 12 legendFontSize <- 7  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Show samples ordered on annotations","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"can notice default setting generates classic “rainfall” style plot - want add structure sort sample order way? easy parameter sortByColumns. can sort annotations use display oncoplot:  ordering occurs sequentially according order individual columns specified sortByColumns parameter. ordering ascending order, can toggled additional boolean parameter arrange_descending.","code":"prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     minMutationPercent = minMutationPercent,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Displaying only specific genes","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"can scenarion might want diplay genes based recurrence, interest specific genes. Sure , one way pre-filter maf data genes interest. might unexpected consequences limit flexibility things, better way take advantage genes parameter:  Note removed minMutationPercent last function call since wanted see genes specifically requested. Now looking specific genes interest arranged decreasing order recurrence cohort. want enforce gene order oncoplot exactly specified gene variable? can take advantage keepGeneOrder parameter:","code":"fl_genes <- c(\"RRAGC\", \"CREBBP\", \"VMA21\", \"ATP6V1B2\", \"EZH2\", \"KMT2D\") dlbcl_genes <- c(\"MEF2B\", \"CD79B\", \"MYD88\", \"TP53\") genes <- c(fl_genes, dlbcl_genes)  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes ) prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     keepGeneOrder = TRUE ) [1] \"RRAGC\"    \"CREBBP\"   \"VMA21\"    \"ATP6V1B2\" \"EZH2\"     \"KMT2D\"     [7] \"MEF2B\"    \"CD79B\"    \"MYD88\"    \"TP53\""},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Grouping genes into categories","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"can also group genes specific categories. , need named list name list element corresponds gene name, list element corresponds gene group. alreade genes variable, can convert appropriate format: Now can use split genes oncoplot groups:  can provide two groups genes - number groups supported long specified gene_groups. Within group, genes ordered decreasing order recurrence, keepGeneOrder parameter still supported specified, keep specified order within group.","code":"gene_groups <- c(     rep(\"FL\", length(fl_genes)),     rep(\"DLBCL\", length(dlbcl_genes)) ) names(gene_groups) <- genes  gene_groups RRAGC   CREBBP    VMA21 ATP6V1B2     EZH2    KMT2D    MEF2B    CD79B      \"FL\"     \"FL\"     \"FL\"     \"FL\"     \"FL\"     \"FL\"  \"DLBCL\"  \"DLBCL\"     MYD88     TP53   \"DLBCL\"  \"DLBCL\" prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Grouping samples into categories","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"Similar grouping genes, can also group samples certain categories. Typically, done based one annotations tracks. default, labels sample category, also option specifying labels:","code":"prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\") )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Tallying mutation burden","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"Previously, noted maf data supplying prettyOncoplot subset contain coding mutations, also discouraged pre-filtering maf subset genes insterested looking . important: want layer additional information like total mutation burden per sample, subsetting filtering maf generate inaccurate misleading results. Therefore, prettyOncoplot handles ! go ahead tallying total mutation burden, just add additional parameters function call:  dynamic range total mutation burden big extreme outliers, bar chart top oncoplot can capped numeric value providing tally_all_mutations_max parameter. want additionally force ordering based total number mutations, nicely arranged decreasing order? can adding mutation counts one annotation tracks using sort samples:  modified sortByColumns parameter, provided two additional parameters numericMetadataColumns arrange_descending. top annotation n annotation bottom thing? Remove n legend adding hide_annotations = \"n\" remove display annotation track keeping ordering adding hide_annotations_tracks = TRUE.","code":"hideTopBarplot <- FALSE # will display TMB annotations at the top tally_all_mutations <- TRUE # will tally all mutations per sample  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = metadataColumns,     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations ) # Count all muts to define the order of samples total_mut_burden <- maf %>%     count(Tumor_Sample_Barcode)  head(total_mut_burden) genomic_data Object Genome Build: grch37  Showing first 10 rows:   Tumor_Sample_Barcode   n 1            01-20260T  71 2            02-13135T  98 3            02-20170T  67 4            02-22991T  53 5            03-34157T  26 6            04-24937T 146 # Add this info to metadata metadata <- left_join(     metadata,     total_mut_burden )  prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Annotating significance of mutation frequencies in sample groups","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"looking sample plots, can notice frequency mutations RRAGC, ATP6V1B2, VMA21 others different FL DLBCL. difference significant? Can layer diffenerence display panel? Yes can, easy GAMBLR family! first use another function GAMBLR.viz run Fisher’s test find genes significantly different FL DLBCL:  fact, genes mutated significantly different frequencies! Now let’s layer information oncoplot:","code":"fisher_test <- prettyForestPlot(     maf = maf,     metadata = metadata,     genes = genes,     comparison_column = \"pathology\",     comparison_values = c(\"DLBCL\", \"FL\"), # we have three pathologies in data     comparison_name = \"FL vs DLBCL\" ) fisher_test$arranged prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Annotating genes with hotspots","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"genes mutated certain positions often others, therefore creating mutational hotspots - can layer level information oncoplot. First, need process maf data add new column called hot_spot contain boolean value showing whether particular mutation hotspot. don’t know , function exactly purpose GAMBLR.data, use example: GAMBLR.data version annotate_hotspots handles specific genes functionality annotate hotspots. Now, can add annotation hotspots oncoplot display toggling highlightHotspots parameter:","code":"# Annotate hotspots maf <- annotate_hotspots(maf)  # What are the hotspots? maf %>%     filter(hot_spot) %>%     select(Hugo_Symbol, hot_spot) %>%     table() hot_spot Hugo_Symbol TRUE      CREBBP   76      EZH2     86      FOXO1    20      MEF2B    23      MYD88    46      STAT6    51 highlightHotspots <- TRUE prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Co-oncoplot: two plots side-by-side","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"may also informative generate display panel two oncoplots displayed side--side, possible visually compare specific groups samples maintaining annotations ordering built far. purpose, GAMBLR.viz another function pretty family: prettyCoOncoplot. accepts parameters prettyOncoplot addition unique additions. example, lets break sample oncoplot created far genetic_subgroup see cFL compares dFL: possible display two groups side--side. metadata column want split contains groups, specific values can specified comparison_values parameter. Notice need create individual maf metadata objects supply prettyCoOncoplot - objects used also supported , specified differen parameters metadata maf. example, forced order genes exaclty specified gene displayed row oncoplots, othervise wold row due different frequencies group. addition specifying parameter, also enforced specific number rows legend plot, nicely align display items.","code":"prettyCoOncoplot(     metadata = metadata,     maf = maf,     comparison_column = \"genetic_subgroup\",     label1 = \"cFL\",     label2 = \"dFL\",     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     keepGeneOrder = TRUE,     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots,     legend_row = 2,     annotation_row = 2 )"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/oncoplot.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Using oncoplot in multi-panel figure","title":"Tutorial: The prettiest oncoplot – GAMBLR.viz","text":"arranging items multi-panel figure preparing manuscript experiment report, may needed use generated oncoplot page display items. prettyOncoplot (, therefore, prettyCoOncoplot), handles ComplexHeatmap hood generate graphics, readily available combined plots generated tools, example ggplot2. readily available - definitely impossible! output prettyCoOncoplot directly compatible arrangement multi-panel figure since uses trick shown hood put two panels side--side, otuput prettyOncoplot ComplexHeatmap object needs extra steps allow multi-panel arrangement. First, lets store returned oncoplot variable: Next, import packages needed handle trick: , capture display oncoplot: Now, ready us arrange multi-panel figure. can use forest plot already looked example, put right oncoplot: Final note: nice genes forest plot directly aligned genes displayed oncoplot, can providing consistent ordering adding white space forest plot match height oncoplot:","code":"my_oncoplot <- prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = genes,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots ) library(ComplexHeatmap) # to handle the ComplexHeatmap object library(ggpubr) # to arrange multiple panels my_oncoplot = grid.grabExpr(     draw(my_oncoplot),     width = 10,     height = 17 ) multipanel_figure <- ggarrange(     my_oncoplot, # left panel     fisher_test$arranged, # right panel     widths = c(1.5, 1), # so the oncoplot is a little wider than the forest     labels = c(\"A\", \"B\"), # labels for the panels     font.label = list( # make labels bold face         color = \"black\",         face = \"bold\"     ) )  multipanel_figure my_oncoplot <- prettyOncoplot(     these_samples_metadata = metadata,     maf_df = maf,     metadataColumns = metadataColumns,     metadataBarHeight = metadataBarHeight,     metadataBarFontsize = metadataBarFontsize,     fontSizeGene = fontSizeGene,     legendFontSize = legendFontSize,     sortByColumns = c(\"n\", metadataColumns),     genes = rev(fisher_test$fisher$gene),     keepGeneOrder = TRUE,     splitGeneGroups = gene_groups,     splitColumnName = \"pathology\",     groupNames = c(\"Follicular lymphoma\", \"DLBCL\", \"COMFL\"),     hideTopBarplot = hideTopBarplot,     tally_all_mutations = tally_all_mutations,     numericMetadataColumns = \"n\",     arrange_descending = TRUE,     hide_annotations = \"n\",     hide_annotations_tracks = TRUE,     annotate_specific_genes = TRUE,     this_forest_object = fisher_test,     highlightHotspots = highlightHotspots )  my_oncoplot = grid.grabExpr(     draw(my_oncoplot),     width = 10,     height = 17 )  multipanel_figure <- ggarrange(     my_oncoplot, # left panel     ggarrange( # right panel         NULL, # empty space at the top         fisher_test$arranged, # forest on the top         NULL, # empty space at the bottom         nrow = 3, # arrange vertically         heights = c(0.1, 2.5, 1) # match height of the oncoplot     ),     widths = c(1.5, 1), # so the oncoplot is a little wider than the forest     labels = c(\"A\", \"B\"), # labels for the panels     font.label = list( # make labels bold face         color = \"black\",         face = \"bold\"     ) )  multipanel_figure"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/recap_figures.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Prepare setup","title":"Tutorial: Regenerating figures from published manuscripts – GAMBLR.viz","text":"first import necessary packages: Next, use standard color pallette store variable easy access: Finally, set consistent GAMBLR-specific ggplot theme tutorial:","code":"# Load library(readxl) library(ComplexHeatmap) library(ggbeeswarm) library(ggpubr) library(GAMBLR.open) library(tidyverse) colors <- get_gambl_colours() theme_set(theme_Morons())"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/recap_figures.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Differential gene expression between FL subgroups","title":"Tutorial: Regenerating figures from published manuscripts – GAMBLR.viz","text":"Figure 4A Dreval et al shows differential gene expression CREBBP, FOXP1, MYC genetic subgroups FL described paper. can regenerate confirm published results demonstate easy work GAMBLR.viz. Next, can take advantage publicly available gene expression data access directly. data provided ENSEMBL identifiers, need make conversion human-readable ENSEMBL identifiers. need search linkage direcly available GAMBLR family: Now can access gene expression data prepare plotting Now can perform statistical comparisons find differences gene expression: Plot!","code":"# Get metadata metadata <- get_gambl_metadata() %>%     filter(         cohort == \"FL_Dreval\",         pathology %in% c(\"FL\", \"DLBCL\")     ) identifiers <- grch37_gene_coordinates %>%     filter(gene_name %in% c(\"CREBBP\", \"FOXP1\", \"MYC\")) %>%     select(ensembl_gene_id, gene_name) # get gene expression expression <- read_tsv(         \"https://www.bcgsc.ca/downloads/morinlab/cFL_Blood_2023_GE.tsv.gz\"     ) %>%     filter(ensembl_gene_id %in% identifiers$ensembl_gene_id) %>%     # add human-readable identifiers     left_join(         identifiers,         .     )  expression <- expression %>%     # convert to long format     pivot_longer(         !c(ensembl_gene_id, gene_name),         names_to = \"sample_id\",         values_to = \"expression\"     ) %>%     # add genetic metadata labels     left_join(         .,         metadata %>%             select(sample_id, pathology, genetic_subgroup)     ) %>%     # prepare grouping label and set consistent level order     mutate(         comp_group = ifelse(             pathology == \"DLBCL\",             pathology,             genetic_subgroup         ),         comp_group = factor(             comp_group,             levels = c(\"DLBCL\", \"dFL\", \"cFL\")         )     ) %>%     drop_na() pwc <- expression %>%     group_by(gene_name) %>%     rstatix::wilcox_test(         expression ~ comp_group     )  # Add coordinates for position of brackets pwc <- pwc %>%     rstatix::add_xy_position(x = \"comp_group\") p <- expression %>%     ggplot(         aes(             x = comp_group,             y = expression,             color = comp_group         )     ) +     geom_boxplot() +     geom_quasirandom() +     stat_pvalue_manual(         pwc,         hide.ns = TRUE,         size = 8,         label = \"p.adj.signif\"     ) +     facet_grid(cols = vars(gene_name)) +     scale_color_manual(values = colors) +     ylab(\"Expression\") +     theme(         axis.title.x = element_blank()     )  p"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/recap_figures.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Differentially mutated genes between DLBCL and FL","title":"Tutorial: Regenerating figures from published manuscripts – GAMBLR.viz","text":"paper Dreval et al showed Supplemental Figure 1B genes mutated differential frequencies FL DLBCL. can also easily regenerate plot:","code":"# First obtain maf data maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" )  # The Plot! p <- prettyForestPlot(     maf = maf,     metadata = metadata,     comparison_column = \"pathology\",     comparison_values = c(\"DLBCL\", \"FL\"),     max_q = 0.1,     genes = c(lymphoma_genes$Gene, \"VMA21\") )  p$arranged"},{"path":"https://morinlab.github.io/GAMBLR.viz/tutorials/recap_figures.html","id":null,"dir":"Tutorials","previous_headings":"","what":"Patterns of mutations at common aSHM target sites","title":"Tutorial: Regenerating figures from published manuscripts – GAMBLR.viz","text":"study FL Dreval et al Supplemental Figure 4A demonstrated important visualization patterns mutations common aSHM target sites across DLBCL FL comparing tumors discovery cohort. can recapitulate figure tutorial using data bundled GAMBLR visualization functions available GAMBLR.viz. First, retreive metadata exactly provided paper: also want ensure consistent ordering Analysis cohort annotation track associated heatmap. default, values sorted alphabetically, set ordering informed biologically converting column factor: now also collect mutations samples: Now, need bed-formatted data frame coordinates regions interest. use aSHM regions GAMBLR, use version used original paper: Now, can plot heatmap mutations using GAMBLR.viz function heatmap_mutation_frequency_bin:","code":"# Read supplemental table from that paper metadata <- read_xlsx(     system.file(         \"extdata\",         \"studies/FL_Dreval.xlsx\",         package = \"GAMBLR.data\"     ) )  # What is provided in the supplemental table? colnames(metadata) [1] \"Patient barcode\"           \"Pairing status\"             [3] \"Genome sample id\"          \"Normal sample id\"           [5] \"Sex\"                       \"Age at diagnosis\"           [7] \"Pathology\"                 \"FL grade\"                   [9] \"Analysis cohort\"           \"Tumor biopsy\"              [11] \"Reference\"                 \"MYC FISH BA\"               [13] \"BCL2 FISH BA\"              \"BCL6 FISH BA\"              [15] \"MYC WGS Tx\"                \"BCL2 WGS Tx\"               [17] \"BCL6 WGS Tx\"               \"Tumor purity\"              [19] \"total N of SSM\"            \"PGA\"                       [21] \"Analysis\"                  \"cFL/dFL label\"             [23] \"SeqType\"                   \"AverageBaseQuality\"        [25] \"AverageInsertSize\"         \"AverageReadLength\"         [27] \"PairsOnDiffCHR\"            \"TotalReads\"                [29] \"TotalUniquelyMapped\"       \"TotalUnmappedreads\"        [31] \"TotalDuplicatedreads\"      \"ProportionReadsDuplicated\" [33] \"ProportionReadsMapped\"     \"MeanCorrectedCoverage\"     [35] \"ProportionCoverage10x\"     \"ProportionCoverage30x\" # Select and rename columns that we need for heatmap metadata <- metadata %>%     select(         sample_id = `Genome sample id`,         `Analysis cohort`,         \"BCL2 Status\" = `BCL2 WGS Tx`     ) %>%     mutate(         # convert from boolean to character         `BCL2 Status` = ifelse(`BCL2 Status`, \"POS\", \"NEG\"),         # adding seq type for compatibility with plotting         seq_type = \"genome\"     ) metadata <- metadata %>%     mutate(         `Analysis cohort` = factor(             `Analysis cohort`,             levels = c(                 \"denovo-DLBCL\",                 \"no-HT\",                 \"pre-HT\",                 \"post-HT\",                 \"COM\"             )         )     ) maf <- get_ssm_by_samples(     these_samples_metadata = metadata,     tool_name = \"publication\" ) some_regions <- somatic_hypermutation_locations_GRCh37_v0.2 %>%     select(1:4) %>%     rename(         \"chrom\" = \"chr_name\",         \"start\" = \"hg19_start\",         \"end\" = \"hg19_end\",         \"name\" = \"gene\"     ) %>%     mutate(chrom = str_remove(chrom, \"chr\"))  #set factor ordering for later some_regions$name <- factor(     some_regions$name,     levels = sort(unique(some_regions$name)) ) ashm_heatmap <- heatmap_mutation_frequency_bin(     these_samples_metadata = metadata,     maf_data = maf,     cluster_rows_heatmap = FALSE,     regions_bed = some_regions,     min_bin_recurrence = 10,     region_fontsize = 12,     window_size = 1000,     slide_by = 500,     orientation = \"sample_columns\",     sortByColumns = c(\"Analysis cohort\", \"BCL2 Status\"),     metadataColumns = c(\"BCL2 Status\", \"Analysis cohort\"),     backgroundColour = \"white\",     return_heatmap_obj = TRUE,     customColours = list(         \"Analysis cohort\" = get_gambl_colours(),         \"BCL2 Status\" = get_gambl_colours(\"clinical\")     ) )  ComplexHeatmap::draw(     ashm_heatmap,     heatmap_legend_side = \"bottom\",     annotation_legend_side = \"bottom\" )"},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"What it does","title":null,"text":"-arching goal GAMBLR.viz facilitate exploratory data analysis cancer genomics studies reducing barrier generating eye-pleasing representations standard data types. package inspired similar resources MAFtools. work, found available tools insufficient needs. particular, visualizations produced GAMBLR.viz cater unique genetic features B-cell lymphomas. example, mutation patterns non-coding regions due aberrant somatic hypermutation. also provide convenient resources colour palettes allow data metadata figures consistent aesthetics.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"GAMBLR family","title":null,"text":"GAMBLR.viz part larger family R tools analysis lymphoma genomic data (GAMBLRverse, ). GAMBLR began toolkit analysts participating Genomic Analysis Mature B-cell Lymphomas project, led Morin Lab BC Cancer Simon Fraser University. GAMBLR.viz intends provide straightfoward ways mine cancer genomic results leveraging conveneince features afforded members GAMBLR family. user can analyze explore B-cell lymphoma genomics data relying entirely GAMBLR.viz rest GAMBLR packages. continue develop visualization tools, well improve functionality.","code":"/$$$$$$     /$$$$$$    /$$      /$$   /$$$$$$$    /$$        .:::::::       /$$__  $$   /$$__  $$  | $$$    /$$$  | $$__  $$  | $$        .::    .::    | $$  \\__/  | $$  \\ $$  | $$$$  /$$$$  | $$  \\ $$  | $$        .::    .::    | $$ /$$$$  | $$$$$$$$  | $$ $$/$$ $$  | $$$$$$$   | $$   <-   .: .::        | $$|_  $$  | $$__  $$  | $$  $$$| $$  | $$__  $$  | $$        .::  .::      | $$  \\ $$  | $$  | $$  | $$\\  $ | $$  | $$  \\ $$  | $$        .::    .::    |  $$$$$$/  | $$  | $$  | $$ \\/  | $$  | $$$$$$$/  | $$$$$$$$  .::      .::   \\______/   |__/  |__/  |__/     |__/  |_______/   |________/   ~GENOMIC~~~~~~~~~~~~~OF~~~~~~~~~~~~~~~~~B-CELL~~~~~~~~~~~~~~~~~~IN~~~~~~   ~~~~~~~~~~~~ANALYSIS~~~~~~MATURE~~~~~~~~~~~~~~~~~~~LYMPHOMAS~~~~~~~~~~R~"},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Local experience","title":null,"text":"functions provided GAMBLR.viz, including dependencies, immediately available upon package installation require internet connection ssh access GSC resources. can run anywhere R available without restrictions limitations.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Use cases","title":null,"text":"can use GAMBLR.viz step lymphoma data analysis workflow, initial data exploration preparation manuscript-ready figures. GAMBLR.viz helps : generate manuscript-ready plots simple reproducible manner. one-stop shop generate high-level region-specific visualizations genomic data analysis. implement consistent coloring scheme pallettes different types annotations. overcome learning curve using individual packages commonly implemented data visualization field.","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Gallery","title":null,"text":"Details guide  Details guide  Details guide  Details guide  Details mutation_hotspot_logo  Details prettyCoOncoplot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Tutorials","title":null,"text":"Details guide  Details guide  Details guide  Details guide","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Functions","title":null,"text":"Details mutation_hotspot_logo  Details prettyCoOncoplot","code":""},{"path":"https://morinlab.github.io/GAMBLR.viz/why.html","id":null,"dir":"","previous_headings":"","what":"Community","title":null,"text":"Community discussions primarily happen issue submission GitHub.","code":""}]
